/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/add-line-numbers/index.js":
/*!************************************************!*\
  !*** ./node_modules/add-line-numbers/index.js ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var padLeft = __webpack_require__(/*! pad-left */ \"./node_modules/pad-left/index.js\")\n\nmodule.exports = addLineNumbers\nfunction addLineNumbers (string, start, delim) {\n  start = typeof start === 'number' ? start : 1\n  delim = delim || ': '\n\n  var lines = string.split(/\\r?\\n/)\n  var totalDigits = String(lines.length + start - 1).length\n  return lines.map(function (line, i) {\n    var c = i + start\n    var digits = String(c).length\n    var prefix = padLeft(c, totalDigits - digits)\n    return prefix + delim + line\n  }).join('\\n')\n}\n\n\n//# sourceURL=webpack://rmh_touch/./node_modules/add-line-numbers/index.js?");

/***/ }),

/***/ "./node_modules/atob-lite/atob-node.js":
/*!*********************************************!*\
  !*** ./node_modules/atob-lite/atob-node.js ***!
  \*********************************************/
/***/ ((module) => {

eval("module.exports = function atob(str) {\n  return new Buffer(str, 'base64').toString('utf8')\n}\n\n\n//# sourceURL=webpack://rmh_touch/./node_modules/atob-lite/atob-node.js?");

/***/ }),

/***/ "./node_modules/base64-js/index.js":
/*!*****************************************!*\
  !*** ./node_modules/base64-js/index.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction getLens (b64) {\n  var len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n  var validLen = b64.indexOf('=')\n  if (validLen === -1) validLen = len\n\n  var placeHoldersLen = validLen === len\n    ? 0\n    : 4 - (validLen % 4)\n\n  return [validLen, placeHoldersLen]\n}\n\n// base64 is 4/3 + up to two characters of the original data\nfunction byteLength (b64) {\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction _byteLength (b64, validLen, placeHoldersLen) {\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction toByteArray (b64) {\n  var tmp\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))\n\n  var curByte = 0\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  var len = placeHoldersLen > 0\n    ? validLen - 4\n    : validLen\n\n  var i\n  for (i = 0; i < len; i += 4) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 18) |\n      (revLookup[b64.charCodeAt(i + 1)] << 12) |\n      (revLookup[b64.charCodeAt(i + 2)] << 6) |\n      revLookup[b64.charCodeAt(i + 3)]\n    arr[curByte++] = (tmp >> 16) & 0xFF\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 2) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 2) |\n      (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 1) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 10) |\n      (revLookup[b64.charCodeAt(i + 1)] << 4) |\n      (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] +\n    lookup[num >> 12 & 0x3F] +\n    lookup[num >> 6 & 0x3F] +\n    lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp =\n      ((uint8[i] << 16) & 0xFF0000) +\n      ((uint8[i + 1] << 8) & 0xFF00) +\n      (uint8[i + 2] & 0xFF)\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 2] +\n      lookup[(tmp << 4) & 0x3F] +\n      '=='\n    )\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 10] +\n      lookup[(tmp >> 4) & 0x3F] +\n      lookup[(tmp << 2) & 0x3F] +\n      '='\n    )\n  }\n\n  return parts.join('')\n}\n\n\n//# sourceURL=webpack://rmh_touch/./node_modules/base64-js/index.js?");

/***/ }),

/***/ "./node_modules/bit-twiddle/twiddle.js":
/*!*********************************************!*\
  !*** ./node_modules/bit-twiddle/twiddle.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("/**\n * Bit twiddling hacks for JavaScript.\n *\n * Author: Mikola Lysenko\n *\n * Ported from Stanford bit twiddling hack library:\n *    http://graphics.stanford.edu/~seander/bithacks.html\n */\n\n \"use restrict\";\n\n//Number of bits in an integer\nvar INT_BITS = 32;\n\n//Constants\nexports.INT_BITS  = INT_BITS;\nexports.INT_MAX   =  0x7fffffff;\nexports.INT_MIN   = -1<<(INT_BITS-1);\n\n//Returns -1, 0, +1 depending on sign of x\nexports.sign = function(v) {\n  return (v > 0) - (v < 0);\n}\n\n//Computes absolute value of integer\nexports.abs = function(v) {\n  var mask = v >> (INT_BITS-1);\n  return (v ^ mask) - mask;\n}\n\n//Computes minimum of integers x and y\nexports.min = function(x, y) {\n  return y ^ ((x ^ y) & -(x < y));\n}\n\n//Computes maximum of integers x and y\nexports.max = function(x, y) {\n  return x ^ ((x ^ y) & -(x < y));\n}\n\n//Checks if a number is a power of two\nexports.isPow2 = function(v) {\n  return !(v & (v-1)) && (!!v);\n}\n\n//Computes log base 2 of v\nexports.log2 = function(v) {\n  var r, shift;\n  r =     (v > 0xFFFF) << 4; v >>>= r;\n  shift = (v > 0xFF  ) << 3; v >>>= shift; r |= shift;\n  shift = (v > 0xF   ) << 2; v >>>= shift; r |= shift;\n  shift = (v > 0x3   ) << 1; v >>>= shift; r |= shift;\n  return r | (v >> 1);\n}\n\n//Computes log base 10 of v\nexports.log10 = function(v) {\n  return  (v >= 1000000000) ? 9 : (v >= 100000000) ? 8 : (v >= 10000000) ? 7 :\n          (v >= 1000000) ? 6 : (v >= 100000) ? 5 : (v >= 10000) ? 4 :\n          (v >= 1000) ? 3 : (v >= 100) ? 2 : (v >= 10) ? 1 : 0;\n}\n\n//Counts number of bits\nexports.popCount = function(v) {\n  v = v - ((v >>> 1) & 0x55555555);\n  v = (v & 0x33333333) + ((v >>> 2) & 0x33333333);\n  return ((v + (v >>> 4) & 0xF0F0F0F) * 0x1010101) >>> 24;\n}\n\n//Counts number of trailing zeros\nfunction countTrailingZeros(v) {\n  var c = 32;\n  v &= -v;\n  if (v) c--;\n  if (v & 0x0000FFFF) c -= 16;\n  if (v & 0x00FF00FF) c -= 8;\n  if (v & 0x0F0F0F0F) c -= 4;\n  if (v & 0x33333333) c -= 2;\n  if (v & 0x55555555) c -= 1;\n  return c;\n}\nexports.countTrailingZeros = countTrailingZeros;\n\n//Rounds to next power of 2\nexports.nextPow2 = function(v) {\n  v += v === 0;\n  --v;\n  v |= v >>> 1;\n  v |= v >>> 2;\n  v |= v >>> 4;\n  v |= v >>> 8;\n  v |= v >>> 16;\n  return v + 1;\n}\n\n//Rounds down to previous power of 2\nexports.prevPow2 = function(v) {\n  v |= v >>> 1;\n  v |= v >>> 2;\n  v |= v >>> 4;\n  v |= v >>> 8;\n  v |= v >>> 16;\n  return v - (v>>>1);\n}\n\n//Computes parity of word\nexports.parity = function(v) {\n  v ^= v >>> 16;\n  v ^= v >>> 8;\n  v ^= v >>> 4;\n  v &= 0xf;\n  return (0x6996 >>> v) & 1;\n}\n\nvar REVERSE_TABLE = new Array(256);\n\n(function(tab) {\n  for(var i=0; i<256; ++i) {\n    var v = i, r = i, s = 7;\n    for (v >>>= 1; v; v >>>= 1) {\n      r <<= 1;\n      r |= v & 1;\n      --s;\n    }\n    tab[i] = (r << s) & 0xff;\n  }\n})(REVERSE_TABLE);\n\n//Reverse bits in a 32 bit word\nexports.reverse = function(v) {\n  return  (REVERSE_TABLE[ v         & 0xff] << 24) |\n          (REVERSE_TABLE[(v >>> 8)  & 0xff] << 16) |\n          (REVERSE_TABLE[(v >>> 16) & 0xff] << 8)  |\n           REVERSE_TABLE[(v >>> 24) & 0xff];\n}\n\n//Interleave bits of 2 coordinates with 16 bits.  Useful for fast quadtree codes\nexports.interleave2 = function(x, y) {\n  x &= 0xFFFF;\n  x = (x | (x << 8)) & 0x00FF00FF;\n  x = (x | (x << 4)) & 0x0F0F0F0F;\n  x = (x | (x << 2)) & 0x33333333;\n  x = (x | (x << 1)) & 0x55555555;\n\n  y &= 0xFFFF;\n  y = (y | (y << 8)) & 0x00FF00FF;\n  y = (y | (y << 4)) & 0x0F0F0F0F;\n  y = (y | (y << 2)) & 0x33333333;\n  y = (y | (y << 1)) & 0x55555555;\n\n  return x | (y << 1);\n}\n\n//Extracts the nth interleaved component\nexports.deinterleave2 = function(v, n) {\n  v = (v >>> n) & 0x55555555;\n  v = (v | (v >>> 1))  & 0x33333333;\n  v = (v | (v >>> 2))  & 0x0F0F0F0F;\n  v = (v | (v >>> 4))  & 0x00FF00FF;\n  v = (v | (v >>> 16)) & 0x000FFFF;\n  return (v << 16) >> 16;\n}\n\n\n//Interleave bits of 3 coordinates, each with 10 bits.  Useful for fast octree codes\nexports.interleave3 = function(x, y, z) {\n  x &= 0x3FF;\n  x  = (x | (x<<16)) & 4278190335;\n  x  = (x | (x<<8))  & 251719695;\n  x  = (x | (x<<4))  & 3272356035;\n  x  = (x | (x<<2))  & 1227133513;\n\n  y &= 0x3FF;\n  y  = (y | (y<<16)) & 4278190335;\n  y  = (y | (y<<8))  & 251719695;\n  y  = (y | (y<<4))  & 3272356035;\n  y  = (y | (y<<2))  & 1227133513;\n  x |= (y << 1);\n  \n  z &= 0x3FF;\n  z  = (z | (z<<16)) & 4278190335;\n  z  = (z | (z<<8))  & 251719695;\n  z  = (z | (z<<4))  & 3272356035;\n  z  = (z | (z<<2))  & 1227133513;\n  \n  return x | (z << 2);\n}\n\n//Extracts nth interleaved component of a 3-tuple\nexports.deinterleave3 = function(v, n) {\n  v = (v >>> n)       & 1227133513;\n  v = (v | (v>>>2))   & 3272356035;\n  v = (v | (v>>>4))   & 251719695;\n  v = (v | (v>>>8))   & 4278190335;\n  v = (v | (v>>>16))  & 0x3FF;\n  return (v<<22)>>22;\n}\n\n//Computes next combination in colexicographic order (this is mistakenly called nextPermutation on the bit twiddling hacks page)\nexports.nextCombination = function(v) {\n  var t = v | (v - 1);\n  return (t + 1) | (((~t & -~t) - 1) >>> (countTrailingZeros(v) + 1));\n}\n\n\n\n//# sourceURL=webpack://rmh_touch/./node_modules/bit-twiddle/twiddle.js?");

/***/ }),

/***/ "./node_modules/buffer/index.js":
/*!**************************************!*\
  !*** ./node_modules/buffer/index.js ***!
  \**************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <https://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n\n\nconst base64 = __webpack_require__(/*! base64-js */ \"./node_modules/base64-js/index.js\")\nconst ieee754 = __webpack_require__(/*! ieee754 */ \"./node_modules/ieee754/index.js\")\nconst customInspectSymbol =\n  (typeof Symbol === 'function' && typeof Symbol['for'] === 'function') // eslint-disable-line dot-notation\n    ? Symbol['for']('nodejs.util.inspect.custom') // eslint-disable-line dot-notation\n    : null\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\nconst K_MAX_LENGTH = 0x7fffffff\nexports.kMaxLength = K_MAX_LENGTH\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Print warning and recommend using `buffer` v4.x which has an Object\n *               implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * We report that the browser does not support typed arrays if the are not subclassable\n * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`\n * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support\n * for __proto__ and has a buggy typed array implementation.\n */\nBuffer.TYPED_ARRAY_SUPPORT = typedArraySupport()\n\nif (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&\n    typeof console.error === 'function') {\n  console.error(\n    'This browser lacks typed array (Uint8Array) support which is required by ' +\n    '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'\n  )\n}\n\nfunction typedArraySupport () {\n  // Can typed array instances can be augmented?\n  try {\n    const arr = new Uint8Array(1)\n    const proto = { foo: function () { return 42 } }\n    Object.setPrototypeOf(proto, Uint8Array.prototype)\n    Object.setPrototypeOf(arr, proto)\n    return arr.foo() === 42\n  } catch (e) {\n    return false\n  }\n}\n\nObject.defineProperty(Buffer.prototype, 'parent', {\n  enumerable: true,\n  get: function () {\n    if (!Buffer.isBuffer(this)) return undefined\n    return this.buffer\n  }\n})\n\nObject.defineProperty(Buffer.prototype, 'offset', {\n  enumerable: true,\n  get: function () {\n    if (!Buffer.isBuffer(this)) return undefined\n    return this.byteOffset\n  }\n})\n\nfunction createBuffer (length) {\n  if (length > K_MAX_LENGTH) {\n    throw new RangeError('The value \"' + length + '\" is invalid for option \"size\"')\n  }\n  // Return an augmented `Uint8Array` instance\n  const buf = new Uint8Array(length)\n  Object.setPrototypeOf(buf, Buffer.prototype)\n  return buf\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new TypeError(\n        'The \"string\" argument must be of type string. Received type number'\n      )\n    }\n    return allocUnsafe(arg)\n  }\n  return from(arg, encodingOrOffset, length)\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\nfunction from (value, encodingOrOffset, length) {\n  if (typeof value === 'string') {\n    return fromString(value, encodingOrOffset)\n  }\n\n  if (ArrayBuffer.isView(value)) {\n    return fromArrayView(value)\n  }\n\n  if (value == null) {\n    throw new TypeError(\n      'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +\n      'or Array-like Object. Received type ' + (typeof value)\n    )\n  }\n\n  if (isInstance(value, ArrayBuffer) ||\n      (value && isInstance(value.buffer, ArrayBuffer))) {\n    return fromArrayBuffer(value, encodingOrOffset, length)\n  }\n\n  if (typeof SharedArrayBuffer !== 'undefined' &&\n      (isInstance(value, SharedArrayBuffer) ||\n      (value && isInstance(value.buffer, SharedArrayBuffer)))) {\n    return fromArrayBuffer(value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'number') {\n    throw new TypeError(\n      'The \"value\" argument must not be of type number. Received type number'\n    )\n  }\n\n  const valueOf = value.valueOf && value.valueOf()\n  if (valueOf != null && valueOf !== value) {\n    return Buffer.from(valueOf, encodingOrOffset, length)\n  }\n\n  const b = fromObject(value)\n  if (b) return b\n\n  if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null &&\n      typeof value[Symbol.toPrimitive] === 'function') {\n    return Buffer.from(value[Symbol.toPrimitive]('string'), encodingOrOffset, length)\n  }\n\n  throw new TypeError(\n    'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +\n    'or Array-like Object. Received type ' + (typeof value)\n  )\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(value, encodingOrOffset, length)\n}\n\n// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:\n// https://github.com/feross/buffer/pull/148\nObject.setPrototypeOf(Buffer.prototype, Uint8Array.prototype)\nObject.setPrototypeOf(Buffer, Uint8Array)\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be of type number')\n  } else if (size < 0) {\n    throw new RangeError('The value \"' + size + '\" is invalid for option \"size\"')\n  }\n}\n\nfunction alloc (size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpreted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(size).fill(fill, encoding)\n      : createBuffer(size).fill(fill)\n  }\n  return createBuffer(size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(size, fill, encoding)\n}\n\nfunction allocUnsafe (size) {\n  assertSize(size)\n  return createBuffer(size < 0 ? 0 : checked(size) | 0)\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(size)\n}\n\nfunction fromString (string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('Unknown encoding: ' + encoding)\n  }\n\n  const length = byteLength(string, encoding) | 0\n  let buf = createBuffer(length)\n\n  const actual = buf.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    buf = buf.slice(0, actual)\n  }\n\n  return buf\n}\n\nfunction fromArrayLike (array) {\n  const length = array.length < 0 ? 0 : checked(array.length) | 0\n  const buf = createBuffer(length)\n  for (let i = 0; i < length; i += 1) {\n    buf[i] = array[i] & 255\n  }\n  return buf\n}\n\nfunction fromArrayView (arrayView) {\n  if (isInstance(arrayView, Uint8Array)) {\n    const copy = new Uint8Array(arrayView)\n    return fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength)\n  }\n  return fromArrayLike(arrayView)\n}\n\nfunction fromArrayBuffer (array, byteOffset, length) {\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\"offset\" is outside of buffer bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\"length\" is outside of buffer bounds')\n  }\n\n  let buf\n  if (byteOffset === undefined && length === undefined) {\n    buf = new Uint8Array(array)\n  } else if (length === undefined) {\n    buf = new Uint8Array(array, byteOffset)\n  } else {\n    buf = new Uint8Array(array, byteOffset, length)\n  }\n\n  // Return an augmented `Uint8Array` instance\n  Object.setPrototypeOf(buf, Buffer.prototype)\n\n  return buf\n}\n\nfunction fromObject (obj) {\n  if (Buffer.isBuffer(obj)) {\n    const len = checked(obj.length) | 0\n    const buf = createBuffer(len)\n\n    if (buf.length === 0) {\n      return buf\n    }\n\n    obj.copy(buf, 0, 0, len)\n    return buf\n  }\n\n  if (obj.length !== undefined) {\n    if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {\n      return createBuffer(0)\n    }\n    return fromArrayLike(obj)\n  }\n\n  if (obj.type === 'Buffer' && Array.isArray(obj.data)) {\n    return fromArrayLike(obj.data)\n  }\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < K_MAX_LENGTH` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= K_MAX_LENGTH) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return b != null && b._isBuffer === true &&\n    b !== Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false\n}\n\nBuffer.compare = function compare (a, b) {\n  if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength)\n  if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength)\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError(\n      'The \"buf1\", \"buf2\" arguments must be one of type Buffer or Uint8Array'\n    )\n  }\n\n  if (a === b) return 0\n\n  let x = a.length\n  let y = b.length\n\n  for (let i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!Array.isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  let i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  const buffer = Buffer.allocUnsafe(length)\n  let pos = 0\n  for (i = 0; i < list.length; ++i) {\n    let buf = list[i]\n    if (isInstance(buf, Uint8Array)) {\n      if (pos + buf.length > buffer.length) {\n        if (!Buffer.isBuffer(buf)) buf = Buffer.from(buf)\n        buf.copy(buffer, pos)\n      } else {\n        Uint8Array.prototype.set.call(\n          buffer,\n          buf,\n          pos\n        )\n      }\n    } else if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    } else {\n      buf.copy(buffer, pos)\n    }\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    throw new TypeError(\n      'The \"string\" argument must be one of type string, Buffer, or ArrayBuffer. ' +\n      'Received type ' + typeof string\n    )\n  }\n\n  const len = string.length\n  const mustMatch = (arguments.length > 2 && arguments[2] === true)\n  if (!mustMatch && len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  let loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) {\n          return mustMatch ? -1 : utf8ToBytes(string).length // assume utf8\n        }\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  let loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coercion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)\n// to detect a Buffer instance. It's not possible to use `instanceof Buffer`\n// reliably in a browserify context because there could be multiple different\n// copies of the 'buffer' package in use. This method works even for Buffer\n// instances that were created from another copy of the `buffer` package.\n// See: https://github.com/feross/buffer/issues/154\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  const i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  const len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (let i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  const len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (let i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  const len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (let i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  const length = this.length\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.toLocaleString = Buffer.prototype.toString\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  let str = ''\n  const max = exports.INSPECT_MAX_BYTES\n  str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim()\n  if (this.length > max) str += ' ... '\n  return '<Buffer ' + str + '>'\n}\nif (customInspectSymbol) {\n  Buffer.prototype[customInspectSymbol] = Buffer.prototype.inspect\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (isInstance(target, Uint8Array)) {\n    target = Buffer.from(target, target.offset, target.byteLength)\n  }\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError(\n      'The \"target\" argument must be one of type Buffer or Uint8Array. ' +\n      'Received type ' + (typeof target)\n    )\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  let x = thisEnd - thisStart\n  let y = end - start\n  const len = Math.min(x, y)\n\n  const thisCopy = this.slice(thisStart, thisEnd)\n  const targetCopy = target.slice(start, end)\n\n  for (let i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset // Coerce to Number.\n  if (numberIsNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [val], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  let indexSize = 1\n  let arrLength = arr.length\n  let valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  let i\n  if (dir) {\n    let foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      let found = true\n      for (let j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  const remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  const strLen = string.length\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  let i\n  for (i = 0; i < length; ++i) {\n    const parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (numberIsNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset >>> 0\n    if (isFinite(length)) {\n      length = length >>> 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  const remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  let loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return asciiWrite(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  const res = []\n\n  let i = start\n  while (i < end) {\n    const firstByte = buf[i]\n    let codePoint = null\n    let bytesPerSequence = (firstByte > 0xEF)\n      ? 4\n      : (firstByte > 0xDF)\n          ? 3\n          : (firstByte > 0xBF)\n              ? 2\n              : 1\n\n    if (i + bytesPerSequence <= end) {\n      let secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nconst MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  const len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  let res = ''\n  let i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  let ret = ''\n  end = Math.min(buf.length, end)\n\n  for (let i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  let ret = ''\n  end = Math.min(buf.length, end)\n\n  for (let i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  const len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  let out = ''\n  for (let i = start; i < end; ++i) {\n    out += hexSliceLookupTable[buf[i]]\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  const bytes = buf.slice(start, end)\n  let res = ''\n  // If bytes.length is odd, the last 8 bits must be ignored (same as node.js)\n  for (let i = 0; i < bytes.length - 1; i += 2) {\n    res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256))\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  const len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  const newBuf = this.subarray(start, end)\n  // Return an augmented `Uint8Array` instance\n  Object.setPrototypeOf(newBuf, Buffer.prototype)\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUintLE =\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  let val = this[offset]\n  let mul = 1\n  let i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUintBE =\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  let val = this[offset + --byteLength]\n  let mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUint8 =\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUint16LE =\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUint16BE =\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUint32LE =\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUint32BE =\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readBigUInt64LE = defineBigIntMethod(function readBigUInt64LE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const lo = first +\n    this[++offset] * 2 ** 8 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 24\n\n  const hi = this[++offset] +\n    this[++offset] * 2 ** 8 +\n    this[++offset] * 2 ** 16 +\n    last * 2 ** 24\n\n  return BigInt(lo) + (BigInt(hi) << BigInt(32))\n})\n\nBuffer.prototype.readBigUInt64BE = defineBigIntMethod(function readBigUInt64BE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const hi = first * 2 ** 24 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    this[++offset]\n\n  const lo = this[++offset] * 2 ** 24 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    last\n\n  return (BigInt(hi) << BigInt(32)) + BigInt(lo)\n})\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  let val = this[offset]\n  let mul = 1\n  let i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  let i = byteLength\n  let mul = 1\n  let val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  const val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  const val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readBigInt64LE = defineBigIntMethod(function readBigInt64LE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const val = this[offset + 4] +\n    this[offset + 5] * 2 ** 8 +\n    this[offset + 6] * 2 ** 16 +\n    (last << 24) // Overflow\n\n  return (BigInt(val) << BigInt(32)) +\n    BigInt(first +\n    this[++offset] * 2 ** 8 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 24)\n})\n\nBuffer.prototype.readBigInt64BE = defineBigIntMethod(function readBigInt64BE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const val = (first << 24) + // Overflow\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    this[++offset]\n\n  return (BigInt(val) << BigInt(32)) +\n    BigInt(this[++offset] * 2 ** 24 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    last)\n})\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUintLE =\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    const maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  let mul = 1\n  let i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUintBE =\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    const maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  let i = byteLength - 1\n  let mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUint8 =\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeUint16LE =\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  return offset + 2\n}\n\nBuffer.prototype.writeUint16BE =\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  this[offset] = (value >>> 8)\n  this[offset + 1] = (value & 0xff)\n  return offset + 2\n}\n\nBuffer.prototype.writeUint32LE =\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  this[offset + 3] = (value >>> 24)\n  this[offset + 2] = (value >>> 16)\n  this[offset + 1] = (value >>> 8)\n  this[offset] = (value & 0xff)\n  return offset + 4\n}\n\nBuffer.prototype.writeUint32BE =\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  this[offset] = (value >>> 24)\n  this[offset + 1] = (value >>> 16)\n  this[offset + 2] = (value >>> 8)\n  this[offset + 3] = (value & 0xff)\n  return offset + 4\n}\n\nfunction wrtBigUInt64LE (buf, value, offset, min, max) {\n  checkIntBI(value, min, max, buf, offset, 7)\n\n  let lo = Number(value & BigInt(0xffffffff))\n  buf[offset++] = lo\n  lo = lo >> 8\n  buf[offset++] = lo\n  lo = lo >> 8\n  buf[offset++] = lo\n  lo = lo >> 8\n  buf[offset++] = lo\n  let hi = Number(value >> BigInt(32) & BigInt(0xffffffff))\n  buf[offset++] = hi\n  hi = hi >> 8\n  buf[offset++] = hi\n  hi = hi >> 8\n  buf[offset++] = hi\n  hi = hi >> 8\n  buf[offset++] = hi\n  return offset\n}\n\nfunction wrtBigUInt64BE (buf, value, offset, min, max) {\n  checkIntBI(value, min, max, buf, offset, 7)\n\n  let lo = Number(value & BigInt(0xffffffff))\n  buf[offset + 7] = lo\n  lo = lo >> 8\n  buf[offset + 6] = lo\n  lo = lo >> 8\n  buf[offset + 5] = lo\n  lo = lo >> 8\n  buf[offset + 4] = lo\n  let hi = Number(value >> BigInt(32) & BigInt(0xffffffff))\n  buf[offset + 3] = hi\n  hi = hi >> 8\n  buf[offset + 2] = hi\n  hi = hi >> 8\n  buf[offset + 1] = hi\n  hi = hi >> 8\n  buf[offset] = hi\n  return offset + 8\n}\n\nBuffer.prototype.writeBigUInt64LE = defineBigIntMethod(function writeBigUInt64LE (value, offset = 0) {\n  return wrtBigUInt64LE(this, value, offset, BigInt(0), BigInt('0xffffffffffffffff'))\n})\n\nBuffer.prototype.writeBigUInt64BE = defineBigIntMethod(function writeBigUInt64BE (value, offset = 0) {\n  return wrtBigUInt64BE(this, value, offset, BigInt(0), BigInt('0xffffffffffffffff'))\n})\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    const limit = Math.pow(2, (8 * byteLength) - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  let i = 0\n  let mul = 1\n  let sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    const limit = Math.pow(2, (8 * byteLength) - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  let i = byteLength - 1\n  let mul = 1\n  let sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  this[offset] = (value >>> 8)\n  this[offset + 1] = (value & 0xff)\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  this[offset + 2] = (value >>> 16)\n  this[offset + 3] = (value >>> 24)\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  this[offset] = (value >>> 24)\n  this[offset + 1] = (value >>> 16)\n  this[offset + 2] = (value >>> 8)\n  this[offset + 3] = (value & 0xff)\n  return offset + 4\n}\n\nBuffer.prototype.writeBigInt64LE = defineBigIntMethod(function writeBigInt64LE (value, offset = 0) {\n  return wrtBigUInt64LE(this, value, offset, -BigInt('0x8000000000000000'), BigInt('0x7fffffffffffffff'))\n})\n\nBuffer.prototype.writeBigInt64BE = defineBigIntMethod(function writeBigInt64BE (value, offset = 0) {\n  return wrtBigUInt64BE(this, value, offset, -BigInt('0x8000000000000000'), BigInt('0x7fffffffffffffff'))\n})\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer')\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('Index out of range')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  const len = end - start\n\n  if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {\n    // Use built-in when available, missing from IE11\n    this.copyWithin(targetStart, start, end)\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, end),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n    if (val.length === 1) {\n      const code = val.charCodeAt(0)\n      if ((encoding === 'utf8' && code < 128) ||\n          encoding === 'latin1') {\n        // Fast path: If `val` fits into a single byte, use that numeric value.\n        val = code\n      }\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  } else if (typeof val === 'boolean') {\n    val = Number(val)\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  let i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    const bytes = Buffer.isBuffer(val)\n      ? val\n      : Buffer.from(val, encoding)\n    const len = bytes.length\n    if (len === 0) {\n      throw new TypeError('The value \"' + val +\n        '\" is invalid for argument \"value\"')\n    }\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// CUSTOM ERRORS\n// =============\n\n// Simplified versions from Node, changed for Buffer-only usage\nconst errors = {}\nfunction E (sym, getMessage, Base) {\n  errors[sym] = class NodeError extends Base {\n    constructor () {\n      super()\n\n      Object.defineProperty(this, 'message', {\n        value: getMessage.apply(this, arguments),\n        writable: true,\n        configurable: true\n      })\n\n      // Add the error code to the name to include it in the stack trace.\n      this.name = `${this.name} [${sym}]`\n      // Access the stack to generate the error message including the error code\n      // from the name.\n      this.stack // eslint-disable-line no-unused-expressions\n      // Reset the name to the actual name.\n      delete this.name\n    }\n\n    get code () {\n      return sym\n    }\n\n    set code (value) {\n      Object.defineProperty(this, 'code', {\n        configurable: true,\n        enumerable: true,\n        value,\n        writable: true\n      })\n    }\n\n    toString () {\n      return `${this.name} [${sym}]: ${this.message}`\n    }\n  }\n}\n\nE('ERR_BUFFER_OUT_OF_BOUNDS',\n  function (name) {\n    if (name) {\n      return `${name} is outside of buffer bounds`\n    }\n\n    return 'Attempt to access memory outside buffer bounds'\n  }, RangeError)\nE('ERR_INVALID_ARG_TYPE',\n  function (name, actual) {\n    return `The \"${name}\" argument must be of type number. Received type ${typeof actual}`\n  }, TypeError)\nE('ERR_OUT_OF_RANGE',\n  function (str, range, input) {\n    let msg = `The value of \"${str}\" is out of range.`\n    let received = input\n    if (Number.isInteger(input) && Math.abs(input) > 2 ** 32) {\n      received = addNumericalSeparator(String(input))\n    } else if (typeof input === 'bigint') {\n      received = String(input)\n      if (input > BigInt(2) ** BigInt(32) || input < -(BigInt(2) ** BigInt(32))) {\n        received = addNumericalSeparator(received)\n      }\n      received += 'n'\n    }\n    msg += ` It must be ${range}. Received ${received}`\n    return msg\n  }, RangeError)\n\nfunction addNumericalSeparator (val) {\n  let res = ''\n  let i = val.length\n  const start = val[0] === '-' ? 1 : 0\n  for (; i >= start + 4; i -= 3) {\n    res = `_${val.slice(i - 3, i)}${res}`\n  }\n  return `${val.slice(0, i)}${res}`\n}\n\n// CHECK FUNCTIONS\n// ===============\n\nfunction checkBounds (buf, offset, byteLength) {\n  validateNumber(offset, 'offset')\n  if (buf[offset] === undefined || buf[offset + byteLength] === undefined) {\n    boundsError(offset, buf.length - (byteLength + 1))\n  }\n}\n\nfunction checkIntBI (value, min, max, buf, offset, byteLength) {\n  if (value > max || value < min) {\n    const n = typeof min === 'bigint' ? 'n' : ''\n    let range\n    if (byteLength > 3) {\n      if (min === 0 || min === BigInt(0)) {\n        range = `>= 0${n} and < 2${n} ** ${(byteLength + 1) * 8}${n}`\n      } else {\n        range = `>= -(2${n} ** ${(byteLength + 1) * 8 - 1}${n}) and < 2 ** ` +\n                `${(byteLength + 1) * 8 - 1}${n}`\n      }\n    } else {\n      range = `>= ${min}${n} and <= ${max}${n}`\n    }\n    throw new errors.ERR_OUT_OF_RANGE('value', range, value)\n  }\n  checkBounds(buf, offset, byteLength)\n}\n\nfunction validateNumber (value, name) {\n  if (typeof value !== 'number') {\n    throw new errors.ERR_INVALID_ARG_TYPE(name, 'number', value)\n  }\n}\n\nfunction boundsError (value, length, type) {\n  if (Math.floor(value) !== value) {\n    validateNumber(value, type)\n    throw new errors.ERR_OUT_OF_RANGE(type || 'offset', 'an integer', value)\n  }\n\n  if (length < 0) {\n    throw new errors.ERR_BUFFER_OUT_OF_BOUNDS()\n  }\n\n  throw new errors.ERR_OUT_OF_RANGE(type || 'offset',\n                                    `>= ${type ? 1 : 0} and <= ${length}`,\n                                    value)\n}\n\n// HELPER FUNCTIONS\n// ================\n\nconst INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node takes equal signs as end of the Base64 encoding\n  str = str.split('=')[0]\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = str.trim().replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  let codePoint\n  const length = string.length\n  let leadSurrogate = null\n  const bytes = []\n\n  for (let i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  const byteArray = []\n  for (let i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  let c, hi, lo\n  const byteArray = []\n  for (let i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  let i\n  for (i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\n// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass\n// the `instanceof` check but they should be treated as of that type.\n// See: https://github.com/feross/buffer/issues/166\nfunction isInstance (obj, type) {\n  return obj instanceof type ||\n    (obj != null && obj.constructor != null && obj.constructor.name != null &&\n      obj.constructor.name === type.name)\n}\nfunction numberIsNaN (obj) {\n  // For IE11 support\n  return obj !== obj // eslint-disable-line no-self-compare\n}\n\n// Create lookup table for `toString('hex')`\n// See: https://github.com/feross/buffer/issues/219\nconst hexSliceLookupTable = (function () {\n  const alphabet = '0123456789abcdef'\n  const table = new Array(256)\n  for (let i = 0; i < 16; ++i) {\n    const i16 = i * 16\n    for (let j = 0; j < 16; ++j) {\n      table[i16 + j] = alphabet[i] + alphabet[j]\n    }\n  }\n  return table\n})()\n\n// Return not function with Error if BigInt not supported\nfunction defineBigIntMethod (fn) {\n  return typeof BigInt === 'undefined' ? BufferBigIntNotDefined : fn\n}\n\nfunction BufferBigIntNotDefined () {\n  throw new Error('BigInt not supported')\n}\n\n\n//# sourceURL=webpack://rmh_touch/./node_modules/buffer/index.js?");

/***/ }),

/***/ "./node_modules/cwise-compiler/compiler.js":
/*!*************************************************!*\
  !*** ./node_modules/cwise-compiler/compiler.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar createThunk = __webpack_require__(/*! ./lib/thunk.js */ \"./node_modules/cwise-compiler/lib/thunk.js\")\n\nfunction Procedure() {\n  this.argTypes = []\n  this.shimArgs = []\n  this.arrayArgs = []\n  this.arrayBlockIndices = []\n  this.scalarArgs = []\n  this.offsetArgs = []\n  this.offsetArgIndex = []\n  this.indexArgs = []\n  this.shapeArgs = []\n  this.funcName = \"\"\n  this.pre = null\n  this.body = null\n  this.post = null\n  this.debug = false\n}\n\nfunction compileCwise(user_args) {\n  //Create procedure\n  var proc = new Procedure()\n  \n  //Parse blocks\n  proc.pre    = user_args.pre\n  proc.body   = user_args.body\n  proc.post   = user_args.post\n\n  //Parse arguments\n  var proc_args = user_args.args.slice(0)\n  proc.argTypes = proc_args\n  for(var i=0; i<proc_args.length; ++i) {\n    var arg_type = proc_args[i]\n    if(arg_type === \"array\" || (typeof arg_type === \"object\" && arg_type.blockIndices)) {\n      proc.argTypes[i] = \"array\"\n      proc.arrayArgs.push(i)\n      proc.arrayBlockIndices.push(arg_type.blockIndices ? arg_type.blockIndices : 0)\n      proc.shimArgs.push(\"array\" + i)\n      if(i < proc.pre.args.length && proc.pre.args[i].count>0) {\n        throw new Error(\"cwise: pre() block may not reference array args\")\n      }\n      if(i < proc.post.args.length && proc.post.args[i].count>0) {\n        throw new Error(\"cwise: post() block may not reference array args\")\n      }\n    } else if(arg_type === \"scalar\") {\n      proc.scalarArgs.push(i)\n      proc.shimArgs.push(\"scalar\" + i)\n    } else if(arg_type === \"index\") {\n      proc.indexArgs.push(i)\n      if(i < proc.pre.args.length && proc.pre.args[i].count > 0) {\n        throw new Error(\"cwise: pre() block may not reference array index\")\n      }\n      if(i < proc.body.args.length && proc.body.args[i].lvalue) {\n        throw new Error(\"cwise: body() block may not write to array index\")\n      }\n      if(i < proc.post.args.length && proc.post.args[i].count > 0) {\n        throw new Error(\"cwise: post() block may not reference array index\")\n      }\n    } else if(arg_type === \"shape\") {\n      proc.shapeArgs.push(i)\n      if(i < proc.pre.args.length && proc.pre.args[i].lvalue) {\n        throw new Error(\"cwise: pre() block may not write to array shape\")\n      }\n      if(i < proc.body.args.length && proc.body.args[i].lvalue) {\n        throw new Error(\"cwise: body() block may not write to array shape\")\n      }\n      if(i < proc.post.args.length && proc.post.args[i].lvalue) {\n        throw new Error(\"cwise: post() block may not write to array shape\")\n      }\n    } else if(typeof arg_type === \"object\" && arg_type.offset) {\n      proc.argTypes[i] = \"offset\"\n      proc.offsetArgs.push({ array: arg_type.array, offset:arg_type.offset })\n      proc.offsetArgIndex.push(i)\n    } else {\n      throw new Error(\"cwise: Unknown argument type \" + proc_args[i])\n    }\n  }\n  \n  //Make sure at least one array argument was specified\n  if(proc.arrayArgs.length <= 0) {\n    throw new Error(\"cwise: No array arguments specified\")\n  }\n  \n  //Make sure arguments are correct\n  if(proc.pre.args.length > proc_args.length) {\n    throw new Error(\"cwise: Too many arguments in pre() block\")\n  }\n  if(proc.body.args.length > proc_args.length) {\n    throw new Error(\"cwise: Too many arguments in body() block\")\n  }\n  if(proc.post.args.length > proc_args.length) {\n    throw new Error(\"cwise: Too many arguments in post() block\")\n  }\n\n  //Check debug flag\n  proc.debug = !!user_args.printCode || !!user_args.debug\n  \n  //Retrieve name\n  proc.funcName = user_args.funcName || \"cwise\"\n  \n  //Read in block size\n  proc.blockSize = user_args.blockSize || 64\n\n  return createThunk(proc)\n}\n\nmodule.exports = compileCwise\n\n\n//# sourceURL=webpack://rmh_touch/./node_modules/cwise-compiler/compiler.js?");

/***/ }),

/***/ "./node_modules/cwise-compiler/lib/compile.js":
/*!****************************************************!*\
  !*** ./node_modules/cwise-compiler/lib/compile.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar uniq = __webpack_require__(/*! uniq */ \"./node_modules/uniq/uniq.js\")\n\n// This function generates very simple loops analogous to how you typically traverse arrays (the outermost loop corresponds to the slowest changing index, the innermost loop to the fastest changing index)\n// TODO: If two arrays have the same strides (and offsets) there is potential for decreasing the number of \"pointers\" and related variables. The drawback is that the type signature would become more specific and that there would thus be less potential for caching, but it might still be worth it, especially when dealing with large numbers of arguments.\nfunction innerFill(order, proc, body) {\n  var dimension = order.length\n    , nargs = proc.arrayArgs.length\n    , has_index = proc.indexArgs.length>0\n    , code = []\n    , vars = []\n    , idx=0, pidx=0, i, j\n  for(i=0; i<dimension; ++i) { // Iteration variables\n    vars.push([\"i\",i,\"=0\"].join(\"\"))\n  }\n  //Compute scan deltas\n  for(j=0; j<nargs; ++j) {\n    for(i=0; i<dimension; ++i) {\n      pidx = idx\n      idx = order[i]\n      if(i === 0) { // The innermost/fastest dimension's delta is simply its stride\n        vars.push([\"d\",j,\"s\",i,\"=t\",j,\"p\",idx].join(\"\"))\n      } else { // For other dimensions the delta is basically the stride minus something which essentially \"rewinds\" the previous (more inner) dimension\n        vars.push([\"d\",j,\"s\",i,\"=(t\",j,\"p\",idx,\"-s\",pidx,\"*t\",j,\"p\",pidx,\")\"].join(\"\"))\n      }\n    }\n  }\n  if (vars.length > 0) {\n    code.push(\"var \" + vars.join(\",\"))\n  }  \n  //Scan loop\n  for(i=dimension-1; i>=0; --i) { // Start at largest stride and work your way inwards\n    idx = order[i]\n    code.push([\"for(i\",i,\"=0;i\",i,\"<s\",idx,\";++i\",i,\"){\"].join(\"\"))\n  }\n  //Push body of inner loop\n  code.push(body)\n  //Advance scan pointers\n  for(i=0; i<dimension; ++i) {\n    pidx = idx\n    idx = order[i]\n    for(j=0; j<nargs; ++j) {\n      code.push([\"p\",j,\"+=d\",j,\"s\",i].join(\"\"))\n    }\n    if(has_index) {\n      if(i > 0) {\n        code.push([\"index[\",pidx,\"]-=s\",pidx].join(\"\"))\n      }\n      code.push([\"++index[\",idx,\"]\"].join(\"\"))\n    }\n    code.push(\"}\")\n  }\n  return code.join(\"\\n\")\n}\n\n// Generate \"outer\" loops that loop over blocks of data, applying \"inner\" loops to the blocks by manipulating the local variables in such a way that the inner loop only \"sees\" the current block.\n// TODO: If this is used, then the previous declaration (done by generateCwiseOp) of s* is essentially unnecessary.\n//       I believe the s* are not used elsewhere (in particular, I don't think they're used in the pre/post parts and \"shape\" is defined independently), so it would be possible to make defining the s* dependent on what loop method is being used.\nfunction outerFill(matched, order, proc, body) {\n  var dimension = order.length\n    , nargs = proc.arrayArgs.length\n    , blockSize = proc.blockSize\n    , has_index = proc.indexArgs.length > 0\n    , code = []\n  for(var i=0; i<nargs; ++i) {\n    code.push([\"var offset\",i,\"=p\",i].join(\"\"))\n  }\n  //Generate loops for unmatched dimensions\n  // The order in which these dimensions are traversed is fairly arbitrary (from small stride to large stride, for the first argument)\n  // TODO: It would be nice if the order in which these loops are placed would also be somehow \"optimal\" (at the very least we should check that it really doesn't hurt us if they're not).\n  for(var i=matched; i<dimension; ++i) {\n    code.push([\"for(var j\"+i+\"=SS[\", order[i], \"]|0;j\", i, \">0;){\"].join(\"\")) // Iterate back to front\n    code.push([\"if(j\",i,\"<\",blockSize,\"){\"].join(\"\")) // Either decrease j by blockSize (s = blockSize), or set it to zero (after setting s = j).\n    code.push([\"s\",order[i],\"=j\",i].join(\"\"))\n    code.push([\"j\",i,\"=0\"].join(\"\"))\n    code.push([\"}else{s\",order[i],\"=\",blockSize].join(\"\"))\n    code.push([\"j\",i,\"-=\",blockSize,\"}\"].join(\"\"))\n    if(has_index) {\n      code.push([\"index[\",order[i],\"]=j\",i].join(\"\"))\n    }\n  }\n  for(var i=0; i<nargs; ++i) {\n    var indexStr = [\"offset\"+i]\n    for(var j=matched; j<dimension; ++j) {\n      indexStr.push([\"j\",j,\"*t\",i,\"p\",order[j]].join(\"\"))\n    }\n    code.push([\"p\",i,\"=(\",indexStr.join(\"+\"),\")\"].join(\"\"))\n  }\n  code.push(innerFill(order, proc, body))\n  for(var i=matched; i<dimension; ++i) {\n    code.push(\"}\")\n  }\n  return code.join(\"\\n\")\n}\n\n//Count the number of compatible inner orders\n// This is the length of the longest common prefix of the arrays in orders.\n// Each array in orders lists the dimensions of the correspond ndarray in order of increasing stride.\n// This is thus the maximum number of dimensions that can be efficiently traversed by simple nested loops for all arrays.\nfunction countMatches(orders) {\n  var matched = 0, dimension = orders[0].length\n  while(matched < dimension) {\n    for(var j=1; j<orders.length; ++j) {\n      if(orders[j][matched] !== orders[0][matched]) {\n        return matched\n      }\n    }\n    ++matched\n  }\n  return matched\n}\n\n//Processes a block according to the given data types\n// Replaces variable names by different ones, either \"local\" ones (that are then ferried in and out of the given array) or ones matching the arguments that the function performing the ultimate loop will accept.\nfunction processBlock(block, proc, dtypes) {\n  var code = block.body\n  var pre = []\n  var post = []\n  for(var i=0; i<block.args.length; ++i) {\n    var carg = block.args[i]\n    if(carg.count <= 0) {\n      continue\n    }\n    var re = new RegExp(carg.name, \"g\")\n    var ptrStr = \"\"\n    var arrNum = proc.arrayArgs.indexOf(i)\n    switch(proc.argTypes[i]) {\n      case \"offset\":\n        var offArgIndex = proc.offsetArgIndex.indexOf(i)\n        var offArg = proc.offsetArgs[offArgIndex]\n        arrNum = offArg.array\n        ptrStr = \"+q\" + offArgIndex // Adds offset to the \"pointer\" in the array\n      case \"array\":\n        ptrStr = \"p\" + arrNum + ptrStr\n        var localStr = \"l\" + i\n        var arrStr = \"a\" + arrNum\n        if (proc.arrayBlockIndices[arrNum] === 0) { // Argument to body is just a single value from this array\n          if(carg.count === 1) { // Argument/array used only once(?)\n            if(dtypes[arrNum] === \"generic\") {\n              if(carg.lvalue) {\n                pre.push([\"var \", localStr, \"=\", arrStr, \".get(\", ptrStr, \")\"].join(\"\")) // Is this necessary if the argument is ONLY used as an lvalue? (keep in mind that we can have a += something, so we would actually need to check carg.rvalue)\n                code = code.replace(re, localStr)\n                post.push([arrStr, \".set(\", ptrStr, \",\", localStr,\")\"].join(\"\"))\n              } else {\n                code = code.replace(re, [arrStr, \".get(\", ptrStr, \")\"].join(\"\"))\n              }\n            } else {\n              code = code.replace(re, [arrStr, \"[\", ptrStr, \"]\"].join(\"\"))\n            }\n          } else if(dtypes[arrNum] === \"generic\") {\n            pre.push([\"var \", localStr, \"=\", arrStr, \".get(\", ptrStr, \")\"].join(\"\")) // TODO: Could we optimize by checking for carg.rvalue?\n            code = code.replace(re, localStr)\n            if(carg.lvalue) {\n              post.push([arrStr, \".set(\", ptrStr, \",\", localStr,\")\"].join(\"\"))\n            }\n          } else {\n            pre.push([\"var \", localStr, \"=\", arrStr, \"[\", ptrStr, \"]\"].join(\"\")) // TODO: Could we optimize by checking for carg.rvalue?\n            code = code.replace(re, localStr)\n            if(carg.lvalue) {\n              post.push([arrStr, \"[\", ptrStr, \"]=\", localStr].join(\"\"))\n            }\n          }\n        } else { // Argument to body is a \"block\"\n          var reStrArr = [carg.name], ptrStrArr = [ptrStr]\n          for(var j=0; j<Math.abs(proc.arrayBlockIndices[arrNum]); j++) {\n            reStrArr.push(\"\\\\s*\\\\[([^\\\\]]+)\\\\]\")\n            ptrStrArr.push(\"$\" + (j+1) + \"*t\" + arrNum + \"b\" + j) // Matched index times stride\n          }\n          re = new RegExp(reStrArr.join(\"\"), \"g\")\n          ptrStr = ptrStrArr.join(\"+\")\n          if(dtypes[arrNum] === \"generic\") {\n            /*if(carg.lvalue) {\n              pre.push([\"var \", localStr, \"=\", arrStr, \".get(\", ptrStr, \")\"].join(\"\")) // Is this necessary if the argument is ONLY used as an lvalue? (keep in mind that we can have a += something, so we would actually need to check carg.rvalue)\n              code = code.replace(re, localStr)\n              post.push([arrStr, \".set(\", ptrStr, \",\", localStr,\")\"].join(\"\"))\n            } else {\n              code = code.replace(re, [arrStr, \".get(\", ptrStr, \")\"].join(\"\"))\n            }*/\n            throw new Error(\"cwise: Generic arrays not supported in combination with blocks!\")\n          } else {\n            // This does not produce any local variables, even if variables are used multiple times. It would be possible to do so, but it would complicate things quite a bit.\n            code = code.replace(re, [arrStr, \"[\", ptrStr, \"]\"].join(\"\"))\n          }\n        }\n      break\n      case \"scalar\":\n        code = code.replace(re, \"Y\" + proc.scalarArgs.indexOf(i))\n      break\n      case \"index\":\n        code = code.replace(re, \"index\")\n      break\n      case \"shape\":\n        code = code.replace(re, \"shape\")\n      break\n    }\n  }\n  return [pre.join(\"\\n\"), code, post.join(\"\\n\")].join(\"\\n\").trim()\n}\n\nfunction typeSummary(dtypes) {\n  var summary = new Array(dtypes.length)\n  var allEqual = true\n  for(var i=0; i<dtypes.length; ++i) {\n    var t = dtypes[i]\n    var digits = t.match(/\\d+/)\n    if(!digits) {\n      digits = \"\"\n    } else {\n      digits = digits[0]\n    }\n    if(t.charAt(0) === 0) {\n      summary[i] = \"u\" + t.charAt(1) + digits\n    } else {\n      summary[i] = t.charAt(0) + digits\n    }\n    if(i > 0) {\n      allEqual = allEqual && summary[i] === summary[i-1]\n    }\n  }\n  if(allEqual) {\n    return summary[0]\n  }\n  return summary.join(\"\")\n}\n\n//Generates a cwise operator\nfunction generateCWiseOp(proc, typesig) {\n\n  //Compute dimension\n  // Arrays get put first in typesig, and there are two entries per array (dtype and order), so this gets the number of dimensions in the first array arg.\n  var dimension = (typesig[1].length - Math.abs(proc.arrayBlockIndices[0]))|0\n  var orders = new Array(proc.arrayArgs.length)\n  var dtypes = new Array(proc.arrayArgs.length)\n  for(var i=0; i<proc.arrayArgs.length; ++i) {\n    dtypes[i] = typesig[2*i]\n    orders[i] = typesig[2*i+1]\n  }\n  \n  //Determine where block and loop indices start and end\n  var blockBegin = [], blockEnd = [] // These indices are exposed as blocks\n  var loopBegin = [], loopEnd = [] // These indices are iterated over\n  var loopOrders = [] // orders restricted to the loop indices\n  for(var i=0; i<proc.arrayArgs.length; ++i) {\n    if (proc.arrayBlockIndices[i]<0) {\n      loopBegin.push(0)\n      loopEnd.push(dimension)\n      blockBegin.push(dimension)\n      blockEnd.push(dimension+proc.arrayBlockIndices[i])\n    } else {\n      loopBegin.push(proc.arrayBlockIndices[i]) // Non-negative\n      loopEnd.push(proc.arrayBlockIndices[i]+dimension)\n      blockBegin.push(0)\n      blockEnd.push(proc.arrayBlockIndices[i])\n    }\n    var newOrder = []\n    for(var j=0; j<orders[i].length; j++) {\n      if (loopBegin[i]<=orders[i][j] && orders[i][j]<loopEnd[i]) {\n        newOrder.push(orders[i][j]-loopBegin[i]) // If this is a loop index, put it in newOrder, subtracting loopBegin, to make sure that all loopOrders are using a common set of indices.\n      }\n    }\n    loopOrders.push(newOrder)\n  }\n\n  //First create arguments for procedure\n  var arglist = [\"SS\"] // SS is the overall shape over which we iterate\n  var code = [\"'use strict'\"]\n  var vars = []\n  \n  for(var j=0; j<dimension; ++j) {\n    vars.push([\"s\", j, \"=SS[\", j, \"]\"].join(\"\")) // The limits for each dimension.\n  }\n  for(var i=0; i<proc.arrayArgs.length; ++i) {\n    arglist.push(\"a\"+i) // Actual data array\n    arglist.push(\"t\"+i) // Strides\n    arglist.push(\"p\"+i) // Offset in the array at which the data starts (also used for iterating over the data)\n    \n    for(var j=0; j<dimension; ++j) { // Unpack the strides into vars for looping\n      vars.push([\"t\",i,\"p\",j,\"=t\",i,\"[\",loopBegin[i]+j,\"]\"].join(\"\"))\n    }\n    \n    for(var j=0; j<Math.abs(proc.arrayBlockIndices[i]); ++j) { // Unpack the strides into vars for block iteration\n      vars.push([\"t\",i,\"b\",j,\"=t\",i,\"[\",blockBegin[i]+j,\"]\"].join(\"\"))\n    }\n  }\n  for(var i=0; i<proc.scalarArgs.length; ++i) {\n    arglist.push(\"Y\" + i)\n  }\n  if(proc.shapeArgs.length > 0) {\n    vars.push(\"shape=SS.slice(0)\") // Makes the shape over which we iterate available to the user defined functions (so you can use width/height for example)\n  }\n  if(proc.indexArgs.length > 0) {\n    // Prepare an array to keep track of the (logical) indices, initialized to dimension zeroes.\n    var zeros = new Array(dimension)\n    for(var i=0; i<dimension; ++i) {\n      zeros[i] = \"0\"\n    }\n    vars.push([\"index=[\", zeros.join(\",\"), \"]\"].join(\"\"))\n  }\n  for(var i=0; i<proc.offsetArgs.length; ++i) { // Offset arguments used for stencil operations\n    var off_arg = proc.offsetArgs[i]\n    var init_string = []\n    for(var j=0; j<off_arg.offset.length; ++j) {\n      if(off_arg.offset[j] === 0) {\n        continue\n      } else if(off_arg.offset[j] === 1) {\n        init_string.push([\"t\", off_arg.array, \"p\", j].join(\"\"))      \n      } else {\n        init_string.push([off_arg.offset[j], \"*t\", off_arg.array, \"p\", j].join(\"\"))\n      }\n    }\n    if(init_string.length === 0) {\n      vars.push(\"q\" + i + \"=0\")\n    } else {\n      vars.push([\"q\", i, \"=\", init_string.join(\"+\")].join(\"\"))\n    }\n  }\n\n  //Prepare this variables\n  var thisVars = uniq([].concat(proc.pre.thisVars)\n                      .concat(proc.body.thisVars)\n                      .concat(proc.post.thisVars))\n  vars = vars.concat(thisVars)\n  if (vars.length > 0) {\n    code.push(\"var \" + vars.join(\",\"))\n  }\n  for(var i=0; i<proc.arrayArgs.length; ++i) {\n    code.push(\"p\"+i+\"|=0\")\n  }\n  \n  //Inline prelude\n  if(proc.pre.body.length > 3) {\n    code.push(processBlock(proc.pre, proc, dtypes))\n  }\n\n  //Process body\n  var body = processBlock(proc.body, proc, dtypes)\n  var matched = countMatches(loopOrders)\n  if(matched < dimension) {\n    code.push(outerFill(matched, loopOrders[0], proc, body)) // TODO: Rather than passing loopOrders[0], it might be interesting to look at passing an order that represents the majority of the arguments for example.\n  } else {\n    code.push(innerFill(loopOrders[0], proc, body))\n  }\n\n  //Inline epilog\n  if(proc.post.body.length > 3) {\n    code.push(processBlock(proc.post, proc, dtypes))\n  }\n  \n  if(proc.debug) {\n    console.log(\"-----Generated cwise routine for \", typesig, \":\\n\" + code.join(\"\\n\") + \"\\n----------\")\n  }\n  \n  var loopName = [(proc.funcName||\"unnamed\"), \"_cwise_loop_\", orders[0].join(\"s\"),\"m\",matched,typeSummary(dtypes)].join(\"\")\n  var f = new Function([\"function \",loopName,\"(\", arglist.join(\",\"),\"){\", code.join(\"\\n\"),\"} return \", loopName].join(\"\"))\n  return f()\n}\nmodule.exports = generateCWiseOp\n\n\n//# sourceURL=webpack://rmh_touch/./node_modules/cwise-compiler/lib/compile.js?");

/***/ }),

/***/ "./node_modules/cwise-compiler/lib/thunk.js":
/*!**************************************************!*\
  !*** ./node_modules/cwise-compiler/lib/thunk.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\n// The function below is called when constructing a cwise function object, and does the following:\n// A function object is constructed which accepts as argument a compilation function and returns another function.\n// It is this other function that is eventually returned by createThunk, and this function is the one that actually\n// checks whether a certain pattern of arguments has already been used before and compiles new loops as needed.\n// The compilation passed to the first function object is used for compiling new functions.\n// Once this function object is created, it is called with compile as argument, where the first argument of compile\n// is bound to \"proc\" (essentially containing a preprocessed version of the user arguments to cwise).\n// So createThunk roughly works like this:\n// function createThunk(proc) {\n//   var thunk = function(compileBound) {\n//     var CACHED = {}\n//     return function(arrays and scalars) {\n//       if (dtype and order of arrays in CACHED) {\n//         var func = CACHED[dtype and order of arrays]\n//       } else {\n//         var func = CACHED[dtype and order of arrays] = compileBound(dtype and order of arrays)\n//       }\n//       return func(arrays and scalars)\n//     }\n//   }\n//   return thunk(compile.bind1(proc))\n// }\n\nvar compile = __webpack_require__(/*! ./compile.js */ \"./node_modules/cwise-compiler/lib/compile.js\")\n\nfunction createThunk(proc) {\n  var code = [\"'use strict'\", \"var CACHED={}\"]\n  var vars = []\n  var thunkName = proc.funcName + \"_cwise_thunk\"\n  \n  //Build thunk\n  code.push([\"return function \", thunkName, \"(\", proc.shimArgs.join(\",\"), \"){\"].join(\"\"))\n  var typesig = []\n  var string_typesig = []\n  var proc_args = [[\"array\",proc.arrayArgs[0],\".shape.slice(\", // Slice shape so that we only retain the shape over which we iterate (which gets passed to the cwise operator as SS).\n                    Math.max(0,proc.arrayBlockIndices[0]),proc.arrayBlockIndices[0]<0?(\",\"+proc.arrayBlockIndices[0]+\")\"):\")\"].join(\"\")]\n  var shapeLengthConditions = [], shapeConditions = []\n  // Process array arguments\n  for(var i=0; i<proc.arrayArgs.length; ++i) {\n    var j = proc.arrayArgs[i]\n    vars.push([\"t\", j, \"=array\", j, \".dtype,\",\n               \"r\", j, \"=array\", j, \".order\"].join(\"\"))\n    typesig.push(\"t\" + j)\n    typesig.push(\"r\" + j)\n    string_typesig.push(\"t\"+j)\n    string_typesig.push(\"r\"+j+\".join()\")\n    proc_args.push(\"array\" + j + \".data\")\n    proc_args.push(\"array\" + j + \".stride\")\n    proc_args.push(\"array\" + j + \".offset|0\")\n    if (i>0) { // Gather conditions to check for shape equality (ignoring block indices)\n      shapeLengthConditions.push(\"array\" + proc.arrayArgs[0] + \".shape.length===array\" + j + \".shape.length+\" + (Math.abs(proc.arrayBlockIndices[0])-Math.abs(proc.arrayBlockIndices[i])))\n      shapeConditions.push(\"array\" + proc.arrayArgs[0] + \".shape[shapeIndex+\" + Math.max(0,proc.arrayBlockIndices[0]) + \"]===array\" + j + \".shape[shapeIndex+\" + Math.max(0,proc.arrayBlockIndices[i]) + \"]\")\n    }\n  }\n  // Check for shape equality\n  if (proc.arrayArgs.length > 1) {\n    code.push(\"if (!(\" + shapeLengthConditions.join(\" && \") + \")) throw new Error('cwise: Arrays do not all have the same dimensionality!')\")\n    code.push(\"for(var shapeIndex=array\" + proc.arrayArgs[0] + \".shape.length-\" + Math.abs(proc.arrayBlockIndices[0]) + \"; shapeIndex-->0;) {\")\n    code.push(\"if (!(\" + shapeConditions.join(\" && \") + \")) throw new Error('cwise: Arrays do not all have the same shape!')\")\n    code.push(\"}\")\n  }\n  // Process scalar arguments\n  for(var i=0; i<proc.scalarArgs.length; ++i) {\n    proc_args.push(\"scalar\" + proc.scalarArgs[i])\n  }\n  // Check for cached function (and if not present, generate it)\n  vars.push([\"type=[\", string_typesig.join(\",\"), \"].join()\"].join(\"\"))\n  vars.push(\"proc=CACHED[type]\")\n  code.push(\"var \" + vars.join(\",\"))\n  \n  code.push([\"if(!proc){\",\n             \"CACHED[type]=proc=compile([\", typesig.join(\",\"), \"])}\",\n             \"return proc(\", proc_args.join(\",\"), \")}\"].join(\"\"))\n\n  if(proc.debug) {\n    console.log(\"-----Generated thunk:\\n\" + code.join(\"\\n\") + \"\\n----------\")\n  }\n  \n  //Compile thunk\n  var thunk = new Function(\"compile\", code.join(\"\\n\"))\n  return thunk(compile.bind(undefined, proc))\n}\n\nmodule.exports = createThunk\n\n\n//# sourceURL=webpack://rmh_touch/./node_modules/cwise-compiler/lib/thunk.js?");

/***/ }),

/***/ "./node_modules/dup/dup.js":
/*!*********************************!*\
  !*** ./node_modules/dup/dup.js ***!
  \*********************************/
/***/ ((module) => {

"use strict";
eval("\n\nfunction dupe_array(count, value, i) {\n  var c = count[i]|0\n  if(c <= 0) {\n    return []\n  }\n  var result = new Array(c), j\n  if(i === count.length-1) {\n    for(j=0; j<c; ++j) {\n      result[j] = value\n    }\n  } else {\n    for(j=0; j<c; ++j) {\n      result[j] = dupe_array(count, value, i+1)\n    }\n  }\n  return result\n}\n\nfunction dupe_number(count, value) {\n  var result, i\n  result = new Array(count)\n  for(i=0; i<count; ++i) {\n    result[i] = value\n  }\n  return result\n}\n\nfunction dupe(count, value) {\n  if(typeof value === \"undefined\") {\n    value = 0\n  }\n  switch(typeof count) {\n    case \"number\":\n      if(count > 0) {\n        return dupe_number(count|0, value)\n      }\n    break\n    case \"object\":\n      if(typeof (count.length) === \"number\") {\n        return dupe_array(count, value, 0)\n      }\n    break\n  }\n  return []\n}\n\nmodule.exports = dupe\n\n//# sourceURL=webpack://rmh_touch/./node_modules/dup/dup.js?");

/***/ }),

/***/ "./node_modules/gl-constants/1.0/numbers.js":
/*!**************************************************!*\
  !*** ./node_modules/gl-constants/1.0/numbers.js ***!
  \**************************************************/
/***/ ((module) => {

eval("module.exports = {\n  0: 'NONE',\n  1: 'ONE',\n  2: 'LINE_LOOP',\n  3: 'LINE_STRIP',\n  4: 'TRIANGLES',\n  5: 'TRIANGLE_STRIP',\n  6: 'TRIANGLE_FAN',\n  256: 'DEPTH_BUFFER_BIT',\n  512: 'NEVER',\n  513: 'LESS',\n  514: 'EQUAL',\n  515: 'LEQUAL',\n  516: 'GREATER',\n  517: 'NOTEQUAL',\n  518: 'GEQUAL',\n  519: 'ALWAYS',\n  768: 'SRC_COLOR',\n  769: 'ONE_MINUS_SRC_COLOR',\n  770: 'SRC_ALPHA',\n  771: 'ONE_MINUS_SRC_ALPHA',\n  772: 'DST_ALPHA',\n  773: 'ONE_MINUS_DST_ALPHA',\n  774: 'DST_COLOR',\n  775: 'ONE_MINUS_DST_COLOR',\n  776: 'SRC_ALPHA_SATURATE',\n  1024: 'STENCIL_BUFFER_BIT',\n  1028: 'FRONT',\n  1029: 'BACK',\n  1032: 'FRONT_AND_BACK',\n  1280: 'INVALID_ENUM',\n  1281: 'INVALID_VALUE',\n  1282: 'INVALID_OPERATION',\n  1285: 'OUT_OF_MEMORY',\n  1286: 'INVALID_FRAMEBUFFER_OPERATION',\n  2304: 'CW',\n  2305: 'CCW',\n  2849: 'LINE_WIDTH',\n  2884: 'CULL_FACE',\n  2885: 'CULL_FACE_MODE',\n  2886: 'FRONT_FACE',\n  2928: 'DEPTH_RANGE',\n  2929: 'DEPTH_TEST',\n  2930: 'DEPTH_WRITEMASK',\n  2931: 'DEPTH_CLEAR_VALUE',\n  2932: 'DEPTH_FUNC',\n  2960: 'STENCIL_TEST',\n  2961: 'STENCIL_CLEAR_VALUE',\n  2962: 'STENCIL_FUNC',\n  2963: 'STENCIL_VALUE_MASK',\n  2964: 'STENCIL_FAIL',\n  2965: 'STENCIL_PASS_DEPTH_FAIL',\n  2966: 'STENCIL_PASS_DEPTH_PASS',\n  2967: 'STENCIL_REF',\n  2968: 'STENCIL_WRITEMASK',\n  2978: 'VIEWPORT',\n  3024: 'DITHER',\n  3042: 'BLEND',\n  3088: 'SCISSOR_BOX',\n  3089: 'SCISSOR_TEST',\n  3106: 'COLOR_CLEAR_VALUE',\n  3107: 'COLOR_WRITEMASK',\n  3317: 'UNPACK_ALIGNMENT',\n  3333: 'PACK_ALIGNMENT',\n  3379: 'MAX_TEXTURE_SIZE',\n  3386: 'MAX_VIEWPORT_DIMS',\n  3408: 'SUBPIXEL_BITS',\n  3410: 'RED_BITS',\n  3411: 'GREEN_BITS',\n  3412: 'BLUE_BITS',\n  3413: 'ALPHA_BITS',\n  3414: 'DEPTH_BITS',\n  3415: 'STENCIL_BITS',\n  3553: 'TEXTURE_2D',\n  4352: 'DONT_CARE',\n  4353: 'FASTEST',\n  4354: 'NICEST',\n  5120: 'BYTE',\n  5121: 'UNSIGNED_BYTE',\n  5122: 'SHORT',\n  5123: 'UNSIGNED_SHORT',\n  5124: 'INT',\n  5125: 'UNSIGNED_INT',\n  5126: 'FLOAT',\n  5386: 'INVERT',\n  5890: 'TEXTURE',\n  6401: 'STENCIL_INDEX',\n  6402: 'DEPTH_COMPONENT',\n  6406: 'ALPHA',\n  6407: 'RGB',\n  6408: 'RGBA',\n  6409: 'LUMINANCE',\n  6410: 'LUMINANCE_ALPHA',\n  7680: 'KEEP',\n  7681: 'REPLACE',\n  7682: 'INCR',\n  7683: 'DECR',\n  7936: 'VENDOR',\n  7937: 'RENDERER',\n  7938: 'VERSION',\n  9728: 'NEAREST',\n  9729: 'LINEAR',\n  9984: 'NEAREST_MIPMAP_NEAREST',\n  9985: 'LINEAR_MIPMAP_NEAREST',\n  9986: 'NEAREST_MIPMAP_LINEAR',\n  9987: 'LINEAR_MIPMAP_LINEAR',\n  10240: 'TEXTURE_MAG_FILTER',\n  10241: 'TEXTURE_MIN_FILTER',\n  10242: 'TEXTURE_WRAP_S',\n  10243: 'TEXTURE_WRAP_T',\n  10497: 'REPEAT',\n  10752: 'POLYGON_OFFSET_UNITS',\n  16384: 'COLOR_BUFFER_BIT',\n  32769: 'CONSTANT_COLOR',\n  32770: 'ONE_MINUS_CONSTANT_COLOR',\n  32771: 'CONSTANT_ALPHA',\n  32772: 'ONE_MINUS_CONSTANT_ALPHA',\n  32773: 'BLEND_COLOR',\n  32774: 'FUNC_ADD',\n  32777: 'BLEND_EQUATION_RGB',\n  32778: 'FUNC_SUBTRACT',\n  32779: 'FUNC_REVERSE_SUBTRACT',\n  32819: 'UNSIGNED_SHORT_4_4_4_4',\n  32820: 'UNSIGNED_SHORT_5_5_5_1',\n  32823: 'POLYGON_OFFSET_FILL',\n  32824: 'POLYGON_OFFSET_FACTOR',\n  32854: 'RGBA4',\n  32855: 'RGB5_A1',\n  32873: 'TEXTURE_BINDING_2D',\n  32926: 'SAMPLE_ALPHA_TO_COVERAGE',\n  32928: 'SAMPLE_COVERAGE',\n  32936: 'SAMPLE_BUFFERS',\n  32937: 'SAMPLES',\n  32938: 'SAMPLE_COVERAGE_VALUE',\n  32939: 'SAMPLE_COVERAGE_INVERT',\n  32968: 'BLEND_DST_RGB',\n  32969: 'BLEND_SRC_RGB',\n  32970: 'BLEND_DST_ALPHA',\n  32971: 'BLEND_SRC_ALPHA',\n  33071: 'CLAMP_TO_EDGE',\n  33170: 'GENERATE_MIPMAP_HINT',\n  33189: 'DEPTH_COMPONENT16',\n  33306: 'DEPTH_STENCIL_ATTACHMENT',\n  33635: 'UNSIGNED_SHORT_5_6_5',\n  33648: 'MIRRORED_REPEAT',\n  33901: 'ALIASED_POINT_SIZE_RANGE',\n  33902: 'ALIASED_LINE_WIDTH_RANGE',\n  33984: 'TEXTURE0',\n  33985: 'TEXTURE1',\n  33986: 'TEXTURE2',\n  33987: 'TEXTURE3',\n  33988: 'TEXTURE4',\n  33989: 'TEXTURE5',\n  33990: 'TEXTURE6',\n  33991: 'TEXTURE7',\n  33992: 'TEXTURE8',\n  33993: 'TEXTURE9',\n  33994: 'TEXTURE10',\n  33995: 'TEXTURE11',\n  33996: 'TEXTURE12',\n  33997: 'TEXTURE13',\n  33998: 'TEXTURE14',\n  33999: 'TEXTURE15',\n  34000: 'TEXTURE16',\n  34001: 'TEXTURE17',\n  34002: 'TEXTURE18',\n  34003: 'TEXTURE19',\n  34004: 'TEXTURE20',\n  34005: 'TEXTURE21',\n  34006: 'TEXTURE22',\n  34007: 'TEXTURE23',\n  34008: 'TEXTURE24',\n  34009: 'TEXTURE25',\n  34010: 'TEXTURE26',\n  34011: 'TEXTURE27',\n  34012: 'TEXTURE28',\n  34013: 'TEXTURE29',\n  34014: 'TEXTURE30',\n  34015: 'TEXTURE31',\n  34016: 'ACTIVE_TEXTURE',\n  34024: 'MAX_RENDERBUFFER_SIZE',\n  34041: 'DEPTH_STENCIL',\n  34055: 'INCR_WRAP',\n  34056: 'DECR_WRAP',\n  34067: 'TEXTURE_CUBE_MAP',\n  34068: 'TEXTURE_BINDING_CUBE_MAP',\n  34069: 'TEXTURE_CUBE_MAP_POSITIVE_X',\n  34070: 'TEXTURE_CUBE_MAP_NEGATIVE_X',\n  34071: 'TEXTURE_CUBE_MAP_POSITIVE_Y',\n  34072: 'TEXTURE_CUBE_MAP_NEGATIVE_Y',\n  34073: 'TEXTURE_CUBE_MAP_POSITIVE_Z',\n  34074: 'TEXTURE_CUBE_MAP_NEGATIVE_Z',\n  34076: 'MAX_CUBE_MAP_TEXTURE_SIZE',\n  34338: 'VERTEX_ATTRIB_ARRAY_ENABLED',\n  34339: 'VERTEX_ATTRIB_ARRAY_SIZE',\n  34340: 'VERTEX_ATTRIB_ARRAY_STRIDE',\n  34341: 'VERTEX_ATTRIB_ARRAY_TYPE',\n  34342: 'CURRENT_VERTEX_ATTRIB',\n  34373: 'VERTEX_ATTRIB_ARRAY_POINTER',\n  34466: 'NUM_COMPRESSED_TEXTURE_FORMATS',\n  34467: 'COMPRESSED_TEXTURE_FORMATS',\n  34660: 'BUFFER_SIZE',\n  34661: 'BUFFER_USAGE',\n  34816: 'STENCIL_BACK_FUNC',\n  34817: 'STENCIL_BACK_FAIL',\n  34818: 'STENCIL_BACK_PASS_DEPTH_FAIL',\n  34819: 'STENCIL_BACK_PASS_DEPTH_PASS',\n  34877: 'BLEND_EQUATION_ALPHA',\n  34921: 'MAX_VERTEX_ATTRIBS',\n  34922: 'VERTEX_ATTRIB_ARRAY_NORMALIZED',\n  34930: 'MAX_TEXTURE_IMAGE_UNITS',\n  34962: 'ARRAY_BUFFER',\n  34963: 'ELEMENT_ARRAY_BUFFER',\n  34964: 'ARRAY_BUFFER_BINDING',\n  34965: 'ELEMENT_ARRAY_BUFFER_BINDING',\n  34975: 'VERTEX_ATTRIB_ARRAY_BUFFER_BINDING',\n  35040: 'STREAM_DRAW',\n  35044: 'STATIC_DRAW',\n  35048: 'DYNAMIC_DRAW',\n  35632: 'FRAGMENT_SHADER',\n  35633: 'VERTEX_SHADER',\n  35660: 'MAX_VERTEX_TEXTURE_IMAGE_UNITS',\n  35661: 'MAX_COMBINED_TEXTURE_IMAGE_UNITS',\n  35663: 'SHADER_TYPE',\n  35664: 'FLOAT_VEC2',\n  35665: 'FLOAT_VEC3',\n  35666: 'FLOAT_VEC4',\n  35667: 'INT_VEC2',\n  35668: 'INT_VEC3',\n  35669: 'INT_VEC4',\n  35670: 'BOOL',\n  35671: 'BOOL_VEC2',\n  35672: 'BOOL_VEC3',\n  35673: 'BOOL_VEC4',\n  35674: 'FLOAT_MAT2',\n  35675: 'FLOAT_MAT3',\n  35676: 'FLOAT_MAT4',\n  35678: 'SAMPLER_2D',\n  35680: 'SAMPLER_CUBE',\n  35712: 'DELETE_STATUS',\n  35713: 'COMPILE_STATUS',\n  35714: 'LINK_STATUS',\n  35715: 'VALIDATE_STATUS',\n  35716: 'INFO_LOG_LENGTH',\n  35717: 'ATTACHED_SHADERS',\n  35718: 'ACTIVE_UNIFORMS',\n  35719: 'ACTIVE_UNIFORM_MAX_LENGTH',\n  35720: 'SHADER_SOURCE_LENGTH',\n  35721: 'ACTIVE_ATTRIBUTES',\n  35722: 'ACTIVE_ATTRIBUTE_MAX_LENGTH',\n  35724: 'SHADING_LANGUAGE_VERSION',\n  35725: 'CURRENT_PROGRAM',\n  36003: 'STENCIL_BACK_REF',\n  36004: 'STENCIL_BACK_VALUE_MASK',\n  36005: 'STENCIL_BACK_WRITEMASK',\n  36006: 'FRAMEBUFFER_BINDING',\n  36007: 'RENDERBUFFER_BINDING',\n  36048: 'FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE',\n  36049: 'FRAMEBUFFER_ATTACHMENT_OBJECT_NAME',\n  36050: 'FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL',\n  36051: 'FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE',\n  36053: 'FRAMEBUFFER_COMPLETE',\n  36054: 'FRAMEBUFFER_INCOMPLETE_ATTACHMENT',\n  36055: 'FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT',\n  36057: 'FRAMEBUFFER_INCOMPLETE_DIMENSIONS',\n  36061: 'FRAMEBUFFER_UNSUPPORTED',\n  36064: 'COLOR_ATTACHMENT0',\n  36096: 'DEPTH_ATTACHMENT',\n  36128: 'STENCIL_ATTACHMENT',\n  36160: 'FRAMEBUFFER',\n  36161: 'RENDERBUFFER',\n  36162: 'RENDERBUFFER_WIDTH',\n  36163: 'RENDERBUFFER_HEIGHT',\n  36164: 'RENDERBUFFER_INTERNAL_FORMAT',\n  36168: 'STENCIL_INDEX8',\n  36176: 'RENDERBUFFER_RED_SIZE',\n  36177: 'RENDERBUFFER_GREEN_SIZE',\n  36178: 'RENDERBUFFER_BLUE_SIZE',\n  36179: 'RENDERBUFFER_ALPHA_SIZE',\n  36180: 'RENDERBUFFER_DEPTH_SIZE',\n  36181: 'RENDERBUFFER_STENCIL_SIZE',\n  36194: 'RGB565',\n  36336: 'LOW_FLOAT',\n  36337: 'MEDIUM_FLOAT',\n  36338: 'HIGH_FLOAT',\n  36339: 'LOW_INT',\n  36340: 'MEDIUM_INT',\n  36341: 'HIGH_INT',\n  36346: 'SHADER_COMPILER',\n  36347: 'MAX_VERTEX_UNIFORM_VECTORS',\n  36348: 'MAX_VARYING_VECTORS',\n  36349: 'MAX_FRAGMENT_UNIFORM_VECTORS',\n  37440: 'UNPACK_FLIP_Y_WEBGL',\n  37441: 'UNPACK_PREMULTIPLY_ALPHA_WEBGL',\n  37442: 'CONTEXT_LOST_WEBGL',\n  37443: 'UNPACK_COLORSPACE_CONVERSION_WEBGL',\n  37444: 'BROWSER_DEFAULT_WEBGL'\n}\n\n\n//# sourceURL=webpack://rmh_touch/./node_modules/gl-constants/1.0/numbers.js?");

/***/ }),

/***/ "./node_modules/gl-constants/lookup.js":
/*!*********************************************!*\
  !*** ./node_modules/gl-constants/lookup.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var gl10 = __webpack_require__(/*! ./1.0/numbers */ \"./node_modules/gl-constants/1.0/numbers.js\")\n\nmodule.exports = function lookupConstant (number) {\n  return gl10[number]\n}\n\n\n//# sourceURL=webpack://rmh_touch/./node_modules/gl-constants/lookup.js?");

/***/ }),

/***/ "./node_modules/gl-format-compiler-error/index.js":
/*!********************************************************!*\
  !*** ./node_modules/gl-format-compiler-error/index.js ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar sprintf = __webpack_require__(/*! sprintf-js */ \"./node_modules/sprintf-js/src/sprintf.js\").sprintf;\nvar glConstants = __webpack_require__(/*! gl-constants/lookup */ \"./node_modules/gl-constants/lookup.js\");\nvar shaderName = __webpack_require__(/*! glsl-shader-name */ \"./node_modules/glsl-shader-name/index.js\");\nvar addLineNumbers = __webpack_require__(/*! add-line-numbers */ \"./node_modules/add-line-numbers/index.js\");\n\nmodule.exports = formatCompilerError;\n\nfunction formatCompilerError(errLog, src, type) {\n    \"use strict\";\n\n    var name = shaderName(src) || 'of unknown name (see npm glsl-shader-name)';\n\n    var typeName = 'unknown type';\n    if (type !== undefined) {\n        typeName = type === glConstants.FRAGMENT_SHADER ? 'fragment' : 'vertex'\n    }\n\n    var longForm = sprintf('Error compiling %s shader %s:\\n', typeName, name);\n    var shortForm = sprintf(\"%s%s\", longForm, errLog);\n\n    var errorStrings = errLog.split('\\n');\n    var errors = {};\n\n    for (var i = 0; i < errorStrings.length; i++) {\n        var errorString = errorStrings[i];\n        if (errorString === '' || errorString === \"\\0\") continue;\n        var lineNo = parseInt(errorString.split(':')[2]);\n        if (isNaN(lineNo)) {\n            throw new Error(sprintf('Could not parse error: %s', errorString));\n        }\n        errors[lineNo] = errorString;\n    }\n\n    var lines = addLineNumbers(src).split('\\n');\n\n    for (var i = 0; i < lines.length; i++) {\n        if (!errors[i+3] && !errors[i+2] && !errors[i+1]) continue;\n        var line = lines[i];\n        longForm += line + '\\n';\n        if (errors[i+1]) {\n            var e = errors[i+1];\n            e = e.substr(e.split(':', 3).join(':').length + 1).trim();\n            longForm += sprintf('^^^ %s\\n\\n', e);\n        }\n    }\n\n    return {\n        long: longForm.trim(),\n        short: shortForm.trim()\n    };\n}\n\n\n\n//# sourceURL=webpack://rmh_touch/./node_modules/gl-format-compiler-error/index.js?");

/***/ }),

/***/ "./node_modules/gl-shader/index.js":
/*!*****************************************!*\
  !*** ./node_modules/gl-shader/index.js ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar createUniformWrapper   = __webpack_require__(/*! ./lib/create-uniforms */ \"./node_modules/gl-shader/lib/create-uniforms.js\")\nvar createAttributeWrapper = __webpack_require__(/*! ./lib/create-attributes */ \"./node_modules/gl-shader/lib/create-attributes.js\")\nvar makeReflect            = __webpack_require__(/*! ./lib/reflect */ \"./node_modules/gl-shader/lib/reflect.js\")\nvar shaderCache            = __webpack_require__(/*! ./lib/shader-cache */ \"./node_modules/gl-shader/lib/shader-cache.js\")\nvar runtime                = __webpack_require__(/*! ./lib/runtime-reflect */ \"./node_modules/gl-shader/lib/runtime-reflect.js\")\nvar GLError                = __webpack_require__(/*! ./lib/GLError */ \"./node_modules/gl-shader/lib/GLError.js\")\n\n//Shader object\nfunction Shader(gl) {\n  this.gl         = gl\n  this.gl.lastAttribCount = 0  // fixme where else should we store info, safe but not nice on the gl object\n\n  //Default initialize these to null\n  this._vref      =\n  this._fref      =\n  this._relink    =\n  this.vertShader =\n  this.fragShader =\n  this.program    =\n  this.attributes =\n  this.uniforms   =\n  this.types      = null\n}\n\nvar proto = Shader.prototype\n\nproto.bind = function() {\n  if(!this.program) {\n    this._relink()\n  }\n\n  // ensuring that we have the right number of enabled vertex attributes\n  var i\n  var newAttribCount = this.gl.getProgramParameter(this.program, this.gl.ACTIVE_ATTRIBUTES) // more robust approach\n  //var newAttribCount = Object.keys(this.attributes).length // avoids the probably immaterial introspection slowdown\n  var oldAttribCount = this.gl.lastAttribCount\n  if(newAttribCount > oldAttribCount) {\n    for(i = oldAttribCount; i < newAttribCount; i++) {\n      this.gl.enableVertexAttribArray(i)\n    }\n  } else if(oldAttribCount > newAttribCount) {\n    for(i = newAttribCount; i < oldAttribCount; i++) {\n      this.gl.disableVertexAttribArray(i)\n    }\n  }\n\n  this.gl.lastAttribCount = newAttribCount\n\n  this.gl.useProgram(this.program)\n}\n\nproto.dispose = function() {\n\n  // disabling vertex attributes so new shader starts with zero\n  // and it's also useful if all shaders are disposed but the\n  // gl context is reused for subsequent replotting\n  var oldAttribCount = this.gl.lastAttribCount\n  for (var i = 0; i < oldAttribCount; i++) {\n    this.gl.disableVertexAttribArray(i)\n  }\n  this.gl.lastAttribCount = 0\n\n  if(this._fref) {\n    this._fref.dispose()\n  }\n  if(this._vref) {\n    this._vref.dispose()\n  }\n  this.attributes =\n  this.types      =\n  this.vertShader =\n  this.fragShader =\n  this.program    =\n  this._relink    =\n  this._fref      =\n  this._vref      = null\n}\n\nfunction compareAttributes(a, b) {\n  if(a.name < b.name) {\n    return -1\n  }\n  return 1\n}\n\n//Update export hook for glslify-live\nproto.update = function(\n    vertSource\n  , fragSource\n  , uniforms\n  , attributes) {\n\n  //If only one object passed, assume glslify style output\n  if(!fragSource || arguments.length === 1) {\n    var obj = vertSource\n    vertSource = obj.vertex\n    fragSource = obj.fragment\n    uniforms   = obj.uniforms\n    attributes = obj.attributes\n  }\n\n  var wrapper = this\n  var gl      = wrapper.gl\n\n  //Compile vertex and fragment shaders\n  var pvref = wrapper._vref\n  wrapper._vref = shaderCache.shader(gl, gl.VERTEX_SHADER, vertSource)\n  if(pvref) {\n    pvref.dispose()\n  }\n  wrapper.vertShader = wrapper._vref.shader\n  var pfref = this._fref\n  wrapper._fref = shaderCache.shader(gl, gl.FRAGMENT_SHADER, fragSource)\n  if(pfref) {\n    pfref.dispose()\n  }\n  wrapper.fragShader = wrapper._fref.shader\n\n  //If uniforms/attributes is not specified, use RT reflection\n  if(!uniforms || !attributes) {\n\n    //Create initial test program\n    var testProgram = gl.createProgram()\n    gl.attachShader(testProgram, wrapper.fragShader)\n    gl.attachShader(testProgram, wrapper.vertShader)\n    gl.linkProgram(testProgram)\n    if(!gl.getProgramParameter(testProgram, gl.LINK_STATUS)) {\n      var errLog = gl.getProgramInfoLog(testProgram)\n      throw new GLError(errLog, 'Error linking program:' + errLog)\n    }\n\n    //Load data from runtime\n    uniforms   = uniforms   || runtime.uniforms(gl, testProgram)\n    attributes = attributes || runtime.attributes(gl, testProgram)\n\n    //Release test program\n    gl.deleteProgram(testProgram)\n  }\n\n  //Sort attributes lexicographically\n  // overrides undefined WebGL behavior for attribute locations\n  attributes = attributes.slice()\n  attributes.sort(compareAttributes)\n\n  //Convert attribute types, read out locations\n  var attributeUnpacked  = []\n  var attributeNames     = []\n  var attributeLocations = []\n  var i\n  for(i=0; i<attributes.length; ++i) {\n    var attr = attributes[i]\n    if(attr.type.indexOf('mat') >= 0) {\n      var size = attr.type.charAt(attr.type.length-1)|0\n      var locVector = new Array(size)\n      for(var j=0; j<size; ++j) {\n        locVector[j] = attributeLocations.length\n        attributeNames.push(attr.name + '[' + j + ']')\n        if(typeof attr.location === 'number') {\n          attributeLocations.push(attr.location + j)\n        } else if(Array.isArray(attr.location) &&\n                  attr.location.length === size &&\n                  typeof attr.location[j] === 'number') {\n          attributeLocations.push(attr.location[j]|0)\n        } else {\n          attributeLocations.push(-1)\n        }\n      }\n      attributeUnpacked.push({\n        name: attr.name,\n        type: attr.type,\n        locations: locVector\n      })\n    } else {\n      attributeUnpacked.push({\n        name: attr.name,\n        type: attr.type,\n        locations: [ attributeLocations.length ]\n      })\n      attributeNames.push(attr.name)\n      if(typeof attr.location === 'number') {\n        attributeLocations.push(attr.location|0)\n      } else {\n        attributeLocations.push(-1)\n      }\n    }\n  }\n\n  //For all unspecified attributes, assign them lexicographically min attribute\n  var curLocation = 0\n  for(i=0; i<attributeLocations.length; ++i) {\n    if(attributeLocations[i] < 0) {\n      while(attributeLocations.indexOf(curLocation) >= 0) {\n        curLocation += 1\n      }\n      attributeLocations[i] = curLocation\n    }\n  }\n\n  //Rebuild program and recompute all uniform locations\n  var uniformLocations = new Array(uniforms.length)\n  function relink() {\n    wrapper.program = shaderCache.program(\n        gl\n      , wrapper._vref\n      , wrapper._fref\n      , attributeNames\n      , attributeLocations)\n\n    for(var i=0; i<uniforms.length; ++i) {\n      uniformLocations[i] = gl.getUniformLocation(\n          wrapper.program\n        , uniforms[i].name)\n    }\n  }\n\n  //Perform initial linking, reuse program used for reflection\n  relink()\n\n  //Save relinking procedure, defer until runtime\n  wrapper._relink = relink\n\n  //Generate type info\n  wrapper.types = {\n    uniforms:   makeReflect(uniforms),\n    attributes: makeReflect(attributes)\n  }\n\n  //Generate attribute wrappers\n  wrapper.attributes = createAttributeWrapper(\n      gl\n    , wrapper\n    , attributeUnpacked\n    , attributeLocations)\n\n  //Generate uniform wrappers\n  Object.defineProperty(wrapper, 'uniforms', createUniformWrapper(\n      gl\n    , wrapper\n    , uniforms\n    , uniformLocations))\n}\n\n//Compiles and links a shader program with the given attribute and vertex list\nfunction createShader(\n    gl\n  , vertSource\n  , fragSource\n  , uniforms\n  , attributes) {\n\n  var shader = new Shader(gl)\n\n  shader.update(\n      vertSource\n    , fragSource\n    , uniforms\n    , attributes)\n\n  return shader\n}\n\nmodule.exports = createShader\n\n\n//# sourceURL=webpack://rmh_touch/./node_modules/gl-shader/index.js?");

/***/ }),

/***/ "./node_modules/gl-shader/lib/GLError.js":
/*!***********************************************!*\
  !*** ./node_modules/gl-shader/lib/GLError.js ***!
  \***********************************************/
/***/ ((module) => {

eval("function GLError (rawError, shortMessage, longMessage) {\n    this.shortMessage = shortMessage || ''\n    this.longMessage = longMessage || ''\n    this.rawError = rawError || ''\n    this.message =\n      'gl-shader: ' + (shortMessage || rawError || '') +\n      (longMessage ? '\\n'+longMessage : '')\n    this.stack = (new Error()).stack\n}\nGLError.prototype = new Error\nGLError.prototype.name = 'GLError'\nGLError.prototype.constructor = GLError\nmodule.exports = GLError\n\n\n//# sourceURL=webpack://rmh_touch/./node_modules/gl-shader/lib/GLError.js?");

/***/ }),

/***/ "./node_modules/gl-shader/lib/create-attributes.js":
/*!*********************************************************!*\
  !*** ./node_modules/gl-shader/lib/create-attributes.js ***!
  \*********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nmodule.exports = createAttributeWrapper\n\nvar GLError = __webpack_require__(/*! ./GLError */ \"./node_modules/gl-shader/lib/GLError.js\")\n\nfunction ShaderAttribute(\n    gl\n  , wrapper\n  , index\n  , locations\n  , dimension\n  , constFunc) {\n  this._gl        = gl\n  this._wrapper   = wrapper\n  this._index     = index\n  this._locations = locations\n  this._dimension = dimension\n  this._constFunc = constFunc\n}\n\nvar proto = ShaderAttribute.prototype\n\nproto.pointer = function setAttribPointer(\n    type\n  , normalized\n  , stride\n  , offset) {\n\n  var self      = this\n  var gl        = self._gl\n  var location  = self._locations[self._index]\n\n  gl.vertexAttribPointer(\n      location\n    , self._dimension\n    , type || gl.FLOAT\n    , !!normalized\n    , stride || 0\n    , offset || 0)\n  gl.enableVertexAttribArray(location)\n}\n\nproto.set = function(x0, x1, x2, x3) {\n  return this._constFunc(this._locations[this._index], x0, x1, x2, x3)\n}\n\nObject.defineProperty(proto, 'location', {\n  get: function() {\n    return this._locations[this._index]\n  }\n  , set: function(v) {\n    if(v !== this._locations[this._index]) {\n      this._locations[this._index] = v|0\n      this._wrapper.program = null\n    }\n    return v|0\n  }\n})\n\n//Adds a vector attribute to obj\nfunction addVectorAttribute(\n    gl\n  , wrapper\n  , index\n  , locations\n  , dimension\n  , obj\n  , name) {\n\n  //Construct constant function\n  var constFuncArgs = [ 'gl', 'v' ]\n  var varNames = []\n  for(var i=0; i<dimension; ++i) {\n    constFuncArgs.push('x'+i)\n    varNames.push('x'+i)\n  }\n  constFuncArgs.push(\n    'if(x0.length===void 0){return gl.vertexAttrib' +\n    dimension + 'f(v,' +\n    varNames.join() +\n    ')}else{return gl.vertexAttrib' +\n    dimension +\n    'fv(v,x0)}')\n  var constFunc = Function.apply(null, constFuncArgs)\n\n  //Create attribute wrapper\n  var attr = new ShaderAttribute(\n      gl\n    , wrapper\n    , index\n    , locations\n    , dimension\n    , constFunc)\n\n  //Create accessor\n  Object.defineProperty(obj, name, {\n    set: function(x) {\n      gl.disableVertexAttribArray(locations[index])\n      constFunc(gl, locations[index], x)\n      return x\n    }\n    , get: function() {\n      return attr\n    }\n    , enumerable: true\n  })\n}\n\nfunction addMatrixAttribute(\n    gl\n  , wrapper\n  , index\n  , locations\n  , dimension\n  , obj\n  , name) {\n\n  var parts = new Array(dimension)\n  var attrs = new Array(dimension)\n  for(var i=0; i<dimension; ++i) {\n    addVectorAttribute(\n        gl\n      , wrapper\n      , index[i]\n      , locations\n      , dimension\n      , parts\n      , i)\n    attrs[i] = parts[i]\n  }\n\n  Object.defineProperty(parts, 'location', {\n    set: function(v) {\n      if(Array.isArray(v)) {\n        for(var i=0; i<dimension; ++i) {\n          attrs[i].location = v[i]\n        }\n      } else {\n        for(var i=0; i<dimension; ++i) {\n          attrs[i].location = v + i\n        }\n      }\n      return v\n    }\n    , get: function() {\n      var result = new Array(dimension)\n      for(var i=0; i<dimension; ++i) {\n        result[i] = locations[index[i]]\n      }\n      return result\n    }\n    , enumerable: true\n  })\n\n  parts.pointer = function(type, normalized, stride, offset) {\n    type       = type || gl.FLOAT\n    normalized = !!normalized\n    stride     = stride || (dimension * dimension)\n    offset     = offset || 0\n    for(var i=0; i<dimension; ++i) {\n      var location = locations[index[i]]\n      gl.vertexAttribPointer(\n            location\n          , dimension\n          , type\n          , normalized\n          , stride\n          , offset + i * dimension)\n      gl.enableVertexAttribArray(location)\n    }\n  }\n\n  var scratch = new Array(dimension)\n  var vertexAttrib = gl['vertexAttrib' + dimension + 'fv']\n\n  Object.defineProperty(obj, name, {\n    set: function(x) {\n      for(var i=0; i<dimension; ++i) {\n        var loc = locations[index[i]]\n        gl.disableVertexAttribArray(loc)\n        if(Array.isArray(x[0])) {\n          vertexAttrib.call(gl, loc, x[i])\n        } else {\n          for(var j=0; j<dimension; ++j) {\n            scratch[j] = x[dimension*i + j]\n          }\n          vertexAttrib.call(gl, loc, scratch)\n        }\n      }\n      return x\n    }\n    , get: function() {\n      return parts\n    }\n    , enumerable: true\n  })\n}\n\n//Create shims for attributes\nfunction createAttributeWrapper(\n    gl\n  , wrapper\n  , attributes\n  , locations) {\n\n  var obj = {}\n  for(var i=0, n=attributes.length; i<n; ++i) {\n\n    var a = attributes[i]\n    var name = a.name\n    var type = a.type\n    var locs = a.locations\n\n    switch(type) {\n      case 'bool':\n      case 'int':\n      case 'float':\n        addVectorAttribute(\n            gl\n          , wrapper\n          , locs[0]\n          , locations\n          , 1\n          , obj\n          , name)\n      break\n\n      default:\n        if(type.indexOf('vec') >= 0) {\n          var d = type.charCodeAt(type.length-1) - 48\n          if(d < 2 || d > 4) {\n            throw new GLError('', 'Invalid data type for attribute ' + name + ': ' + type)\n          }\n          addVectorAttribute(\n              gl\n            , wrapper\n            , locs[0]\n            , locations\n            , d\n            , obj\n            , name)\n        } else if(type.indexOf('mat') >= 0) {\n          var d = type.charCodeAt(type.length-1) - 48\n          if(d < 2 || d > 4) {\n            throw new GLError('', 'Invalid data type for attribute ' + name + ': ' + type)\n          }\n          addMatrixAttribute(\n              gl\n            , wrapper\n            , locs\n            , locations\n            , d\n            , obj\n            , name)\n        } else {\n          throw new GLError('', 'Unknown data type for attribute ' + name + ': ' + type)\n        }\n      break\n    }\n  }\n  return obj\n}\n\n\n//# sourceURL=webpack://rmh_touch/./node_modules/gl-shader/lib/create-attributes.js?");

/***/ }),

/***/ "./node_modules/gl-shader/lib/create-uniforms.js":
/*!*******************************************************!*\
  !*** ./node_modules/gl-shader/lib/create-uniforms.js ***!
  \*******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar coallesceUniforms = __webpack_require__(/*! ./reflect */ \"./node_modules/gl-shader/lib/reflect.js\")\nvar GLError = __webpack_require__(/*! ./GLError */ \"./node_modules/gl-shader/lib/GLError.js\")\n\nmodule.exports = createUniformWrapper\n\n//Binds a function and returns a value\nfunction identity(x) {\n  var c = new Function('y', 'return function(){return y}')\n  return c(x)\n}\n\nfunction makeVector(length, fill) {\n  var result = new Array(length)\n  for(var i=0; i<length; ++i) {\n    result[i] = fill\n  }\n  return result\n}\n\n//Create shims for uniforms\nfunction createUniformWrapper(gl, wrapper, uniforms, locations) {\n\n  function makeGetter(index) {\n    var proc = new Function(\n        'gl'\n      , 'wrapper'\n      , 'locations'\n      , 'return function(){return gl.getUniform(wrapper.program,locations[' + index + '])}')\n    return proc(gl, wrapper, locations)\n  }\n\n  function makePropSetter(path, index, type) {\n    switch(type) {\n      case 'bool':\n      case 'int':\n      case 'sampler2D':\n      case 'samplerCube':\n        return 'gl.uniform1i(locations[' + index + '],obj' + path + ')'\n      case 'float':\n        return 'gl.uniform1f(locations[' + index + '],obj' + path + ')'\n      default:\n        var vidx = type.indexOf('vec')\n        if(0 <= vidx && vidx <= 1 && type.length === 4 + vidx) {\n          var d = type.charCodeAt(type.length-1) - 48\n          if(d < 2 || d > 4) {\n            throw new GLError('', 'Invalid data type')\n          }\n          switch(type.charAt(0)) {\n            case 'b':\n            case 'i':\n              return 'gl.uniform' + d + 'iv(locations[' + index + '],obj' + path + ')'\n            case 'v':\n              return 'gl.uniform' + d + 'fv(locations[' + index + '],obj' + path + ')'\n            default:\n              throw new GLError('', 'Unrecognized data type for vector ' + name + ': ' + type)\n          }\n        } else if(type.indexOf('mat') === 0 && type.length === 4) {\n          var d = type.charCodeAt(type.length-1) - 48\n          if(d < 2 || d > 4) {\n            throw new GLError('', 'Invalid uniform dimension type for matrix ' + name + ': ' + type)\n          }\n          return 'gl.uniformMatrix' + d + 'fv(locations[' + index + '],false,obj' + path + ')'\n        } else {\n          throw new GLError('', 'Unknown uniform data type for ' + name + ': ' + type)\n        }\n      break\n    }\n  }\n\n  function enumerateIndices(prefix, type) {\n    if(typeof type !== 'object') {\n      return [ [prefix, type] ]\n    }\n    var indices = []\n    for(var id in type) {\n      var prop = type[id]\n      var tprefix = prefix\n      if(parseInt(id) + '' === id) {\n        tprefix += '[' + id + ']'\n      } else {\n        tprefix += '.' + id\n      }\n      if(typeof prop === 'object') {\n        indices.push.apply(indices, enumerateIndices(tprefix, prop))\n      } else {\n        indices.push([tprefix, prop])\n      }\n    }\n    return indices\n  }\n\n  function makeSetter(type) {\n    var code = [ 'return function updateProperty(obj){' ]\n    var indices = enumerateIndices('', type)\n    for(var i=0; i<indices.length; ++i) {\n      var item = indices[i]\n      var path = item[0]\n      var idx  = item[1]\n      if(locations[idx]) {\n        code.push(makePropSetter(path, idx, uniforms[idx].type))\n      }\n    }\n    code.push('return obj}')\n    var proc = new Function('gl', 'locations', code.join('\\n'))\n    return proc(gl, locations)\n  }\n\n  function defaultValue(type) {\n    switch(type) {\n      case 'bool':\n        return false\n      case 'int':\n      case 'sampler2D':\n      case 'samplerCube':\n        return 0\n      case 'float':\n        return 0.0\n      default:\n        var vidx = type.indexOf('vec')\n        if(0 <= vidx && vidx <= 1 && type.length === 4 + vidx) {\n          var d = type.charCodeAt(type.length-1) - 48\n          if(d < 2 || d > 4) {\n            throw new GLError('', 'Invalid data type')\n          }\n          if(type.charAt(0) === 'b') {\n            return makeVector(d, false)\n          }\n          return makeVector(d, 0)\n        } else if(type.indexOf('mat') === 0 && type.length === 4) {\n          var d = type.charCodeAt(type.length-1) - 48\n          if(d < 2 || d > 4) {\n            throw new GLError('', 'Invalid uniform dimension type for matrix ' + name + ': ' + type)\n          }\n          return makeVector(d*d, 0)\n        } else {\n          throw new GLError('', 'Unknown uniform data type for ' + name + ': ' + type)\n        }\n      break\n    }\n  }\n\n  function storeProperty(obj, prop, type) {\n    if(typeof type === 'object') {\n      var child = processObject(type)\n      Object.defineProperty(obj, prop, {\n        get: identity(child),\n        set: makeSetter(type),\n        enumerable: true,\n        configurable: false\n      })\n    } else {\n      if(locations[type]) {\n        Object.defineProperty(obj, prop, {\n          get: makeGetter(type),\n          set: makeSetter(type),\n          enumerable: true,\n          configurable: false\n        })\n      } else {\n        obj[prop] = defaultValue(uniforms[type].type)\n      }\n    }\n  }\n\n  function processObject(obj) {\n    var result\n    if(Array.isArray(obj)) {\n      result = new Array(obj.length)\n      for(var i=0; i<obj.length; ++i) {\n        storeProperty(result, i, obj[i])\n      }\n    } else {\n      result = {}\n      for(var id in obj) {\n        storeProperty(result, id, obj[id])\n      }\n    }\n    return result\n  }\n\n  //Return data\n  var coallesced = coallesceUniforms(uniforms, true)\n  return {\n    get: identity(processObject(coallesced)),\n    set: makeSetter(coallesced),\n    enumerable: true,\n    configurable: true\n  }\n}\n\n\n//# sourceURL=webpack://rmh_touch/./node_modules/gl-shader/lib/create-uniforms.js?");

/***/ }),

/***/ "./node_modules/gl-shader/lib/reflect.js":
/*!***********************************************!*\
  !*** ./node_modules/gl-shader/lib/reflect.js ***!
  \***********************************************/
/***/ ((module) => {

"use strict";
eval("\n\nmodule.exports = makeReflectTypes\n\n//Construct type info for reflection.\n//\n// This iterates over the flattened list of uniform type values and smashes them into a JSON object.\n//\n// The leaves of the resulting object are either indices or type strings representing primitive glslify types\nfunction makeReflectTypes(uniforms, useIndex) {\n  var obj = {}\n  for(var i=0; i<uniforms.length; ++i) {\n    var n = uniforms[i].name\n    var parts = n.split(\".\")\n    var o = obj\n    for(var j=0; j<parts.length; ++j) {\n      var x = parts[j].split(\"[\")\n      if(x.length > 1) {\n        if(!(x[0] in o)) {\n          o[x[0]] = []\n        }\n        o = o[x[0]]\n        for(var k=1; k<x.length; ++k) {\n          var y = parseInt(x[k])\n          if(k<x.length-1 || j<parts.length-1) {\n            if(!(y in o)) {\n              if(k < x.length-1) {\n                o[y] = []\n              } else {\n                o[y] = {}\n              }\n            }\n            o = o[y]\n          } else {\n            if(useIndex) {\n              o[y] = i\n            } else {\n              o[y] = uniforms[i].type\n            }\n          }\n        }\n      } else if(j < parts.length-1) {\n        if(!(x[0] in o)) {\n          o[x[0]] = {}\n        }\n        o = o[x[0]]\n      } else {\n        if(useIndex) {\n          o[x[0]] = i\n        } else {\n          o[x[0]] = uniforms[i].type\n        }\n      }\n    }\n  }\n  return obj\n}\n\n//# sourceURL=webpack://rmh_touch/./node_modules/gl-shader/lib/reflect.js?");

/***/ }),

/***/ "./node_modules/gl-shader/lib/runtime-reflect.js":
/*!*******************************************************!*\
  !*** ./node_modules/gl-shader/lib/runtime-reflect.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\n\nexports.uniforms    = runtimeUniforms\nexports.attributes  = runtimeAttributes\n\nvar GL_TO_GLSL_TYPES = {\n  'FLOAT':       'float',\n  'FLOAT_VEC2':  'vec2',\n  'FLOAT_VEC3':  'vec3',\n  'FLOAT_VEC4':  'vec4',\n  'INT':         'int',\n  'INT_VEC2':    'ivec2',\n  'INT_VEC3':    'ivec3',\n  'INT_VEC4':    'ivec4',\n  'BOOL':        'bool',\n  'BOOL_VEC2':   'bvec2',\n  'BOOL_VEC3':   'bvec3',\n  'BOOL_VEC4':   'bvec4',\n  'FLOAT_MAT2':  'mat2',\n  'FLOAT_MAT3':  'mat3',\n  'FLOAT_MAT4':  'mat4',\n  'SAMPLER_2D':  'sampler2D',\n  'SAMPLER_CUBE':'samplerCube'\n}\n\nvar GL_TABLE = null\n\nfunction getType(gl, type) {\n  if(!GL_TABLE) {\n    var typeNames = Object.keys(GL_TO_GLSL_TYPES)\n    GL_TABLE = {}\n    for(var i=0; i<typeNames.length; ++i) {\n      var tn = typeNames[i]\n      GL_TABLE[gl[tn]] = GL_TO_GLSL_TYPES[tn]\n    }\n  }\n  return GL_TABLE[type]\n}\n\nfunction runtimeUniforms(gl, program) {\n  var numUniforms = gl.getProgramParameter(program, gl.ACTIVE_UNIFORMS)\n  var result = []\n  for(var i=0; i<numUniforms; ++i) {\n    var info = gl.getActiveUniform(program, i)\n    if(info) {\n      var type = getType(gl, info.type)\n      if(info.size > 1) {\n        for(var j=0; j<info.size; ++j) {\n          result.push({\n            name: info.name.replace('[0]', '[' + j + ']'),\n            type: type\n          })\n        }\n      } else {\n        result.push({\n          name: info.name,\n          type: type\n        })\n      }\n    }\n  }\n  return result\n}\n\nfunction runtimeAttributes(gl, program) {\n  var numAttributes = gl.getProgramParameter(program, gl.ACTIVE_ATTRIBUTES)\n  var result = []\n  for(var i=0; i<numAttributes; ++i) {\n    var info = gl.getActiveAttrib(program, i)\n    if(info) {\n      result.push({\n        name: info.name,\n        type: getType(gl, info.type)\n      })\n    }\n  }\n  return result\n}\n\n\n//# sourceURL=webpack://rmh_touch/./node_modules/gl-shader/lib/runtime-reflect.js?");

/***/ }),

/***/ "./node_modules/gl-shader/lib/shader-cache.js":
/*!****************************************************!*\
  !*** ./node_modules/gl-shader/lib/shader-cache.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nexports.shader   = getShaderReference\nexports.program  = createProgram\n\nvar GLError = __webpack_require__(/*! ./GLError */ \"./node_modules/gl-shader/lib/GLError.js\")\nvar formatCompilerError = __webpack_require__(/*! gl-format-compiler-error */ \"./node_modules/gl-format-compiler-error/index.js\");\n\nvar weakMap = typeof WeakMap === 'undefined' ? __webpack_require__(/*! weakmap-shim */ \"./node_modules/weakmap-shim/index.js\") : WeakMap\nvar CACHE = new weakMap()\n\nvar SHADER_COUNTER = 0\n\nfunction ShaderReference(id, src, type, shader, programs, count, cache) {\n  this.id       = id\n  this.src      = src\n  this.type     = type\n  this.shader   = shader\n  this.count    = count\n  this.programs = []\n  this.cache    = cache\n}\n\nShaderReference.prototype.dispose = function() {\n  if(--this.count === 0) {\n    var cache    = this.cache\n    var gl       = cache.gl\n\n    //Remove program references\n    var programs = this.programs\n    for(var i=0, n=programs.length; i<n; ++i) {\n      var p = cache.programs[programs[i]]\n      if(p) {\n        delete cache.programs[i]\n        gl.deleteProgram(p)\n      }\n    }\n\n    //Remove shader reference\n    gl.deleteShader(this.shader)\n    delete cache.shaders[(this.type === gl.FRAGMENT_SHADER)|0][this.src]\n  }\n}\n\nfunction ContextCache(gl) {\n  this.gl       = gl\n  this.shaders  = [{}, {}]\n  this.programs = {}\n}\n\nvar proto = ContextCache.prototype\n\nfunction compileShader(gl, type, src) {\n  var shader = gl.createShader(type)\n  gl.shaderSource(shader, src)\n  gl.compileShader(shader)\n  if(!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\n    var errLog = gl.getShaderInfoLog(shader)\n    try {\n        var fmt = formatCompilerError(errLog, src, type);\n    } catch (e){\n        console.warn('Failed to format compiler error: ' + e);\n        throw new GLError(errLog, 'Error compiling shader:\\n' + errLog)\n    }\n    throw new GLError(errLog, fmt.short, fmt.long)\n  }\n  return shader\n}\n\nproto.getShaderReference = function(type, src) {\n  var gl      = this.gl\n  var shaders = this.shaders[(type === gl.FRAGMENT_SHADER)|0]\n  var shader  = shaders[src]\n  if(!shader || !gl.isShader(shader.shader)) {\n    var shaderObj = compileShader(gl, type, src)\n    shader = shaders[src] = new ShaderReference(\n      SHADER_COUNTER++,\n      src,\n      type,\n      shaderObj,\n      [],\n      1,\n      this)\n  } else {\n    shader.count += 1\n  }\n  return shader\n}\n\nfunction linkProgram(gl, vshader, fshader, attribs, locations) {\n  var program = gl.createProgram()\n  gl.attachShader(program, vshader)\n  gl.attachShader(program, fshader)\n  for(var i=0; i<attribs.length; ++i) {\n    gl.bindAttribLocation(program, locations[i], attribs[i])\n  }\n  gl.linkProgram(program)\n  if(!gl.getProgramParameter(program, gl.LINK_STATUS)) {\n    var errLog = gl.getProgramInfoLog(program)\n    throw new GLError(errLog, 'Error linking program: ' + errLog)\n  }\n  return program\n}\n\nproto.getProgram = function(vref, fref, attribs, locations) {\n  var token = [vref.id, fref.id, attribs.join(':'), locations.join(':')].join('@')\n  var prog  = this.programs[token]\n  if(!prog || !this.gl.isProgram(prog)) {\n    this.programs[token] = prog = linkProgram(\n      this.gl,\n      vref.shader,\n      fref.shader,\n      attribs,\n      locations)\n    vref.programs.push(token)\n    fref.programs.push(token)\n  }\n  return prog\n}\n\nfunction getCache(gl) {\n  var ctxCache = CACHE.get(gl)\n  if(!ctxCache) {\n    ctxCache = new ContextCache(gl)\n    CACHE.set(gl, ctxCache)\n  }\n  return ctxCache\n}\n\nfunction getShaderReference(gl, type, src) {\n  return getCache(gl).getShaderReference(type, src)\n}\n\nfunction createProgram(gl, vref, fref, attribs, locations) {\n  return getCache(gl).getProgram(vref, fref, attribs, locations)\n}\n\n\n//# sourceURL=webpack://rmh_touch/./node_modules/gl-shader/lib/shader-cache.js?");

/***/ }),

/***/ "./node_modules/gl-texture2d/texture.js":
/*!**********************************************!*\
  !*** ./node_modules/gl-texture2d/texture.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar ndarray = __webpack_require__(/*! ndarray */ \"./node_modules/ndarray/ndarray.js\")\nvar ops     = __webpack_require__(/*! ndarray-ops */ \"./node_modules/ndarray-ops/ndarray-ops.js\")\nvar pool    = __webpack_require__(/*! typedarray-pool */ \"./node_modules/typedarray-pool/pool.js\")\n\nmodule.exports = createTexture2D\n\nvar linearTypes = null\nvar filterTypes = null\nvar wrapTypes   = null\n\nfunction lazyInitLinearTypes(gl) {\n  linearTypes = [\n    gl.LINEAR,\n    gl.NEAREST_MIPMAP_LINEAR,\n    gl.LINEAR_MIPMAP_NEAREST,\n    gl.LINEAR_MIPMAP_NEAREST\n  ]\n  filterTypes = [\n    gl.NEAREST,\n    gl.LINEAR,\n    gl.NEAREST_MIPMAP_NEAREST,\n    gl.NEAREST_MIPMAP_LINEAR,\n    gl.LINEAR_MIPMAP_NEAREST,\n    gl.LINEAR_MIPMAP_LINEAR\n  ]\n  wrapTypes = [\n    gl.REPEAT,\n    gl.CLAMP_TO_EDGE,\n    gl.MIRRORED_REPEAT\n  ]\n}\n\nfunction acceptTextureDOM (obj) {\n  return (\n    ('undefined' != typeof HTMLCanvasElement && obj instanceof HTMLCanvasElement) ||\n    ('undefined' != typeof HTMLImageElement && obj instanceof HTMLImageElement) ||\n    ('undefined' != typeof HTMLVideoElement && obj instanceof HTMLVideoElement) ||\n    ('undefined' != typeof ImageData && obj instanceof ImageData))\n}\n\nvar convertFloatToUint8 = function(out, inp) {\n  ops.muls(out, inp, 255.0)\n}\n\nfunction reshapeTexture(tex, w, h) {\n  var gl = tex.gl\n  var maxSize = gl.getParameter(gl.MAX_TEXTURE_SIZE)\n  if(w < 0 || w > maxSize || h < 0 || h > maxSize) {\n    throw new Error('gl-texture2d: Invalid texture size')\n  }\n  tex._shape = [w, h]\n  tex.bind()\n  gl.texImage2D(gl.TEXTURE_2D, 0, tex.format, w, h, 0, tex.format, tex.type, null)\n  tex._mipLevels = [0]\n  return tex\n}\n\nfunction Texture2D(gl, handle, width, height, format, type) {\n  this.gl = gl\n  this.handle = handle\n  this.format = format\n  this.type = type\n  this._shape = [width, height]\n  this._mipLevels = [0]\n  this._magFilter = gl.NEAREST\n  this._minFilter = gl.NEAREST\n  this._wrapS = gl.CLAMP_TO_EDGE\n  this._wrapT = gl.CLAMP_TO_EDGE\n  this._anisoSamples = 1\n\n  var parent = this\n  var wrapVector = [this._wrapS, this._wrapT]\n  Object.defineProperties(wrapVector, [\n    {\n      get: function() {\n        return parent._wrapS\n      },\n      set: function(v) {\n        return parent.wrapS = v\n      }\n    },\n    {\n      get: function() {\n        return parent._wrapT\n      },\n      set: function(v) {\n        return parent.wrapT = v\n      }\n    }\n  ])\n  this._wrapVector = wrapVector\n\n  var shapeVector = [this._shape[0], this._shape[1]]\n  Object.defineProperties(shapeVector, [\n    {\n      get: function() {\n        return parent._shape[0]\n      },\n      set: function(v) {\n        return parent.width = v\n      }\n    },\n    {\n      get: function() {\n        return parent._shape[1]\n      },\n      set: function(v) {\n        return parent.height = v\n      }\n    }\n  ])\n  this._shapeVector = shapeVector\n}\n\nvar proto = Texture2D.prototype\n\nObject.defineProperties(proto, {\n  minFilter: {\n    get: function() {\n      return this._minFilter\n    },\n    set: function(v) {\n      this.bind()\n      var gl = this.gl\n      if(this.type === gl.FLOAT && linearTypes.indexOf(v) >= 0) {\n        if(!gl.getExtension('OES_texture_float_linear')) {\n          v = gl.NEAREST\n        }\n      }\n      if(filterTypes.indexOf(v) < 0) {\n        throw new Error('gl-texture2d: Unknown filter mode ' + v)\n      }\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, v)\n      return this._minFilter = v\n    }\n  },\n  magFilter: {\n    get: function() {\n      return this._magFilter\n    },\n    set: function(v) {\n      this.bind()\n      var gl = this.gl\n      if(this.type === gl.FLOAT && linearTypes.indexOf(v) >= 0) {\n        if(!gl.getExtension('OES_texture_float_linear')) {\n          v = gl.NEAREST\n        }\n      }\n      if(filterTypes.indexOf(v) < 0) {\n        throw new Error('gl-texture2d: Unknown filter mode ' + v)\n      }\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, v)\n      return this._magFilter = v\n    }\n  },\n  mipSamples: {\n    get: function() {\n      return this._anisoSamples\n    },\n    set: function(i) {\n      var psamples = this._anisoSamples\n      this._anisoSamples = Math.max(i, 1)|0\n      if(psamples !== this._anisoSamples) {\n        var ext = this.gl.getExtension('EXT_texture_filter_anisotropic')\n        if(ext) {\n          this.gl.texParameterf(this.gl.TEXTURE_2D, ext.TEXTURE_MAX_ANISOTROPY_EXT, this._anisoSamples)\n        }\n      }\n      return this._anisoSamples\n    }\n  },\n  wrapS: {\n    get: function() {\n      return this._wrapS\n    },\n    set: function(v) {\n      this.bind()\n      if(wrapTypes.indexOf(v) < 0) {\n        throw new Error('gl-texture2d: Unknown wrap mode ' + v)\n      }\n      this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_WRAP_S, v)\n      return this._wrapS = v\n    }\n  },\n  wrapT: {\n    get: function() {\n      return this._wrapT\n    },\n    set: function(v) {\n      this.bind()\n      if(wrapTypes.indexOf(v) < 0) {\n        throw new Error('gl-texture2d: Unknown wrap mode ' + v)\n      }\n      this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_WRAP_T, v)\n      return this._wrapT = v\n    }\n  },\n  wrap: {\n    get: function() {\n      return this._wrapVector\n    },\n    set: function(v) {\n      if(!Array.isArray(v)) {\n        v = [v,v]\n      }\n      if(v.length !== 2) {\n        throw new Error('gl-texture2d: Must specify wrap mode for rows and columns')\n      }\n      for(var i=0; i<2; ++i) {\n        if(wrapTypes.indexOf(v[i]) < 0) {\n          throw new Error('gl-texture2d: Unknown wrap mode ' + v)\n        }\n      }\n      this._wrapS = v[0]\n      this._wrapT = v[1]\n\n      var gl = this.gl\n      this.bind()\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, this._wrapS)\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, this._wrapT)\n\n      return v\n    }\n  },\n  shape: {\n    get: function() {\n      return this._shapeVector\n    },\n    set: function(x) {\n      if(!Array.isArray(x)) {\n        x = [x|0,x|0]\n      } else {\n        if(x.length !== 2) {\n          throw new Error('gl-texture2d: Invalid texture shape')\n        }\n      }\n      reshapeTexture(this, x[0]|0, x[1]|0)\n      return [x[0]|0, x[1]|0]\n    }\n  },\n  width: {\n    get: function() {\n      return this._shape[0]\n    },\n    set: function(w) {\n      w = w|0\n      reshapeTexture(this, w, this._shape[1])\n      return w\n    }\n  },\n  height: {\n    get: function() {\n      return this._shape[1]\n    },\n    set: function(h) {\n      h = h|0\n      reshapeTexture(this, this._shape[0], h)\n      return h\n    }\n  }\n})\n\nproto.bind = function(unit) {\n  var gl = this.gl\n  if(unit !== undefined) {\n    gl.activeTexture(gl.TEXTURE0 + (unit|0))\n  }\n  gl.bindTexture(gl.TEXTURE_2D, this.handle)\n  if(unit !== undefined) {\n    return (unit|0)\n  }\n  return gl.getParameter(gl.ACTIVE_TEXTURE) - gl.TEXTURE0\n}\n\nproto.dispose = function() {\n  this.gl.deleteTexture(this.handle)\n}\n\nproto.generateMipmap = function() {\n  this.bind()\n  this.gl.generateMipmap(this.gl.TEXTURE_2D)\n\n  //Update mip levels\n  var l = Math.min(this._shape[0], this._shape[1])\n  for(var i=0; l>0; ++i, l>>>=1) {\n    if(this._mipLevels.indexOf(i) < 0) {\n      this._mipLevels.push(i)\n    }\n  }\n}\n\nproto.setPixels = function(data, x_off, y_off, mip_level) {\n  var gl = this.gl\n  this.bind()\n  if(Array.isArray(x_off)) {\n    mip_level = y_off\n    y_off = x_off[1]|0\n    x_off = x_off[0]|0\n  } else {\n    x_off = x_off || 0\n    y_off = y_off || 0\n  }\n  mip_level = mip_level || 0\n  var directData = acceptTextureDOM(data) ? data : data.raw\n  if(directData) {\n    var needsMip = this._mipLevels.indexOf(mip_level) < 0\n    if(needsMip) {\n      gl.texImage2D(gl.TEXTURE_2D, 0, this.format, this.format, this.type, directData)\n      this._mipLevels.push(mip_level)\n    } else {\n      gl.texSubImage2D(gl.TEXTURE_2D, mip_level, x_off, y_off, this.format, this.type, directData)\n    }\n  } else if(data.shape && data.stride && data.data) {\n    if(data.shape.length < 2 ||\n       x_off + data.shape[1] > this._shape[1]>>>mip_level ||\n       y_off + data.shape[0] > this._shape[0]>>>mip_level ||\n       x_off < 0 ||\n       y_off < 0) {\n      throw new Error('gl-texture2d: Texture dimensions are out of bounds')\n    }\n    texSubImageArray(gl, x_off, y_off, mip_level, this.format, this.type, this._mipLevels, data)\n  } else {\n    throw new Error('gl-texture2d: Unsupported data type')\n  }\n}\n\n\nfunction isPacked(shape, stride) {\n  if(shape.length === 3) {\n    return  (stride[2] === 1) &&\n            (stride[1] === shape[0]*shape[2]) &&\n            (stride[0] === shape[2])\n  }\n  return  (stride[0] === 1) &&\n          (stride[1] === shape[0])\n}\n\nfunction texSubImageArray(gl, x_off, y_off, mip_level, cformat, ctype, mipLevels, array) {\n  var dtype = array.dtype\n  var shape = array.shape.slice()\n  if(shape.length < 2 || shape.length > 3) {\n    throw new Error('gl-texture2d: Invalid ndarray, must be 2d or 3d')\n  }\n  var type = 0, format = 0\n  var packed = isPacked(shape, array.stride.slice())\n  if(dtype === 'float32') {\n    type = gl.FLOAT\n  } else if(dtype === 'float64') {\n    type = gl.FLOAT\n    packed = false\n    dtype = 'float32'\n  } else if(dtype === 'uint8') {\n    type = gl.UNSIGNED_BYTE\n  } else {\n    type = gl.UNSIGNED_BYTE\n    packed = false\n    dtype = 'uint8'\n  }\n  var channels = 1\n  if(shape.length === 2) {\n    format = gl.LUMINANCE\n    shape = [shape[0], shape[1], 1]\n    array = ndarray(array.data, shape, [array.stride[0], array.stride[1], 1], array.offset)\n  } else if(shape.length === 3) {\n    if(shape[2] === 1) {\n      format = gl.ALPHA\n    } else if(shape[2] === 2) {\n      format = gl.LUMINANCE_ALPHA\n    } else if(shape[2] === 3) {\n      format = gl.RGB\n    } else if(shape[2] === 4) {\n      format = gl.RGBA\n    } else {\n      throw new Error('gl-texture2d: Invalid shape for pixel coords')\n    }\n    channels = shape[2]\n  } else {\n    throw new Error('gl-texture2d: Invalid shape for texture')\n  }\n  //For 1-channel textures allow conversion between formats\n  if((format  === gl.LUMINANCE || format  === gl.ALPHA) &&\n     (cformat === gl.LUMINANCE || cformat === gl.ALPHA)) {\n    format = cformat\n  }\n  if(format !== cformat) {\n    throw new Error('gl-texture2d: Incompatible texture format for setPixels')\n  }\n  var size = array.size\n  var needsMip = mipLevels.indexOf(mip_level) < 0\n  if(needsMip) {\n    mipLevels.push(mip_level)\n  }\n  if(type === ctype && packed) {\n    //Array data types are compatible, can directly copy into texture\n    if(array.offset === 0 && array.data.length === size) {\n      if(needsMip) {\n        gl.texImage2D(gl.TEXTURE_2D, mip_level, cformat, shape[0], shape[1], 0, cformat, ctype, array.data)\n      } else {\n        gl.texSubImage2D(gl.TEXTURE_2D, mip_level, x_off, y_off, shape[0], shape[1], cformat, ctype, array.data)\n      }\n    } else {\n      if(needsMip) {\n        gl.texImage2D(gl.TEXTURE_2D, mip_level, cformat, shape[0], shape[1], 0, cformat, ctype, array.data.subarray(array.offset, array.offset+size))\n      } else {\n        gl.texSubImage2D(gl.TEXTURE_2D, mip_level, x_off, y_off, shape[0], shape[1], cformat, ctype, array.data.subarray(array.offset, array.offset+size))\n      }\n    }\n  } else {\n    //Need to do type conversion to pack data into buffer\n    var pack_buffer\n    if(ctype === gl.FLOAT) {\n      pack_buffer = pool.mallocFloat32(size)\n    } else {\n      pack_buffer = pool.mallocUint8(size)\n    }\n    var pack_view = ndarray(pack_buffer, shape, [shape[2], shape[2]*shape[0], 1])\n    if(type === gl.FLOAT && ctype === gl.UNSIGNED_BYTE) {\n      convertFloatToUint8(pack_view, array)\n    } else {\n      ops.assign(pack_view, array)\n    }\n    if(needsMip) {\n      gl.texImage2D(gl.TEXTURE_2D, mip_level, cformat, shape[0], shape[1], 0, cformat, ctype, pack_buffer.subarray(0, size))\n    } else {\n      gl.texSubImage2D(gl.TEXTURE_2D, mip_level, x_off, y_off, shape[0], shape[1], cformat, ctype, pack_buffer.subarray(0, size))\n    }\n    if(ctype === gl.FLOAT) {\n      pool.freeFloat32(pack_buffer)\n    } else {\n      pool.freeUint8(pack_buffer)\n    }\n  }\n}\n\nfunction initTexture(gl) {\n  var tex = gl.createTexture()\n  gl.bindTexture(gl.TEXTURE_2D, tex)\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST)\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST)\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE)\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE)\n  return tex\n}\n\nfunction createTextureShape(gl, width, height, format, type) {\n  var maxTextureSize = gl.getParameter(gl.MAX_TEXTURE_SIZE)\n  if(width < 0 || width > maxTextureSize || height < 0 || height  > maxTextureSize) {\n    throw new Error('gl-texture2d: Invalid texture shape')\n  }\n  if(type === gl.FLOAT && !gl.getExtension('OES_texture_float')) {\n    throw new Error('gl-texture2d: Floating point textures not supported on this platform')\n  }\n  var tex = initTexture(gl)\n  gl.texImage2D(gl.TEXTURE_2D, 0, format, width, height, 0, format, type, null)\n  return new Texture2D(gl, tex, width, height, format, type)\n}\n\nfunction createTextureDOM(gl, directData, width, height, format, type) {\n  var tex = initTexture(gl)\n  gl.texImage2D(gl.TEXTURE_2D, 0, format, format, type, directData)\n  return new Texture2D(gl, tex, width, height, format, type)\n}\n\n//Creates a texture from an ndarray\nfunction createTextureArray(gl, array) {\n  var dtype = array.dtype\n  var shape = array.shape.slice()\n  var maxSize = gl.getParameter(gl.MAX_TEXTURE_SIZE)\n  if(shape[0] < 0 || shape[0] > maxSize || shape[1] < 0 || shape[1] > maxSize) {\n    throw new Error('gl-texture2d: Invalid texture size')\n  }\n  var packed = isPacked(shape, array.stride.slice())\n  var type = 0\n  if(dtype === 'float32') {\n    type = gl.FLOAT\n  } else if(dtype === 'float64') {\n    type = gl.FLOAT\n    packed = false\n    dtype = 'float32'\n  } else if(dtype === 'uint8') {\n    type = gl.UNSIGNED_BYTE\n  } else {\n    type = gl.UNSIGNED_BYTE\n    packed = false\n    dtype = 'uint8'\n  }\n  var format = 0\n  if(shape.length === 2) {\n    format = gl.LUMINANCE\n    shape = [shape[0], shape[1], 1]\n    array = ndarray(array.data, shape, [array.stride[0], array.stride[1], 1], array.offset)\n  } else if(shape.length === 3) {\n    if(shape[2] === 1) {\n      format = gl.ALPHA\n    } else if(shape[2] === 2) {\n      format = gl.LUMINANCE_ALPHA\n    } else if(shape[2] === 3) {\n      format = gl.RGB\n    } else if(shape[2] === 4) {\n      format = gl.RGBA\n    } else {\n      throw new Error('gl-texture2d: Invalid shape for pixel coords')\n    }\n  } else {\n    throw new Error('gl-texture2d: Invalid shape for texture')\n  }\n  if(type === gl.FLOAT && !gl.getExtension('OES_texture_float')) {\n    type = gl.UNSIGNED_BYTE\n    packed = false\n  }\n  var buffer, buf_store\n  var size = array.size\n  if(!packed) {\n    var stride = [shape[2], shape[2]*shape[0], 1]\n    buf_store = pool.malloc(size, dtype)\n    var buf_array = ndarray(buf_store, shape, stride, 0)\n    if((dtype === 'float32' || dtype === 'float64') && type === gl.UNSIGNED_BYTE) {\n      convertFloatToUint8(buf_array, array)\n    } else {\n      ops.assign(buf_array, array)\n    }\n    buffer = buf_store.subarray(0, size)\n  } else if (array.offset === 0 && array.data.length === size) {\n    buffer = array.data\n  } else {\n    buffer = array.data.subarray(array.offset, array.offset + size)\n  }\n  var tex = initTexture(gl)\n  gl.texImage2D(gl.TEXTURE_2D, 0, format, shape[0], shape[1], 0, format, type, buffer)\n  if(!packed) {\n    pool.free(buf_store)\n  }\n  return new Texture2D(gl, tex, shape[0], shape[1], format, type)\n}\n\nfunction createTexture2D(gl) {\n  if(arguments.length <= 1) {\n    throw new Error('gl-texture2d: Missing arguments for texture2d constructor')\n  }\n  if(!linearTypes) {\n    lazyInitLinearTypes(gl)\n  }\n  if(typeof arguments[1] === 'number') {\n    return createTextureShape(gl, arguments[1], arguments[2], arguments[3]||gl.RGBA, arguments[4]||gl.UNSIGNED_BYTE)\n  }\n  if(Array.isArray(arguments[1])) {\n    return createTextureShape(gl, arguments[1][0]|0, arguments[1][1]|0, arguments[2]||gl.RGBA, arguments[3]||gl.UNSIGNED_BYTE)\n  }\n  if(typeof arguments[1] === 'object') {\n    var obj = arguments[1]\n    var directData = acceptTextureDOM(obj) ? obj : obj.raw\n    if (directData) {\n      return createTextureDOM(gl, directData, obj.width|0, obj.height|0, arguments[2]||gl.RGBA, arguments[3]||gl.UNSIGNED_BYTE)\n    } else if(obj.shape && obj.data && obj.stride) {\n      return createTextureArray(gl, obj)\n    }\n  }\n  throw new Error('gl-texture2d: Invalid arguments for texture2d constructor')\n}\n\n\n//# sourceURL=webpack://rmh_touch/./node_modules/gl-texture2d/texture.js?");

/***/ }),

/***/ "./node_modules/gl-transition/lib/index.js":
/*!*************************************************!*\
  !*** ./node_modules/gl-transition/lib/index.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _glShader = __webpack_require__(/*! gl-shader */ \"./node_modules/gl-shader/index.js\");\n\nvar _glShader2 = _interopRequireDefault(_glShader);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar VERT = \"attribute vec2 _p;\\nvarying vec2 _uv;\\nvoid main() {\\ngl_Position = vec4(_p,0.0,1.0);\\n_uv = vec2(0.5, 0.5) * (_p+vec2(1.0, 1.0));\\n}\";\n\n// these functions make a GLSL code that map the texture2D uv to preserve ratio for a given ${r} image ratio.\n// there are different modes:\nvar resizeModes = {\n  cover: function cover(r) {\n    return \".5+(uv-.5)*vec2(min(ratio/\" + r + \",1.),min(\" + r + \"/ratio,1.))\";\n  },\n  contain: function contain(r) {\n    return \".5+(uv-.5)*vec2(max(ratio/\" + r + \",1.),max(\" + r + \"/ratio,1.))\";\n  },\n  stretch: function stretch() {\n    return \"uv\";\n  }\n};\n\nvar makeFrag = function makeFrag(transitionGlsl, resizeMode) {\n  var r = resizeModes[resizeMode];\n  if (!r) throw new Error(\"invalid resizeMode=\" + resizeMode);\n  return \"precision highp float;varying vec2 _uv;uniform sampler2D from, to;uniform float progress, ratio, _fromR, _toR;vec4 getFromColor(vec2 uv){return texture2D(from,\" + r(\"_fromR\") + \");}vec4 getToColor(vec2 uv){return texture2D(to,\" + r(\"_toR\") + \");}\\n\" + transitionGlsl + \"\\nvoid main(){gl_FragColor=transition(_uv);}\";\n};\n\nexports.default = function (gl, transition) {\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n  var _resizeMode$options = _extends({ resizeMode: \"cover\" }, options),\n      resizeMode = _resizeMode$options.resizeMode;\n\n  var shader = (0, _glShader2.default)(gl, VERT, makeFrag(transition.glsl, resizeMode));\n  shader.bind();\n  shader.attributes._p.pointer();\n\n  return {\n    draw: function draw(progress, from, to) {\n      var width = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : gl.drawingBufferWidth;\n      var height = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : gl.drawingBufferHeight;\n      var params = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : {};\n\n      shader.bind();\n      shader.uniforms.ratio = width / height;\n      shader.uniforms.progress = progress;\n      shader.uniforms.from = from.bind(0);\n      shader.uniforms.to = to.bind(1);\n      shader.uniforms._fromR = from.shape[0] / from.shape[1];\n      shader.uniforms._toR = to.shape[0] / to.shape[1];\n      var unit = 2;\n      for (var _key in transition.paramsTypes) {\n        var value = _key in params ? params[_key] : transition.defaultParams[_key];\n        if (transition.paramsTypes[_key] === \"sampler2D\") {\n          if (!value) {\n            console.warn(\"uniform[\" + _key + \"]: A texture MUST be defined for uniform sampler2D of a texture\");\n          } else if (typeof value.bind !== \"function\") {\n            throw new Error(\"uniform[\" + _key + \"]: A gl-texture2d API-like object was expected\");\n          } else {\n            shader.uniforms[_key] = value.bind(unit++);\n          }\n        } else {\n          shader.uniforms[_key] = value;\n        }\n      }\n      gl.drawArrays(gl.TRIANGLES, 0, 3);\n    },\n    dispose: function dispose() {\n      shader.dispose();\n    }\n  };\n};\n\n//# sourceURL=webpack://rmh_touch/./node_modules/gl-transition/lib/index.js?");

/***/ }),

/***/ "./node_modules/gl-transitions/index.js":
/*!**********************************************!*\
  !*** ./node_modules/gl-transitions/index.js ***!
  \**********************************************/
/***/ ((module) => {

eval("module.exports=\n[{\"name\":\"Bounce\",\"paramsTypes\":{\"shadow_colour\":\"vec4\",\"shadow_height\":\"float\",\"bounces\":\"float\"},\"defaultParams\":{\"shadow_colour\":[0,0,0,0.6],\"shadow_height\":0.075,\"bounces\":3},\"glsl\":\"// Author: Adrian Purser\\n// License: MIT\\n\\nuniform vec4 shadow_colour; // = vec4(0.,0.,0.,.6)\\nuniform float shadow_height; // = 0.075\\nuniform float bounces; // = 3.0\\n\\nconst float PI = 3.14159265358;\\n\\nvec4 transition (vec2 uv) {\\n  float time = progress;\\n  float stime = sin(time * PI / 2.);\\n  float phase = time * PI * bounces;\\n  float y = (abs(cos(phase))) * (1.0 - stime);\\n  float d = uv.y - y;\\n  return mix(\\n    mix(\\n      getToColor(uv),\\n      shadow_colour,\\n      step(d, shadow_height) * (1. - mix(\\n        ((d / shadow_height) * shadow_colour.a) + (1.0 - shadow_colour.a),\\n        1.0,\\n        smoothstep(0.95, 1., progress) // fade-out the shadow at the end\\n      ))\\n    ),\\n    getFromColor(vec2(uv.x, uv.y + (1.0 - y))),\\n    step(d, 0.0)\\n  );\\n}\\n\",\"author\":\"Adrian Purser\",\"license\":\"MIT\",\"createdAt\":\"Fri, 10 Nov 2017 17:01:45 +0000\",\"updatedAt\":\"Sat, 11 Nov 2017 08:50:40 +0100\"},{\"name\":\"BowTieHorizontal\",\"paramsTypes\":{},\"defaultParams\":{},\"glsl\":\"// Author: huynx\\n// License: MIT\\n\\nvec2 bottom_left = vec2(0.0, 1.0);\\nvec2 bottom_right = vec2(1.0, 1.0);\\nvec2 top_left = vec2(0.0, 0.0);\\nvec2 top_right = vec2(1.0, 0.0);\\nvec2 center = vec2(0.5, 0.5);\\n\\nfloat check(vec2 p1, vec2 p2, vec2 p3)\\n{\\n  return (p1.x - p3.x) * (p2.y - p3.y) - (p2.x - p3.x) * (p1.y - p3.y);\\n}\\n\\nbool PointInTriangle (vec2 pt, vec2 p1, vec2 p2, vec2 p3)\\n{\\n    bool b1, b2, b3;\\n    b1 = check(pt, p1, p2) < 0.0;\\n    b2 = check(pt, p2, p3) < 0.0;\\n    b3 = check(pt, p3, p1) < 0.0;\\n    return ((b1 == b2) && (b2 == b3));\\n}\\n\\nbool in_left_triangle(vec2 p){\\n  vec2 vertex1, vertex2, vertex3;\\n  vertex1 = vec2(progress, 0.5);\\n  vertex2 = vec2(0.0, 0.5-progress);\\n  vertex3 = vec2(0.0, 0.5+progress);\\n  if (PointInTriangle(p, vertex1, vertex2, vertex3))\\n  {\\n    return true;\\n  }\\n  return false;\\n}\\n\\nbool in_right_triangle(vec2 p){\\n  vec2 vertex1, vertex2, vertex3;\\n  vertex1 = vec2(1.0-progress, 0.5);\\n  vertex2 = vec2(1.0, 0.5-progress);\\n  vertex3 = vec2(1.0, 0.5+progress);\\n  if (PointInTriangle(p, vertex1, vertex2, vertex3))\\n  {\\n    return true;\\n  }\\n  return false;\\n}\\n\\nfloat blur_edge(vec2 bot1, vec2 bot2, vec2 top, vec2 testPt)\\n{\\n  vec2 lineDir = bot1 - top;\\n  vec2 perpDir = vec2(lineDir.y, -lineDir.x);\\n  vec2 dirToPt1 = bot1 - testPt;\\n  float dist1 = abs(dot(normalize(perpDir), dirToPt1));\\n  \\n  lineDir = bot2 - top;\\n  perpDir = vec2(lineDir.y, -lineDir.x);\\n  dirToPt1 = bot2 - testPt;\\n  float min_dist = min(abs(dot(normalize(perpDir), dirToPt1)), dist1);\\n  \\n  if (min_dist < 0.005) {\\n    return min_dist / 0.005;\\n  }\\n  else  {\\n    return 1.0;\\n  };\\n}\\n\\n\\nvec4 transition (vec2 uv) {\\n  if (in_left_triangle(uv))\\n  {\\n    if (progress < 0.1)\\n    {\\n      return getFromColor(uv);\\n    }\\n    if (uv.x < 0.5)\\n    {\\n      vec2 vertex1 = vec2(progress, 0.5);\\n      vec2 vertex2 = vec2(0.0, 0.5-progress);\\n      vec2 vertex3 = vec2(0.0, 0.5+progress);\\n      return mix(\\n        getFromColor(uv),\\n        getToColor(uv),\\n        blur_edge(vertex2, vertex3, vertex1, uv)\\n      );\\n    }\\n    else\\n    {\\n      if (progress > 0.0)\\n      {\\n        return getToColor(uv);\\n      }\\n      else\\n      {\\n        return getFromColor(uv);\\n      }\\n    }    \\n  }\\n  else if (in_right_triangle(uv))\\n  {\\n    if (uv.x >= 0.5)\\n    {\\n      vec2 vertex1 = vec2(1.0-progress, 0.5);\\n      vec2 vertex2 = vec2(1.0, 0.5-progress);\\n      vec2 vertex3 = vec2(1.0, 0.5+progress);\\n      return mix(\\n        getFromColor(uv),\\n        getToColor(uv),\\n        blur_edge(vertex2, vertex3, vertex1, uv)\\n      );  \\n    }\\n    else\\n    {\\n      return getFromColor(uv);\\n    }\\n  }\\n  else {\\n    return getFromColor(uv);\\n  }\\n}\",\"author\":\"huynx\",\"license\":\"MIT\",\"createdAt\":\"Sat, 24 Mar 2018 12:54:26 +0100\",\"updatedAt\":\"Sat, 24 Mar 2018 12:54:26 +0100\"},{\"name\":\"BowTieVertical\",\"paramsTypes\":{},\"defaultParams\":{},\"glsl\":\"// Author: huynx\\r\\n// License: MIT\\r\\n\\r\\nfloat check(vec2 p1, vec2 p2, vec2 p3)\\r\\n{\\r\\n  return (p1.x - p3.x) * (p2.y - p3.y) - (p2.x - p3.x) * (p1.y - p3.y);\\r\\n}\\r\\n\\r\\nbool PointInTriangle (vec2 pt, vec2 p1, vec2 p2, vec2 p3)\\r\\n{\\r\\n    bool b1, b2, b3;\\r\\n    b1 = check(pt, p1, p2) < 0.0;\\r\\n    b2 = check(pt, p2, p3) < 0.0;\\r\\n    b3 = check(pt, p3, p1) < 0.0;\\r\\n    return ((b1 == b2) && (b2 == b3));\\r\\n}\\r\\n\\r\\nbool in_top_triangle(vec2 p){\\r\\n  vec2 vertex1, vertex2, vertex3;\\r\\n  vertex1 = vec2(0.5, progress);\\r\\n  vertex2 = vec2(0.5-progress, 0.0);\\r\\n  vertex3 = vec2(0.5+progress, 0.0);\\r\\n  if (PointInTriangle(p, vertex1, vertex2, vertex3))\\r\\n  {\\r\\n    return true;\\r\\n  }\\r\\n  return false;\\r\\n}\\r\\n\\r\\nbool in_bottom_triangle(vec2 p){\\r\\n  vec2 vertex1, vertex2, vertex3;\\r\\n  vertex1 = vec2(0.5, 1.0 - progress);\\r\\n  vertex2 = vec2(0.5-progress, 1.0);\\r\\n  vertex3 = vec2(0.5+progress, 1.0);\\r\\n  if (PointInTriangle(p, vertex1, vertex2, vertex3))\\r\\n  {\\r\\n    return true;\\r\\n  }\\r\\n  return false;\\r\\n}\\r\\n\\r\\nfloat blur_edge(vec2 bot1, vec2 bot2, vec2 top, vec2 testPt)\\r\\n{\\r\\n  vec2 lineDir = bot1 - top;\\r\\n  vec2 perpDir = vec2(lineDir.y, -lineDir.x);\\r\\n  vec2 dirToPt1 = bot1 - testPt;\\r\\n  float dist1 = abs(dot(normalize(perpDir), dirToPt1));\\r\\n  \\r\\n  lineDir = bot2 - top;\\r\\n  perpDir = vec2(lineDir.y, -lineDir.x);\\r\\n  dirToPt1 = bot2 - testPt;\\r\\n  float min_dist = min(abs(dot(normalize(perpDir), dirToPt1)), dist1);\\r\\n  \\r\\n  if (min_dist < 0.005) {\\r\\n    return min_dist / 0.005;\\r\\n  }\\r\\n  else  {\\r\\n    return 1.0;\\r\\n  };\\r\\n}\\r\\n\\r\\n\\r\\nvec4 transition (vec2 uv) {\\r\\n  if (in_top_triangle(uv))\\r\\n  {\\r\\n    if (progress < 0.1)\\r\\n    {\\r\\n      return getFromColor(uv);\\r\\n    }\\r\\n    if (uv.y < 0.5)\\r\\n    {\\r\\n      vec2 vertex1 = vec2(0.5, progress);\\r\\n      vec2 vertex2 = vec2(0.5-progress, 0.0);\\r\\n      vec2 vertex3 = vec2(0.5+progress, 0.0);\\r\\n      return mix(\\r\\n        getFromColor(uv),\\r\\n        getToColor(uv),\\r\\n        blur_edge(vertex2, vertex3, vertex1, uv)\\r\\n      );\\r\\n    }\\r\\n    else\\r\\n    {\\r\\n      if (progress > 0.0)\\r\\n      {\\r\\n        return getToColor(uv);\\r\\n      }\\r\\n      else\\r\\n      {\\r\\n        return getFromColor(uv);\\r\\n      }\\r\\n    }    \\r\\n  }\\r\\n  else if (in_bottom_triangle(uv))\\r\\n  {\\r\\n    if (uv.y >= 0.5)\\r\\n    {\\r\\n      vec2 vertex1 = vec2(0.5, 1.0-progress);\\r\\n      vec2 vertex2 = vec2(0.5-progress, 1.0);\\r\\n      vec2 vertex3 = vec2(0.5+progress, 1.0);\\r\\n      return mix(\\r\\n        getFromColor(uv),\\r\\n        getToColor(uv),\\r\\n        blur_edge(vertex2, vertex3, vertex1, uv)\\r\\n      );  \\r\\n    }\\r\\n    else\\r\\n    {\\r\\n      return getFromColor(uv);\\r\\n    }\\r\\n  }\\r\\n  else {\\r\\n    return getFromColor(uv);\\r\\n  }\\r\\n}\",\"author\":\"huynx\",\"license\":\"MIT\",\"createdAt\":\"Tue, 27 Mar 2018 10:07:54 +0700\",\"updatedAt\":\"Tue, 27 Mar 2018 10:07:54 +0700\"},{\"name\":\"ButterflyWaveScrawler\",\"paramsTypes\":{\"amplitude\":\"float\",\"waves\":\"float\",\"colorSeparation\":\"float\"},\"defaultParams\":{\"amplitude\":1,\"waves\":30,\"colorSeparation\":0.3},\"glsl\":\"// Author: mandubian\\n// License: MIT\\nuniform float amplitude; // = 1.0\\nuniform float waves; // = 30.0\\nuniform float colorSeparation; // = 0.3\\nfloat PI = 3.14159265358979323846264;\\nfloat compute(vec2 p, float progress, vec2 center) {\\nvec2 o = p*sin(progress * amplitude)-center;\\n// horizontal vector\\nvec2 h = vec2(1., 0.);\\n// butterfly polar function (don't ask me why this one :))\\nfloat theta = acos(dot(o, h)) * waves;\\nreturn (exp(cos(theta)) - 2.*cos(4.*theta) + pow(sin((2.*theta - PI) / 24.), 5.)) / 10.;\\n}\\nvec4 transition(vec2 uv) {\\n  vec2 p = uv.xy / vec2(1.0).xy;\\n  float inv = 1. - progress;\\n  vec2 dir = p - vec2(.5);\\n  float dist = length(dir);\\n  float disp = compute(p, progress, vec2(0.5, 0.5)) ;\\n  vec4 texTo = getToColor(p + inv*disp);\\n  vec4 texFrom = vec4(\\n  getFromColor(p + progress*disp*(1.0 - colorSeparation)).r,\\n  getFromColor(p + progress*disp).g,\\n  getFromColor(p + progress*disp*(1.0 + colorSeparation)).b,\\n  1.0);\\n  return texTo*progress + texFrom*inv;\\n}\\n\",\"author\":\"mandubian\",\"license\":\"MIT\",\"createdAt\":\"Thu, 1 Jun 2017 11:47:17 +0200\",\"updatedAt\":\"Thu, 1 Jun 2017 11:47:17 +0200\"},{\"name\":\"CircleCrop\",\"paramsTypes\":{\"bgcolor\":\"vec4\"},\"defaultParams\":{\"bgcolor\":[0,0,0,1]},\"glsl\":\"// License: MIT\\n// Author: fkuteken\\n// ported by gre from https://gist.github.com/fkuteken/f63e3009c1143950dee9063c3b83fb88\\n\\nuniform vec4 bgcolor; // = vec4(0.0, 0.0, 0.0, 1.0)\\n\\nvec2 ratio2 = vec2(1.0, 1.0 / ratio);\\nfloat s = pow(2.0 * abs(progress - 0.5), 3.0);\\n\\nvec4 transition(vec2 p) {\\n  float dist = length((vec2(p) - 0.5) * ratio2);\\n  return mix(\\n    progress < 0.5 ? getFromColor(p) : getToColor(p), // branching is ok here as we statically depend on progress uniform (branching won't change over pixels)\\n    bgcolor,\\n    step(s, dist)\\n  );\\n}\\n\",\"license\":\"MIT\",\"author\":\"fkuteken\",\"createdAt\":\"Mon, 12 Jun 2017 12:52:34 +0800\",\"updatedAt\":\"Mon, 12 Jun 2017 12:52:34 +0800\"},{\"name\":\"ColourDistance\",\"paramsTypes\":{\"power\":\"float\"},\"defaultParams\":{\"power\":5},\"glsl\":\"// License: MIT\\n// Author: P-Seebauer\\n// ported by gre from https://gist.github.com/P-Seebauer/2a5fa2f77c883dd661f9\\n\\nuniform float power; // = 5.0\\n\\nvec4 transition(vec2 p) {\\n  vec4 fTex = getFromColor(p);\\n  vec4 tTex = getToColor(p);\\n  float m = step(distance(fTex, tTex), progress);\\n  return mix(\\n    mix(fTex, tTex, m),\\n    tTex,\\n    pow(progress, power)\\n  );\\n}\\n\",\"license\":\"MIT\",\"author\":\"P-Seebauer\",\"createdAt\":\"Mon, 12 Jun 2017 12:57:42 +0800\",\"updatedAt\":\"Mon, 12 Jun 2017 12:57:42 +0800\"},{\"name\":\"CrazyParametricFun\",\"paramsTypes\":{\"a\":\"float\",\"b\":\"float\",\"amplitude\":\"float\",\"smoothness\":\"float\"},\"defaultParams\":{\"a\":4,\"b\":1,\"amplitude\":120,\"smoothness\":0.1},\"glsl\":\"// Author: mandubian\\n// License: MIT\\n\\nuniform float a; // = 4\\nuniform float b; // = 1\\nuniform float amplitude; // = 120\\nuniform float smoothness; // = 0.1\\n\\nvec4 transition(vec2 uv) {\\n  vec2 p = uv.xy / vec2(1.0).xy;\\n  vec2 dir = p - vec2(.5);\\n  float dist = length(dir);\\n  float x = (a - b) * cos(progress) + b * cos(progress * ((a / b) - 1.) );\\n  float y = (a - b) * sin(progress) - b * sin(progress * ((a / b) - 1.));\\n  vec2 offset = dir * vec2(sin(progress  * dist * amplitude * x), sin(progress * dist * amplitude * y)) / smoothness;\\n  return mix(getFromColor(p + offset), getToColor(p), smoothstep(0.2, 1.0, progress));\\n}\\n\",\"author\":\"mandubian\",\"license\":\"MIT\",\"createdAt\":\"Thu, 1 Jun 2017 13:03:12 +0200\",\"updatedAt\":\"Thu, 1 Jun 2017 13:03:12 +0200\"},{\"name\":\"CrossZoom\",\"paramsTypes\":{\"strength\":\"float\"},\"defaultParams\":{\"strength\":0.4},\"glsl\":\"// License: MIT\\n// Author: rectalogic\\n// ported by gre from https://gist.github.com/rectalogic/b86b90161503a0023231\\n\\n// Converted from https://github.com/rectalogic/rendermix-basic-effects/blob/master/assets/com/rendermix/CrossZoom/CrossZoom.frag\\n// Which is based on https://github.com/evanw/glfx.js/blob/master/src/filters/blur/zoomblur.js\\n// With additional easing functions from https://github.com/rectalogic/rendermix-basic-effects/blob/master/assets/com/rendermix/Easing/Easing.glsllib\\n\\nuniform float strength; // = 0.4\\n\\nconst float PI = 3.141592653589793;\\n\\nfloat Linear_ease(in float begin, in float change, in float duration, in float time) {\\n    return change * time / duration + begin;\\n}\\n\\nfloat Exponential_easeInOut(in float begin, in float change, in float duration, in float time) {\\n    if (time == 0.0)\\n        return begin;\\n    else if (time == duration)\\n        return begin + change;\\n    time = time / (duration / 2.0);\\n    if (time < 1.0)\\n        return change / 2.0 * pow(2.0, 10.0 * (time - 1.0)) + begin;\\n    return change / 2.0 * (-pow(2.0, -10.0 * (time - 1.0)) + 2.0) + begin;\\n}\\n\\nfloat Sinusoidal_easeInOut(in float begin, in float change, in float duration, in float time) {\\n    return -change / 2.0 * (cos(PI * time / duration) - 1.0) + begin;\\n}\\n\\nfloat rand (vec2 co) {\\n  return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\\n}\\n\\nvec3 crossFade(in vec2 uv, in float dissolve) {\\n    return mix(getFromColor(uv).rgb, getToColor(uv).rgb, dissolve);\\n}\\n\\nvec4 transition(vec2 uv) {\\n    vec2 texCoord = uv.xy / vec2(1.0).xy;\\n\\n    // Linear interpolate center across center half of the image\\n    vec2 center = vec2(Linear_ease(0.25, 0.5, 1.0, progress), 0.5);\\n    float dissolve = Exponential_easeInOut(0.0, 1.0, 1.0, progress);\\n\\n    // Mirrored sinusoidal loop. 0->strength then strength->0\\n    float strength = Sinusoidal_easeInOut(0.0, strength, 0.5, progress);\\n\\n    vec3 color = vec3(0.0);\\n    float total = 0.0;\\n    vec2 toCenter = center - texCoord;\\n\\n    /* randomize the lookup values to hide the fixed number of samples */\\n    float offset = rand(uv);\\n\\n    for (float t = 0.0; t <= 40.0; t++) {\\n        float percent = (t + offset) / 40.0;\\n        float weight = 4.0 * (percent - percent * percent);\\n        color += crossFade(texCoord + toCenter * percent * strength, dissolve) * weight;\\n        total += weight;\\n    }\\n    return vec4(color / total, 1.0);\\n}\\n\",\"license\":\"MIT\",\"author\":\"rectalogic\",\"createdAt\":\"Mon, 12 Jun 2017 12:33:07 +0800\",\"updatedAt\":\"Mon, 12 Jun 2017 12:33:07 +0800\"},{\"name\":\"Directional\",\"paramsTypes\":{\"direction\":\"vec2\"},\"defaultParams\":{\"direction\":[0,1]},\"glsl\":\"// Author: Gaëtan Renaudeau\\n// License: MIT\\n\\nuniform vec2 direction; // = vec2(0.0, 1.0)\\n\\nvec4 transition (vec2 uv) {\\n  vec2 p = uv + progress * sign(direction);\\n  vec2 f = fract(p);\\n  return mix(\\n    getToColor(f),\\n    getFromColor(f),\\n    step(0.0, p.y) * step(p.y, 1.0) * step(0.0, p.x) * step(p.x, 1.0)\\n  );\\n}\\n\",\"author\":\"Gaëtan Renaudeau\",\"license\":\"MIT\",\"createdAt\":\"Thu, 19 Apr 2018 12:20:29 +0200\",\"updatedAt\":\"Thu, 19 Apr 2018 12:20:29 +0200\"},{\"name\":\"DoomScreenTransition\",\"paramsTypes\":{\"bars\":\"int\",\"amplitude\":\"float\",\"noise\":\"float\",\"frequency\":\"float\",\"dripScale\":\"float\"},\"defaultParams\":{\"bars\":30,\"amplitude\":2,\"noise\":0.1,\"frequency\":0.5,\"dripScale\":0.5},\"glsl\":\"// Author: Zeh Fernando\\n// License: MIT\\n\\n\\n// Transition parameters --------\\n\\n// Number of total bars/columns\\nuniform int bars; // = 30\\n\\n// Multiplier for speed ratio. 0 = no variation when going down, higher = some elements go much faster\\nuniform float amplitude; // = 2\\n\\n// Further variations in speed. 0 = no noise, 1 = super noisy (ignore frequency)\\nuniform float noise; // = 0.1\\n\\n// Speed variation horizontally. the bigger the value, the shorter the waves\\nuniform float frequency; // = 0.5\\n\\n// How much the bars seem to \\\"run\\\" from the middle of the screen first (sticking to the sides). 0 = no drip, 1 = curved drip\\nuniform float dripScale; // = 0.5\\n\\n\\n// The code proper --------\\n\\nfloat rand(int num) {\\n  return fract(mod(float(num) * 67123.313, 12.0) * sin(float(num) * 10.3) * cos(float(num)));\\n}\\n\\nfloat wave(int num) {\\n  float fn = float(num) * frequency * 0.1 * float(bars);\\n  return cos(fn * 0.5) * cos(fn * 0.13) * sin((fn+10.0) * 0.3) / 2.0 + 0.5;\\n}\\n\\nfloat drip(int num) {\\n  return sin(float(num) / float(bars - 1) * 3.141592) * dripScale;\\n}\\n\\nfloat pos(int num) {\\n  return (noise == 0.0 ? wave(num) : mix(wave(num), rand(num), noise)) + (dripScale == 0.0 ? 0.0 : drip(num));\\n}\\n\\nvec4 transition(vec2 uv) {\\n  int bar = int(uv.x * (float(bars)));\\n  float scale = 1.0 + pos(bar) * amplitude;\\n  float phase = progress * scale;\\n  float posY = uv.y / vec2(1.0).y;\\n  vec2 p;\\n  vec4 c;\\n  if (phase + posY < 1.0) {\\n    p = vec2(uv.x, uv.y + mix(0.0, vec2(1.0).y, phase)) / vec2(1.0).xy;\\n    c = getFromColor(p);\\n  } else {\\n    p = uv.xy / vec2(1.0).xy;\\n    c = getToColor(p);\\n  }\\n\\n  // Finally, apply the color\\n  return c;\\n}\\n\",\"author\":\"Zeh Fernando\",\"license\":\"MIT\",\"createdAt\":\"Tue, 30 May 2017 09:39:09 -0700\",\"updatedAt\":\"Tue, 30 May 2017 09:39:09 -0700\"},{\"name\":\"Dreamy\",\"paramsTypes\":{},\"defaultParams\":{},\"glsl\":\"// Author: mikolalysenko\\n// License: MIT\\n\\nvec2 offset(float progress, float x, float theta) {\\n  float phase = progress*progress + progress + theta;\\n  float shifty = 0.03*progress*cos(10.0*(progress+x));\\n  return vec2(0, shifty);\\n}\\nvec4 transition(vec2 p) {\\n  return mix(getFromColor(p + offset(progress, p.x, 0.0)), getToColor(p + offset(1.0-progress, p.x, 3.14)), progress);\\n}\\n\",\"author\":\"mikolalysenko\",\"license\":\"MIT\",\"createdAt\":\"Mon, 12 Jun 2017 12:27:38 +0800\",\"updatedAt\":\"Mon, 12 Jun 2017 12:27:38 +0800\"},{\"name\":\"DreamyZoom\",\"paramsTypes\":{\"rotation\":\"float\",\"scale\":\"float\"},\"defaultParams\":{\"rotation\":6,\"scale\":1.2},\"glsl\":\"// Author: Zeh Fernando\\n// License: MIT\\n\\n// Definitions --------\\n#define DEG2RAD 0.03926990816987241548078304229099 // 1/180*PI\\n\\n\\n// Transition parameters --------\\n\\n// In degrees\\nuniform float rotation; // = 6\\n\\n// Multiplier\\nuniform float scale; // = 1.2\\n\\n\\n// The code proper --------\\n\\nvec4 transition(vec2 uv) {\\n  // Massage parameters\\n  float phase = progress < 0.5 ? progress * 2.0 : (progress - 0.5) * 2.0;\\n  float angleOffset = progress < 0.5 ? mix(0.0, rotation * DEG2RAD, phase) : mix(-rotation * DEG2RAD, 0.0, phase);\\n  float newScale = progress < 0.5 ? mix(1.0, scale, phase) : mix(scale, 1.0, phase);\\n  \\n  vec2 center = vec2(0, 0);\\n\\n  // Calculate the source point\\n  vec2 assumedCenter = vec2(0.5, 0.5);\\n  vec2 p = (uv.xy - vec2(0.5, 0.5)) / newScale * vec2(ratio, 1.0);\\n\\n  // This can probably be optimized (with distance())\\n  float angle = atan(p.y, p.x) + angleOffset;\\n  float dist = distance(center, p);\\n  p.x = cos(angle) * dist / ratio + 0.5;\\n  p.y = sin(angle) * dist + 0.5;\\n  vec4 c = progress < 0.5 ? getFromColor(p) : getToColor(p);\\n\\n  // Finally, apply the color\\n  return c + (progress < 0.5 ? mix(0.0, 1.0, phase) : mix(1.0, 0.0, phase));\\n}\\n\",\"author\":\"Zeh Fernando\",\"license\":\"MIT\",\"createdAt\":\"Tue, 30 May 2017 10:44:06 -0700\",\"updatedAt\":\"Tue, 30 May 2017 10:44:06 -0700\"},{\"name\":\"GlitchDisplace\",\"paramsTypes\":{},\"defaultParams\":{},\"glsl\":\"// Author: Matt DesLauriers\\n// License: MIT\\n\\nhighp float random(vec2 co)\\n{\\n    highp float a = 12.9898;\\n    highp float b = 78.233;\\n    highp float c = 43758.5453;\\n    highp float dt= dot(co.xy ,vec2(a,b));\\n    highp float sn= mod(dt,3.14);\\n    return fract(sin(sn) * c);\\n}\\nfloat voronoi( in vec2 x ) {\\n    vec2 p = floor( x );\\n    vec2 f = fract( x );\\n    float res = 8.0;\\n    for( float j=-1.; j<=1.; j++ )\\n    for( float i=-1.; i<=1.; i++ ) {\\n        vec2  b = vec2( i, j );\\n        vec2  r = b - f + random( p + b );\\n        float d = dot( r, r );\\n        res = min( res, d );\\n    }\\n    return sqrt( res );\\n}\\n\\nvec2 displace(vec4 tex, vec2 texCoord, float dotDepth, float textureDepth, float strength) {\\n    float b = voronoi(.003 * texCoord + 2.0);\\n    float g = voronoi(0.2 * texCoord);\\n    float r = voronoi(texCoord - 1.0);\\n    vec4 dt = tex * 1.0;\\n    vec4 dis = dt * dotDepth + 1.0 - tex * textureDepth;\\n\\n    dis.x = dis.x - 1.0 + textureDepth*dotDepth;\\n    dis.y = dis.y - 1.0 + textureDepth*dotDepth;\\n    dis.x *= strength;\\n    dis.y *= strength;\\n    vec2 res_uv = texCoord ;\\n    res_uv.x = res_uv.x + dis.x - 0.0;\\n    res_uv.y = res_uv.y + dis.y;\\n    return res_uv;\\n}\\n\\nfloat ease1(float t) {\\n  return t == 0.0 || t == 1.0\\n    ? t\\n    : t < 0.5\\n      ? +0.5 * pow(2.0, (20.0 * t) - 10.0)\\n      : -0.5 * pow(2.0, 10.0 - (t * 20.0)) + 1.0;\\n}\\nfloat ease2(float t) {\\n  return t == 1.0 ? t : 1.0 - pow(2.0, -10.0 * t);\\n}\\n\\n\\n\\nvec4 transition(vec2 uv) {\\n  vec2 p = uv.xy / vec2(1.0).xy;\\n  vec4 color1 = getFromColor(p);\\n  vec4 color2 = getToColor(p);\\n  vec2 disp = displace(color1, p, 0.33, 0.7, 1.0-ease1(progress));\\n  vec2 disp2 = displace(color2, p, 0.33, 0.5, ease2(progress));\\n  vec4 dColor1 = getToColor(disp);\\n  vec4 dColor2 = getFromColor(disp2);\\n  float val = ease1(progress);\\n  vec3 gray = vec3(dot(min(dColor2, dColor1).rgb, vec3(0.299, 0.587, 0.114)));\\n  dColor2 = vec4(gray, 1.0);\\n  dColor2 *= 2.0;\\n  color1 = mix(color1, dColor2, smoothstep(0.0, 0.5, progress));\\n  color2 = mix(color2, dColor1, smoothstep(1.0, 0.5, progress));\\n  return mix(color1, color2, val);\\n  //gl_FragColor = mix(gl_FragColor, dColor, smoothstep(0.0, 0.5, progress));\\n  \\n   //gl_FragColor = mix(texture2D(from, p), texture2D(to, p), progress);\\n}\\n\",\"author\":\"Matt DesLauriers\",\"license\":\"MIT\",\"createdAt\":\"Tue, 30 May 2017 14:53:04 -0400\",\"updatedAt\":\"Tue, 30 May 2017 14:53:04 -0400\"},{\"name\":\"GlitchMemories\",\"paramsTypes\":{},\"defaultParams\":{},\"glsl\":\"// author: Gunnar Roth\\n// based on work from natewave\\n// license: MIT\\nvec4 transition(vec2 p) {\\n  vec2 block = floor(p.xy / vec2(16));\\n  vec2 uv_noise = block / vec2(64);\\n  uv_noise += floor(vec2(progress) * vec2(1200.0, 3500.0)) / vec2(64);\\n  vec2 dist = progress > 0.0 ? (fract(uv_noise) - 0.5) * 0.3 *(1.0 -progress) : vec2(0.0);\\n  vec2 red = p + dist * 0.2;\\n  vec2 green = p + dist * .3;\\n  vec2 blue = p + dist * .5;\\n\\n  return vec4(mix(getFromColor(red), getToColor(red), progress).r,mix(getFromColor(green), getToColor(green), progress).g,mix(getFromColor(blue), getToColor(blue), progress).b,1.0);\\n}\\n\\n\",\"author\":\"Gunnar Roth\",\"license\":\"MIT\",\"createdAt\":\"Wed, 21 Feb 2018 00:52:15 +0100\",\"updatedAt\":\"Wed, 21 Feb 2018 19:32:02 +0100\"},{\"name\":\"GridFlip\",\"paramsTypes\":{\"size\":\"ivec2\",\"pause\":\"float\",\"dividerWidth\":\"float\",\"bgcolor\":\"vec4\",\"randomness\":\"float\"},\"defaultParams\":{\"size\":[4,4],\"pause\":0.1,\"dividerWidth\":0.05,\"bgcolor\":[0,0,0,1],\"randomness\":0.1},\"glsl\":\"// License: MIT\\n// Author: TimDonselaar\\n// ported by gre from https://gist.github.com/TimDonselaar/9bcd1c4b5934ba60087bdb55c2ea92e5\\n\\nuniform ivec2 size; // = ivec2(4)\\nuniform float pause; // = 0.1\\nuniform float dividerWidth; // = 0.05\\nuniform vec4 bgcolor; // = vec4(0.0, 0.0, 0.0, 1.0)\\nuniform float randomness; // = 0.1\\n \\nfloat rand (vec2 co) {\\n  return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\\n}\\n\\nfloat getDelta(vec2 p) {\\n  vec2 rectanglePos = floor(vec2(size) * p);\\n  vec2 rectangleSize = vec2(1.0 / vec2(size).x, 1.0 / vec2(size).y);\\n  float top = rectangleSize.y * (rectanglePos.y + 1.0);\\n  float bottom = rectangleSize.y * rectanglePos.y;\\n  float left = rectangleSize.x * rectanglePos.x;\\n  float right = rectangleSize.x * (rectanglePos.x + 1.0);\\n  float minX = min(abs(p.x - left), abs(p.x - right));\\n  float minY = min(abs(p.y - top), abs(p.y - bottom));\\n  return min(minX, minY);\\n}\\n\\nfloat getDividerSize() {\\n  vec2 rectangleSize = vec2(1.0 / vec2(size).x, 1.0 / vec2(size).y);\\n  return min(rectangleSize.x, rectangleSize.y) * dividerWidth;\\n}\\n\\nvec4 transition(vec2 p) {\\n  if(progress < pause) {\\n    float currentProg = progress / pause;\\n    float a = 1.0;\\n    if(getDelta(p) < getDividerSize()) {\\n      a = 1.0 - currentProg;\\n    }\\n    return mix(bgcolor, getFromColor(p), a);\\n  }\\n  else if(progress < 1.0 - pause){\\n    if(getDelta(p) < getDividerSize()) {\\n      return bgcolor;\\n    } else {\\n      float currentProg = (progress - pause) / (1.0 - pause * 2.0);\\n      vec2 q = p;\\n      vec2 rectanglePos = floor(vec2(size) * q);\\n      \\n      float r = rand(rectanglePos) - randomness;\\n      float cp = smoothstep(0.0, 1.0 - r, currentProg);\\n    \\n      float rectangleSize = 1.0 / vec2(size).x;\\n      float delta = rectanglePos.x * rectangleSize;\\n      float offset = rectangleSize / 2.0 + delta;\\n      \\n      p.x = (p.x - offset)/abs(cp - 0.5)*0.5 + offset;\\n      vec4 a = getFromColor(p);\\n      vec4 b = getToColor(p);\\n      \\n      float s = step(abs(vec2(size).x * (q.x - delta) - 0.5), abs(cp - 0.5));\\n      return mix(bgcolor, mix(b, a, step(cp, 0.5)), s);\\n    }\\n  }\\n  else {\\n    float currentProg = (progress - 1.0 + pause) / pause;\\n    float a = 1.0;\\n    if(getDelta(p) < getDividerSize()) {\\n      a = currentProg;\\n    }\\n    return mix(bgcolor, getToColor(p), a);\\n  }\\n}\\n\",\"license\":\"MIT\",\"author\":\"TimDonselaar\",\"createdAt\":\"Mon, 12 Jun 2017 11:32:51 +0800\",\"updatedAt\":\"Mon, 12 Jun 2017 11:32:51 +0800\"},{\"name\":\"InvertedPageCurl\",\"paramsTypes\":{},\"defaultParams\":{},\"glsl\":\"// author: Hewlett-Packard\\n// license: BSD 3 Clause\\n// Adapted by Sergey Kosarevsky from:\\n// http://rectalogic.github.io/webvfx/examples_2transition-shader-pagecurl_8html-example.html\\n\\n/*\\nCopyright (c) 2010 Hewlett-Packard Development Company, L.P. All rights reserved.\\n\\nRedistribution and use in source and binary forms, with or without\\nmodification, are permitted provided that the following conditions are\\nmet:\\n\\n   * Redistributions of source code must retain the above copyright\\n     notice, this list of conditions and the following disclaimer.\\n   * Redistributions in binary form must reproduce the above\\n     copyright notice, this list of conditions and the following disclaimer\\n     in the documentation and/or other materials provided with the\\n     distribution.\\n   * Neither the name of Hewlett-Packard nor the names of its\\n     contributors may be used to endorse or promote products derived from\\n     this software without specific prior written permission.\\n\\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\\n\\\"AS IS\\\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\\nLIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\\nA PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\\nOWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\\nSPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\\nLIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\\nDATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\\nTHEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\\nin vec2 texCoord;\\n*/\\n\\nconst float MIN_AMOUNT = -0.16;\\nconst float MAX_AMOUNT = 1.5;\\nfloat amount = progress * (MAX_AMOUNT - MIN_AMOUNT) + MIN_AMOUNT;\\n\\nconst float PI = 3.141592653589793;\\n\\nconst float scale = 512.0;\\nconst float sharpness = 3.0;\\n\\nfloat cylinderCenter = amount;\\n// 360 degrees * amount\\nfloat cylinderAngle = 2.0 * PI * amount;\\n\\nconst float cylinderRadius = 1.0 / PI / 2.0;\\n\\nvec3 hitPoint(float hitAngle, float yc, vec3 point, mat3 rrotation)\\n{\\n        float hitPoint = hitAngle / (2.0 * PI);\\n        point.y = hitPoint;\\n        return rrotation * point;\\n}\\n\\nvec4 antiAlias(vec4 color1, vec4 color2, float distanc)\\n{\\n        distanc *= scale;\\n        if (distanc < 0.0) return color2;\\n        if (distanc > 2.0) return color1;\\n        float dd = pow(1.0 - distanc / 2.0, sharpness);\\n        return ((color2 - color1) * dd) + color1;\\n}\\n\\nfloat distanceToEdge(vec3 point)\\n{\\n        float dx = abs(point.x > 0.5 ? 1.0 - point.x : point.x);\\n        float dy = abs(point.y > 0.5 ? 1.0 - point.y : point.y);\\n        if (point.x < 0.0) dx = -point.x;\\n        if (point.x > 1.0) dx = point.x - 1.0;\\n        if (point.y < 0.0) dy = -point.y;\\n        if (point.y > 1.0) dy = point.y - 1.0;\\n        if ((point.x < 0.0 || point.x > 1.0) && (point.y < 0.0 || point.y > 1.0)) return sqrt(dx * dx + dy * dy);\\n        return min(dx, dy);\\n}\\n\\nvec4 seeThrough(float yc, vec2 p, mat3 rotation, mat3 rrotation)\\n{\\n        float hitAngle = PI - (acos(yc / cylinderRadius) - cylinderAngle);\\n        vec3 point = hitPoint(hitAngle, yc, rotation * vec3(p, 1.0), rrotation);\\n        if (yc <= 0.0 && (point.x < 0.0 || point.y < 0.0 || point.x > 1.0 || point.y > 1.0))\\n        {\\n            return getToColor(p);\\n        }\\n\\n        if (yc > 0.0) return getFromColor(p);\\n\\n        vec4 color = getFromColor(point.xy);\\n        vec4 tcolor = vec4(0.0);\\n\\n        return antiAlias(color, tcolor, distanceToEdge(point));\\n}\\n\\nvec4 seeThroughWithShadow(float yc, vec2 p, vec3 point, mat3 rotation, mat3 rrotation)\\n{\\n        float shadow = distanceToEdge(point) * 30.0;\\n        shadow = (1.0 - shadow) / 3.0;\\n\\n        if (shadow < 0.0) shadow = 0.0; else shadow *= amount;\\n\\n        vec4 shadowColor = seeThrough(yc, p, rotation, rrotation);\\n        shadowColor.r -= shadow;\\n        shadowColor.g -= shadow;\\n        shadowColor.b -= shadow;\\n\\n        return shadowColor;\\n}\\n\\nvec4 backside(float yc, vec3 point)\\n{\\n        vec4 color = getFromColor(point.xy);\\n        float gray = (color.r + color.b + color.g) / 15.0;\\n        gray += (8.0 / 10.0) * (pow(1.0 - abs(yc / cylinderRadius), 2.0 / 10.0) / 2.0 + (5.0 / 10.0));\\n        color.rgb = vec3(gray);\\n        return color;\\n}\\n\\nvec4 behindSurface(vec2 p, float yc, vec3 point, mat3 rrotation)\\n{\\n        float shado = (1.0 - ((-cylinderRadius - yc) / amount * 7.0)) / 6.0;\\n        shado *= 1.0 - abs(point.x - 0.5);\\n\\n        yc = (-cylinderRadius - cylinderRadius - yc);\\n\\n        float hitAngle = (acos(yc / cylinderRadius) + cylinderAngle) - PI;\\n        point = hitPoint(hitAngle, yc, point, rrotation);\\n\\n        if (yc < 0.0 && point.x >= 0.0 && point.y >= 0.0 && point.x <= 1.0 && point.y <= 1.0 && (hitAngle < PI || amount > 0.5))\\n        {\\n                shado = 1.0 - (sqrt(pow(point.x - 0.5, 2.0) + pow(point.y - 0.5, 2.0)) / (71.0 / 100.0));\\n                shado *= pow(-yc / cylinderRadius, 3.0);\\n                shado *= 0.5;\\n        }\\n        else\\n        {\\n                shado = 0.0;\\n        }\\n        return vec4(getToColor(p).rgb - shado, 1.0);\\n}\\n\\nvec4 transition(vec2 p) {\\n\\n  const float angle = 100.0 * PI / 180.0;\\n        float c = cos(-angle);\\n        float s = sin(-angle);\\n\\n        mat3 rotation = mat3( c, s, 0,\\n                                                                -s, c, 0,\\n                                                                -0.801, 0.8900, 1\\n                                                                );\\n        c = cos(angle);\\n        s = sin(angle);\\n\\n        mat3 rrotation = mat3(\\tc, s, 0,\\n                                                                        -s, c, 0,\\n                                                                        0.98500, 0.985, 1\\n                                                                );\\n\\n        vec3 point = rotation * vec3(p, 1.0);\\n\\n        float yc = point.y - cylinderCenter;\\n\\n        if (yc < -cylinderRadius)\\n        {\\n                // Behind surface\\n                return behindSurface(p,yc, point, rrotation);\\n        }\\n\\n        if (yc > cylinderRadius)\\n        {\\n                // Flat surface\\n                return getFromColor(p);\\n        }\\n\\n        float hitAngle = (acos(yc / cylinderRadius) + cylinderAngle) - PI;\\n\\n        float hitAngleMod = mod(hitAngle, 2.0 * PI);\\n        if ((hitAngleMod > PI && amount < 0.5) || (hitAngleMod > PI/2.0 && amount < 0.0))\\n        {\\n                return seeThrough(yc, p, rotation, rrotation);\\n        }\\n\\n        point = hitPoint(hitAngle, yc, point, rrotation);\\n\\n        if (point.x < 0.0 || point.y < 0.0 || point.x > 1.0 || point.y > 1.0)\\n        {\\n                return seeThroughWithShadow(yc, p, point, rotation, rrotation);\\n        }\\n\\n        vec4 color = backside(yc, point);\\n\\n        vec4 otherColor;\\n        if (yc < 0.0)\\n        {\\n                float shado = 1.0 - (sqrt(pow(point.x - 0.5, 2.0) + pow(point.y - 0.5, 2.0)) / 0.71);\\n                shado *= pow(-yc / cylinderRadius, 3.0);\\n                shado *= 0.5;\\n                otherColor = vec4(0.0, 0.0, 0.0, shado);\\n        }\\n        else\\n        {\\n                otherColor = getFromColor(p);\\n        }\\n\\n        color = antiAlias(color, otherColor, cylinderRadius - abs(yc));\\n\\n        vec4 cl = seeThroughWithShadow(yc, p, point, rotation, rrotation);\\n        float dist = distanceToEdge(point);\\n\\n        return antiAlias(color, cl, dist);\\n}\\n\",\"author\":\"Hewlett-Packard\",\"license\":\"BSD 3 Clause\",\"createdAt\":\"Wed, 21 Feb 2018 01:13:49 +0100\",\"updatedAt\":\"Wed, 21 Feb 2018 16:00:02 +0100\"},{\"name\":\"LinearBlur\",\"paramsTypes\":{\"intensity\":\"float\"},\"defaultParams\":{\"intensity\":0.1},\"glsl\":\"// author: gre\\n// license: MIT\\nuniform float intensity; // = 0.1\\nconst int passes = 6;\\n\\nvec4 transition(vec2 uv) {\\n    vec4 c1 = vec4(0.0);\\n    vec4 c2 = vec4(0.0);\\n\\n    float disp = intensity*(0.5-distance(0.5, progress));\\n    for (int xi=0; xi<passes; xi++)\\n    {\\n        float x = float(xi) / float(passes) - 0.5;\\n        for (int yi=0; yi<passes; yi++)\\n        {\\n            float y = float(yi) / float(passes) - 0.5;\\n            vec2 v = vec2(x,y);\\n            float d = disp;\\n            c1 += getFromColor( uv + d*v);\\n            c2 += getToColor( uv + d*v);\\n        }\\n    }\\n    c1 /= float(passes*passes);\\n    c2 /= float(passes*passes);\\n    return mix(c1, c2, progress);\\n}\\n\",\"author\":\"gre\",\"license\":\"MIT\",\"createdAt\":\"Fri, 23 Feb 2018 15:18:22 +0100\",\"updatedAt\":\"Fri, 23 Feb 2018 15:18:22 +0100\"},{\"name\":\"Mosaic\",\"paramsTypes\":{\"endx\":\"int\",\"endy\":\"int\"},\"defaultParams\":{\"endx\":2,\"endy\":-1},\"glsl\":\"// License: MIT\\n// Author: Xaychru\\n// ported by gre from https://gist.github.com/Xaychru/130bb7b7affedbda9df5\\n\\n#define PI 3.14159265358979323\\n#define POW2(X) X*X\\n#define POW3(X) X*X*X\\nuniform int endx; // = 2\\nuniform int endy; // = -1\\n\\nfloat Rand(vec2 v) {\\n  return fract(sin(dot(v.xy ,vec2(12.9898,78.233))) * 43758.5453);\\n}\\nvec2 Rotate(vec2 v, float a) {\\n  mat2 rm = mat2(cos(a), -sin(a),\\n                 sin(a), cos(a));\\n  return rm*v;\\n}\\nfloat CosInterpolation(float x) {\\n  return -cos(x*PI)/2.+.5;\\n}\\nvec4 transition(vec2 uv) {\\n  vec2 p = uv.xy / vec2(1.0).xy - .5;\\n  vec2 rp = p;\\n  float rpr = (progress*2.-1.);\\n  float z = -(rpr*rpr*2.) + 3.;\\n  float az = abs(z);\\n  rp *= az;\\n  rp += mix(vec2(.5, .5), vec2(float(endx) + .5, float(endy) + .5), POW2(CosInterpolation(progress)));\\n  vec2 mrp = mod(rp, 1.);\\n  vec2 crp = rp;\\n  bool onEnd = int(floor(crp.x))==endx&&int(floor(crp.y))==endy;\\n  if(!onEnd) {\\n    float ang = float(int(Rand(floor(crp))*4.))*.5*PI;\\n    mrp = vec2(.5) + Rotate(mrp-vec2(.5), ang);\\n  }\\n  if(onEnd || Rand(floor(crp))>.5) {\\n    return getToColor(mrp);\\n  } else {\\n    return getFromColor(mrp);\\n  }\\n}\\n\",\"license\":\"MIT\",\"author\":\"Xaychru\",\"createdAt\":\"Mon, 12 Jun 2017 10:26:51 +0800\",\"updatedAt\":\"Mon, 12 Jun 2017 10:26:51 +0800\"},{\"name\":\"PolkaDotsCurtain\",\"paramsTypes\":{\"dots\":\"float\",\"center\":\"vec2\"},\"defaultParams\":{\"dots\":20,\"center\":[0,0]},\"glsl\":\"// author: bobylito\\n// license: MIT\\nconst float SQRT_2 = 1.414213562373;\\nuniform float dots;// = 20.0;\\nuniform vec2 center;// = vec2(0, 0);\\n\\nvec4 transition(vec2 uv) {\\n  bool nextImage = distance(fract(uv * dots), vec2(0.5, 0.5)) < ( progress / distance(uv, center));\\n  return nextImage ? getToColor(uv) : getFromColor(uv);\\n}\\n\",\"author\":\"bobylito\",\"license\":\"MIT\",\"createdAt\":\"Tue, 20 Feb 2018 23:41:45 +0100\",\"updatedAt\":\"Tue, 20 Feb 2018 23:41:45 +0100\"},{\"name\":\"Radial\",\"paramsTypes\":{\"smoothness\":\"float\"},\"defaultParams\":{\"smoothness\":1},\"glsl\":\"// License: MIT\\n// Author: Xaychru\\n// ported by gre from https://gist.github.com/Xaychru/ce1d48f0ce00bb379750\\n\\nuniform float smoothness; // = 1.0\\n\\nconst float PI = 3.141592653589;\\n\\nvec4 transition(vec2 p) {\\n  vec2 rp = p*2.-1.;\\n  return mix(\\n    getToColor(p),\\n    getFromColor(p),\\n    smoothstep(0., smoothness, atan(rp.y,rp.x) - (progress-.5) * PI * 2.5)\\n  );\\n}\\n\",\"license\":\"MIT\",\"author\":\"Xaychru\",\"createdAt\":\"Mon, 12 Jun 2017 10:36:24 +0800\",\"updatedAt\":\"Mon, 12 Jun 2017 10:36:24 +0800\"},{\"name\":\"SimpleZoom\",\"paramsTypes\":{\"zoom_quickness\":\"float\"},\"defaultParams\":{\"zoom_quickness\":0.8},\"glsl\":\"// Author: 0gust1\\n// License: MIT\\n\\nuniform float zoom_quickness; // = 0.8\\nfloat nQuick = clamp(zoom_quickness,0.2,1.0);\\n\\nvec2 zoom(vec2 uv, float amount) {\\n  return 0.5 + ((uv - 0.5) * (1.0-amount));\\t\\n}\\n\\nvec4 transition (vec2 uv) {\\n  return mix(\\n    getFromColor(zoom(uv, smoothstep(0.0, nQuick, progress))),\\n    getToColor(uv),\\n   smoothstep(nQuick-0.2, 1.0, progress)\\n  );\\n}\",\"author\":\"0gust1\",\"license\":\"MIT\",\"createdAt\":\"Tue, 6 Mar 2018 00:43:47 +0100\",\"updatedAt\":\"Tue, 6 Mar 2018 00:43:47 +0100\"},{\"name\":\"StereoViewer\",\"paramsTypes\":{\"zoom\":\"float\",\"corner_radius\":\"float\"},\"defaultParams\":{\"zoom\":0.88,\"corner_radius\":0.22},\"glsl\":\"// Tunable parameters\\n// How much to zoom (out) for the effect ~ 0.5 - 1.0\\nuniform float zoom; // = 0.88\\n// Corner radius as a fraction of the image height\\nuniform float corner_radius;  // = 0.22\\n\\n// author: Ted Schundler\\n// license: BSD 2 Clause\\n// Free for use and modification by anyone with credit\\n\\n// Copyright (c) 2016, Theodore K Schundler\\n// All rights reserved.\\n\\n// Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\\n\\n// 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\\n\\n// 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\\n\\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \\\"AS IS\\\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\\n\\n///////////////////////////////////////////////////////////////////////////////\\n// Stereo Viewer Toy Transition                                              //\\n//                                                                           //\\n// Inspired by ViewMaster / Image3D image viewer devices.                    //\\n// This effect is similar to what you see when you press the device's lever. //\\n// There is a quick zoom in / out to make the transition 'valid' for GLSL.io //\\n///////////////////////////////////////////////////////////////////////////////\\n\\nconst vec4 black = vec4(0.0, 0.0, 0.0, 1.0);\\nconst vec2 c00 = vec2(0.0, 0.0); // the four corner points\\nconst vec2 c01 = vec2(0.0, 1.0);\\nconst vec2 c11 = vec2(1.0, 1.0);\\nconst vec2 c10 = vec2(1.0, 0.0);\\n\\n// Check if a point is within a given corner\\nbool in_corner(vec2 p, vec2 corner, vec2 radius) {\\n  // determine the direction we want to be filled\\n  vec2 axis = (c11 - corner) - corner;\\n\\n  // warp the point so we are always testing the bottom left point with the\\n  // circle centered on the origin\\n  p = p - (corner + axis * radius);\\n  p *= axis / radius;\\n  return (p.x > 0.0 && p.y > -1.0) || (p.y > 0.0 && p.x > -1.0) || dot(p, p) < 1.0;\\n}\\n\\n// Check all four corners\\n// return a float for v2 for anti-aliasing?\\nbool test_rounded_mask(vec2 p, vec2 corner_size) {\\n  return\\n      in_corner(p, c00, corner_size) &&\\n      in_corner(p, c01, corner_size) &&\\n      in_corner(p, c10, corner_size) &&\\n      in_corner(p, c11, corner_size);\\n}\\n\\n// Screen blend mode - https://en.wikipedia.org/wiki/Blend_modes\\n// This more closely approximates what you see than linear blending\\nvec4 screen(vec4 a, vec4 b) {\\n  return 1.0 - (1.0 - a) * (1.0 -b);\\n}\\n\\n// Given RGBA, find a value that when screened with itself\\n// will yield the original value.\\nvec4 unscreen(vec4 c) {\\n  return 1.0 - sqrt(1.0 - c);\\n}\\n\\n// Grab a pixel, only if it isn't masked out by the rounded corners\\nvec4 sample_with_corners_from(vec2 p, vec2 corner_size) {\\n  p = (p - 0.5) / zoom + 0.5;\\n  if (!test_rounded_mask(p, corner_size)) {\\n    return black;\\n  }\\n  return unscreen(getFromColor(p));\\n}\\n\\nvec4 sample_with_corners_to(vec2 p, vec2 corner_size) {\\n  p = (p - 0.5) / zoom + 0.5;\\n  if (!test_rounded_mask(p, corner_size)) {\\n    return black;\\n  }\\n  return unscreen(getToColor(p));\\n}\\n\\n// special sampling used when zooming - extra zoom parameter and don't unscreen\\nvec4 simple_sample_with_corners_from(vec2 p, vec2 corner_size, float zoom_amt) {\\n  p = (p - 0.5) / (1.0 - zoom_amt + zoom * zoom_amt) + 0.5;\\n  if (!test_rounded_mask(p, corner_size)) {\\n    return black;\\n  }\\n  return getFromColor(p);\\n}\\n\\nvec4 simple_sample_with_corners_to(vec2 p, vec2 corner_size, float zoom_amt) {\\n  p = (p - 0.5) / (1.0 - zoom_amt + zoom * zoom_amt) + 0.5;\\n  if (!test_rounded_mask(p, corner_size)) {\\n    return black;\\n  }\\n  return getToColor(p);\\n}\\n\\n// Basic 2D affine transform matrix helpers\\n// These really shouldn't be used in a fragment shader - I should work out the\\n// the math for a translate & rotate function as a pair of dot products instead\\n\\nmat3 rotate2d(float angle, float ratio) {\\n  float s = sin(angle);\\n  float c = cos(angle);\\n  return mat3(\\n    c, s ,0.0,\\n    -s, c, 0.0,\\n    0.0, 0.0, 1.0);\\n}\\n\\nmat3 translate2d(float x, float y) {\\n  return mat3(\\n    1.0, 0.0, 0,\\n    0.0, 1.0, 0,\\n    -x, -y, 1.0);\\n}\\n\\nmat3 scale2d(float x, float y) {\\n  return mat3(\\n    x, 0.0, 0,\\n    0.0, y, 0,\\n    0, 0, 1.0);\\n}\\n\\n// Split an image and rotate one up and one down along off screen pivot points\\nvec4 get_cross_rotated(vec3 p3, float angle, vec2 corner_size, float ratio) {\\n  angle = angle * angle; // easing\\n  angle /= 2.4; // works out to be a good number of radians\\n\\n  mat3 center_and_scale = translate2d(-0.5, -0.5) * scale2d(1.0, ratio);\\n  mat3 unscale_and_uncenter = scale2d(1.0, 1.0/ratio) * translate2d(0.5,0.5);\\n  mat3 slide_left = translate2d(-2.0,0.0);\\n  mat3 slide_right = translate2d(2.0,0.0);\\n  mat3 rotate = rotate2d(angle, ratio);\\n\\n  mat3 op_a = center_and_scale * slide_right * rotate * slide_left * unscale_and_uncenter;\\n  mat3 op_b = center_and_scale * slide_left * rotate * slide_right * unscale_and_uncenter;\\n\\n  vec4 a = sample_with_corners_from((op_a * p3).xy, corner_size);\\n  vec4 b = sample_with_corners_from((op_b * p3).xy, corner_size);\\n\\n  return screen(a, b);\\n}\\n\\n// Image stays put, but this time move two masks\\nvec4 get_cross_masked(vec3 p3, float angle, vec2 corner_size, float ratio) {\\n  angle = 1.0 - angle;\\n  angle = angle * angle; // easing\\n  angle /= 2.4;\\n\\n  vec4 img;\\n\\n  mat3 center_and_scale = translate2d(-0.5, -0.5) * scale2d(1.0, ratio);\\n  mat3 unscale_and_uncenter = scale2d(1.0 / zoom, 1.0 / (zoom * ratio)) * translate2d(0.5,0.5);\\n  mat3 slide_left = translate2d(-2.0,0.0);\\n  mat3 slide_right = translate2d(2.0,0.0);\\n  mat3 rotate = rotate2d(angle, ratio);\\n\\n  mat3 op_a = center_and_scale * slide_right * rotate * slide_left * unscale_and_uncenter;\\n  mat3 op_b = center_and_scale * slide_left * rotate * slide_right * unscale_and_uncenter;\\n\\n  bool mask_a = test_rounded_mask((op_a * p3).xy, corner_size);\\n  bool mask_b = test_rounded_mask((op_b * p3).xy, corner_size);\\n\\n  if (mask_a || mask_b) {\\n    img = sample_with_corners_to(p3.xy, corner_size);\\n    return screen(mask_a ? img : black, mask_b ? img : black);\\n  } else {\\n    return black;\\n  }\\n}\\n\\nvec4 transition(vec2 uv) {\\n  float a;\\n  vec2 p=uv.xy/vec2(1.0).xy;\\n  vec3 p3 = vec3(p.xy, 1.0); // for 2D matrix transforms\\n\\n  // corner is warped to represent to size after mapping to 1.0, 1.0\\n  vec2 corner_size = vec2(corner_radius / ratio, corner_radius);\\n\\n  if (progress <= 0.0) {\\n    // 0.0: start with the base frame always\\n    return getFromColor(p);\\n  } else if (progress < 0.1) {\\n    // 0.0-0.1: zoom out and add rounded corners\\n    a = progress / 0.1;\\n    return  simple_sample_with_corners_from(p, corner_size * a, a);\\n  } else if (progress < 0.48) {\\n    // 0.1-0.48: Split original image apart\\n    a = (progress - 0.1)/0.38;\\n    return get_cross_rotated(p3, a, corner_size, ratio);\\n  } else if (progress < 0.9) {\\n    // 0.48-0.52: black\\n    // 0.52 - 0.9: unmask new image\\n    return get_cross_masked(p3, (progress - 0.52)/0.38, corner_size, ratio);\\n  } else if (progress < 1.0) {\\n    // zoom out and add rounded corners\\n    a = (1.0 - progress) / 0.1;\\n    return simple_sample_with_corners_to(p, corner_size * a, a);\\n  } else {\\n    // 1.0 end with base frame\\n    return getToColor(p);\\n  }\\n}\\n\",\"author\":\"Ted Schundler\",\"license\":\"BSD 2 Clause\",\"createdAt\":\"Tue, 20 Feb 2018 23:20:29 +0100\",\"updatedAt\":\"Wed, 21 Feb 2018 15:42:00 +0100\"},{\"name\":\"Swirl\",\"paramsTypes\":{},\"defaultParams\":{},\"glsl\":\"// License: MIT\\n// Author: Sergey Kosarevsky\\n// ( http://www.linderdaum.com )\\n// ported by gre from https://gist.github.com/corporateshark/cacfedb8cca0f5ce3f7c\\n\\nvec4 transition(vec2 UV)\\n{\\n\\tfloat Radius = 1.0;\\n\\n\\tfloat T = progress;\\n\\n\\tUV -= vec2( 0.5, 0.5 );\\n\\n\\tfloat Dist = length(UV);\\n\\n\\tif ( Dist < Radius )\\n\\t{\\n\\t\\tfloat Percent = (Radius - Dist) / Radius;\\n\\t\\tfloat A = ( T <= 0.5 ) ? mix( 0.0, 1.0, T/0.5 ) : mix( 1.0, 0.0, (T-0.5)/0.5 );\\n\\t\\tfloat Theta = Percent * Percent * A * 8.0 * 3.14159;\\n\\t\\tfloat S = sin( Theta );\\n\\t\\tfloat C = cos( Theta );\\n\\t\\tUV = vec2( dot(UV, vec2(C, -S)), dot(UV, vec2(S, C)) );\\n\\t}\\n\\tUV += vec2( 0.5, 0.5 );\\n\\n\\tvec4 C0 = getFromColor(UV);\\n\\tvec4 C1 = getToColor(UV);\\n\\n\\treturn mix( C0, C1, T );\\n}\\n\",\"license\":\"MIT\",\"author\":\"Sergey Kosarevsky\",\"createdAt\":\"Mon, 12 Jun 2017 12:38:27 +0800\",\"updatedAt\":\"Mon, 12 Jun 2017 12:38:27 +0800\"},{\"name\":\"WaterDrop\",\"paramsTypes\":{\"amplitude\":\"float\",\"speed\":\"float\"},\"defaultParams\":{\"amplitude\":30,\"speed\":30},\"glsl\":\"// author: Paweł Płóciennik\\n// license: MIT\\nuniform float amplitude; // = 30\\nuniform float speed; // = 30\\n\\nvec4 transition(vec2 p) {\\n  vec2 dir = p - vec2(.5);\\n  float dist = length(dir);\\n\\n  if (dist > progress) {\\n    return mix(getFromColor( p), getToColor( p), progress);\\n  } else {\\n    vec2 offset = dir * sin(dist * amplitude - progress * speed);\\n    return mix(getFromColor( p + offset), getToColor( p), progress);\\n  }\\n}\\n\",\"author\":\"Paweł Płóciennik\",\"license\":\"MIT\",\"createdAt\":\"Wed, 21 Feb 2018 19:37:15 +0100\",\"updatedAt\":\"Wed, 21 Feb 2018 19:37:15 +0100\"},{\"name\":\"ZoomInCircles\",\"paramsTypes\":{},\"defaultParams\":{},\"glsl\":\"// License: MIT\\n// Author: dycm8009\\n// ported by gre from https://gist.github.com/dycm8009/948e99b1800e81ad909a\\n\\nvec2 zoom(vec2 uv, float amount) {\\n  return 0.5 + ((uv - 0.5) * amount);\\t\\n}\\n\\nvec2 ratio2 = vec2(1.0, 1.0 / ratio);\\n\\nvec4 transition(vec2 uv) {\\n  // TODO: some timing are hardcoded but should be one or many parameters\\n  // TODO: should also be able to configure how much circles\\n  // TODO: if() branching should be avoided when possible, prefer use of step() & other functions\\n  vec2 r = 2.0 * ((vec2(uv.xy) - 0.5) * ratio2);\\n  float pro = progress / 0.8;\\n  float z = pro * 0.2;\\n  float t = 0.0;\\n  if (pro > 1.0) {\\n    z = 0.2 + (pro - 1.0) * 5.;\\n    t = clamp((progress - 0.8) / 0.07, 0.0, 1.0);\\n  }\\n  if (length(r) < 0.5+z) {\\n    // uv = zoom(uv, 0.9 - 0.1 * pro);\\n  }\\n  else if (length(r) < 0.8+z*1.5) {\\n    uv = zoom(uv, 1.0 - 0.15 * pro);\\n    t = t * 0.5;\\n  }\\n  else if (length(r) < 1.2+z*2.5) {\\n    uv = zoom(uv, 1.0 - 0.2 * pro);\\n    t = t * 0.2;\\n  }\\n  else {\\n    uv = zoom(uv, 1.0 - 0.25 * pro);\\n  }\\n  return mix(getFromColor(uv), getToColor(uv), t);\\n}\\n\",\"license\":\"MIT\",\"author\":\"dycm8009\",\"createdAt\":\"Mon, 12 Jun 2017 11:24:34 +0800\",\"updatedAt\":\"Mon, 12 Jun 2017 11:24:34 +0800\"},{\"name\":\"angular\",\"paramsTypes\":{\"startingAngle\":\"float\"},\"defaultParams\":{\"startingAngle\":90},\"glsl\":\"// Author: Fernando Kuteken\\n// License: MIT\\n\\n#define PI 3.141592653589\\n\\nuniform float startingAngle; // = 90;\\n\\nvec4 transition (vec2 uv) {\\n  \\n  float offset = startingAngle * PI / 180.0;\\n  float angle = atan(uv.y - 0.5, uv.x - 0.5) + offset;\\n  float normalizedAngle = (angle + PI) / (2.0 * PI);\\n  \\n  normalizedAngle = normalizedAngle - floor(normalizedAngle);\\n\\n  return mix(\\n    getFromColor(uv),\\n    getToColor(uv),\\n    step(normalizedAngle, progress)\\n    );\\n}\\n\",\"author\":\"Fernando Kuteken\",\"license\":\"MIT\",\"createdAt\":\"Tue, 30 May 2017 14:26:44 +0200\",\"updatedAt\":\"Tue, 30 May 2017 14:26:44 +0200\"},{\"name\":\"burn\",\"paramsTypes\":{\"color\":\"vec3\"},\"defaultParams\":{\"color\":[0.9,0.4,0.2]},\"glsl\":\"// author: gre\\n// License: MIT\\nuniform vec3 color /* = vec3(0.9, 0.4, 0.2) */;\\nvec4 transition (vec2 uv) {\\n  return mix(\\n    getFromColor(uv) + vec4(progress*color, 1.0),\\n    getToColor(uv) + vec4((1.0-progress)*color, 1.0),\\n    progress\\n  );\\n}\\n\",\"author\":\"gre\",\"license\":\"MIT\",\"createdAt\":\"Tue, 30 May 2017 14:26:44 +0200\",\"updatedAt\":\"Tue, 30 May 2017 14:26:44 +0200\"},{\"name\":\"cannabisleaf\",\"paramsTypes\":{},\"defaultParams\":{},\"glsl\":\"// Author: @Flexi23\\n// License: MIT\\n\\n// inspired by http://www.wolframalpha.com/input/?i=cannabis+curve\\n\\nvec4 transition (vec2 uv) {\\n  if(progress == 0.0){\\n    return getFromColor(uv);\\n  }\\n  vec2 leaf_uv = (uv - vec2(0.5))/10./pow(progress,3.5);\\n\\tleaf_uv.y += 0.35;\\n\\tfloat r = 0.18;\\n\\tfloat o = atan(leaf_uv.y, leaf_uv.x);\\n  return mix(getFromColor(uv), getToColor(uv), 1.-step(1. - length(leaf_uv)+r*(1.+sin(o))*(1.+0.9 * cos(8.*o))*(1.+0.1*cos(24.*o))*(0.9+0.05*cos(200.*o)), 1.));\\n}\\n\",\"author\":\"@Flexi23\",\"license\":\"MIT\",\"createdAt\":\"Thu, 1 Jun 2017 15:58:58 +0200\",\"updatedAt\":\"Thu, 1 Jun 2017 15:58:58 +0200\"},{\"name\":\"circle\",\"paramsTypes\":{\"center\":\"vec2\",\"backColor\":\"vec3\"},\"defaultParams\":{\"center\":[0.5,0.5],\"backColor\":[0.1,0.1,0.1]},\"glsl\":\"// Author: Fernando Kuteken\\n// License: MIT\\n\\nuniform vec2 center; // = vec2(0.5, 0.5);\\nuniform vec3 backColor; // = vec3(0.1, 0.1, 0.1);\\n\\nvec4 transition (vec2 uv) {\\n  \\n  float distance = length(uv - center);\\n  float radius = sqrt(8.0) * abs(progress - 0.5);\\n  \\n  if (distance > radius) {\\n    return vec4(backColor, 1.0);\\n  }\\n  else {\\n    if (progress < 0.5) return getFromColor(uv);\\n    else return getToColor(uv);\\n  }\\n}\\n\",\"author\":\"Fernando Kuteken\",\"license\":\"MIT\",\"createdAt\":\"Tue, 30 May 2017 14:26:44 +0200\",\"updatedAt\":\"Tue, 30 May 2017 14:26:44 +0200\"},{\"name\":\"circleopen\",\"paramsTypes\":{\"smoothness\":\"float\",\"opening\":\"bool\"},\"defaultParams\":{\"smoothness\":0.3,\"opening\":true},\"glsl\":\"// author: gre\\n// License: MIT\\nuniform float smoothness; // = 0.3\\nuniform bool opening; // = true\\n\\nconst vec2 center = vec2(0.5, 0.5);\\nconst float SQRT_2 = 1.414213562373;\\n\\nvec4 transition (vec2 uv) {\\n  float x = opening ? progress : 1.-progress;\\n  float m = smoothstep(-smoothness, 0.0, SQRT_2*distance(center, uv) - x*(1.+smoothness));\\n  return mix(getFromColor(uv), getToColor(uv), opening ? 1.-m : m);\\n}\\n\",\"author\":\"gre\",\"license\":\"MIT\",\"createdAt\":\"Tue, 30 May 2017 14:26:44 +0200\",\"updatedAt\":\"Tue, 30 May 2017 14:26:44 +0200\"},{\"name\":\"colorphase\",\"paramsTypes\":{\"fromStep\":\"vec4\",\"toStep\":\"vec4\"},\"defaultParams\":{\"fromStep\":[0,0.2,0.4,0],\"toStep\":[0.6,0.8,1,1]},\"glsl\":\"// Author: gre\\n// License: MIT\\n\\n// Usage: fromStep and toStep must be in [0.0, 1.0] range \\n// and all(fromStep) must be < all(toStep)\\n\\nuniform vec4 fromStep; // = vec4(0.0, 0.2, 0.4, 0.0)\\nuniform vec4 toStep; // = vec4(0.6, 0.8, 1.0, 1.0)\\n\\nvec4 transition (vec2 uv) {\\n  vec4 a = getFromColor(uv);\\n  vec4 b = getToColor(uv);\\n  return mix(a, b, smoothstep(fromStep, toStep, vec4(progress)));\\n}\\n\",\"author\":\"gre\",\"license\":\"MIT\",\"createdAt\":\"Tue, 30 May 2017 14:26:44 +0200\",\"updatedAt\":\"Tue, 30 May 2017 14:26:44 +0200\"},{\"name\":\"crosshatch\",\"paramsTypes\":{\"center\":\"vec2\",\"threshold\":\"float\",\"fadeEdge\":\"float\"},\"defaultParams\":{\"center\":[0.5,0.5],\"threshold\":3,\"fadeEdge\":0.1},\"glsl\":\"// License: MIT\\n// Author: pthrasher\\n// adapted by gre from https://gist.github.com/pthrasher/04fd9a7de4012cbb03f6\\n\\nuniform vec2 center; // = vec2(0.5)\\nuniform float threshold; // = 3.0\\nuniform float fadeEdge; // = 0.1\\n\\nfloat rand(vec2 co) {\\n  return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\\n}\\nvec4 transition(vec2 p) {\\n  float dist = distance(center, p) / threshold;\\n  float r = progress - min(rand(vec2(p.y, 0.0)), rand(vec2(0.0, p.x)));\\n  return mix(getFromColor(p), getToColor(p), mix(0.0, mix(step(dist, r), 1.0, smoothstep(1.0-fadeEdge, 1.0, progress)), smoothstep(0.0, fadeEdge, progress)));    \\n}\\n\",\"license\":\"MIT\",\"author\":\"pthrasher\",\"createdAt\":\"Mon, 12 Jun 2017 10:02:12 +0800\",\"updatedAt\":\"Mon, 12 Jun 2017 10:02:12 +0800\"},{\"name\":\"crosswarp\",\"paramsTypes\":{},\"defaultParams\":{},\"glsl\":\"// Author: Eke Péter <peterekepeter@gmail.com>\\n// License: MIT\\nvec4 transition(vec2 p) {\\n  float x = progress;\\n  x=smoothstep(.0,1.0,(x*2.0+p.x-1.0));\\n  return mix(getFromColor((p-.5)*(1.-x)+.5), getToColor((p-.5)*x+.5), x);\\n}\\n\",\"author\":\"Eke Péter <peterekepeter@gmail.com>\",\"license\":\"MIT\",\"createdAt\":\"Tue, 30 May 2017 14:26:44 +0200\",\"updatedAt\":\"Tue, 30 May 2017 14:26:44 +0200\"},{\"name\":\"cube\",\"paramsTypes\":{\"persp\":\"float\",\"unzoom\":\"float\",\"reflection\":\"float\",\"floating\":\"float\"},\"defaultParams\":{\"persp\":0.7,\"unzoom\":0.3,\"reflection\":0.4,\"floating\":3},\"glsl\":\"// Author: gre\\n// License: MIT\\nuniform float persp; // = 0.7\\nuniform float unzoom; // = 0.3\\nuniform float reflection; // = 0.4\\nuniform float floating; // = 3.0\\n\\nvec2 project (vec2 p) {\\n  return p * vec2(1.0, -1.2) + vec2(0.0, -floating/100.);\\n}\\n\\nbool inBounds (vec2 p) {\\n  return all(lessThan(vec2(0.0), p)) && all(lessThan(p, vec2(1.0)));\\n}\\n\\nvec4 bgColor (vec2 p, vec2 pfr, vec2 pto) {\\n  vec4 c = vec4(0.0, 0.0, 0.0, 1.0);\\n  pfr = project(pfr);\\n  // FIXME avoid branching might help perf!\\n  if (inBounds(pfr)) {\\n    c += mix(vec4(0.0), getFromColor(pfr), reflection * mix(1.0, 0.0, pfr.y));\\n  }\\n  pto = project(pto);\\n  if (inBounds(pto)) {\\n    c += mix(vec4(0.0), getToColor(pto), reflection * mix(1.0, 0.0, pto.y));\\n  }\\n  return c;\\n}\\n\\n// p : the position\\n// persp : the perspective in [ 0, 1 ]\\n// center : the xcenter in [0, 1] \\\\ 0.5 excluded\\nvec2 xskew (vec2 p, float persp, float center) {\\n  float x = mix(p.x, 1.0-p.x, center);\\n  return (\\n    (\\n      vec2( x, (p.y - 0.5*(1.0-persp) * x) / (1.0+(persp-1.0)*x) )\\n      - vec2(0.5-distance(center, 0.5), 0.0)\\n    )\\n    * vec2(0.5 / distance(center, 0.5) * (center<0.5 ? 1.0 : -1.0), 1.0)\\n    + vec2(center<0.5 ? 0.0 : 1.0, 0.0)\\n  );\\n}\\n\\nvec4 transition(vec2 op) {\\n  float uz = unzoom * 2.0*(0.5-distance(0.5, progress));\\n  vec2 p = -uz*0.5+(1.0+uz) * op;\\n  vec2 fromP = xskew(\\n    (p - vec2(progress, 0.0)) / vec2(1.0-progress, 1.0),\\n    1.0-mix(progress, 0.0, persp),\\n    0.0\\n  );\\n  vec2 toP = xskew(\\n    p / vec2(progress, 1.0),\\n    mix(pow(progress, 2.0), 1.0, persp),\\n    1.0\\n  );\\n  // FIXME avoid branching might help perf!\\n  if (inBounds(fromP)) {\\n    return getFromColor(fromP);\\n  }\\n  else if (inBounds(toP)) {\\n    return getToColor(toP);\\n  }\\n  return bgColor(op, fromP, toP);\\n}\\n\",\"author\":\"gre\",\"license\":\"MIT\",\"createdAt\":\"Tue, 30 May 2017 14:26:44 +0200\",\"updatedAt\":\"Tue, 30 May 2017 14:26:44 +0200\"},{\"name\":\"directionalwarp\",\"paramsTypes\":{\"direction\":\"vec2\"},\"defaultParams\":{\"direction\":[-1,1]},\"glsl\":\"// Author: pschroen\\n// License: MIT\\n\\nuniform vec2 direction; // = vec2(-1.0, 1.0)\\n\\nconst float smoothness = 0.5;\\nconst vec2 center = vec2(0.5, 0.5);\\n\\nvec4 transition (vec2 uv) {\\n  vec2 v = normalize(direction);\\n  v /= abs(v.x) + abs(v.y);\\n  float d = v.x * center.x + v.y * center.y;\\n  float m = 1.0 - smoothstep(-smoothness, 0.0, v.x * uv.x + v.y * uv.y - (d - 0.5 + progress * (1.0 + smoothness)));\\n  return mix(getFromColor((uv - 0.5) * (1.0 - m) + 0.5), getToColor((uv - 0.5) * m + 0.5), m);\\n}\\n\",\"author\":\"pschroen\",\"license\":\"MIT\",\"createdAt\":\"Wed, 13 Dec 2017 12:08:49 -0500\",\"updatedAt\":\"Wed, 13 Dec 2017 12:08:49 -0500\"},{\"name\":\"directionalwipe\",\"paramsTypes\":{\"direction\":\"vec2\",\"smoothness\":\"float\"},\"defaultParams\":{\"direction\":[1,-1],\"smoothness\":0.5},\"glsl\":\"// Author: gre\\n// License: MIT\\n\\nuniform vec2 direction; // = vec2(1.0, -1.0)\\nuniform float smoothness; // = 0.5\\n \\nconst vec2 center = vec2(0.5, 0.5);\\n \\nvec4 transition (vec2 uv) {\\n  vec2 v = normalize(direction);\\n  v /= abs(v.x)+abs(v.y);\\n  float d = v.x * center.x + v.y * center.y;\\n  float m =\\n    (1.0-step(progress, 0.0)) * // there is something wrong with our formula that makes m not equals 0.0 with progress is 0.0\\n    (1.0 - smoothstep(-smoothness, 0.0, v.x * uv.x + v.y * uv.y - (d-0.5+progress*(1.+smoothness))));\\n  return mix(getFromColor(uv), getToColor(uv), m);\\n}\\n\",\"author\":\"gre\",\"license\":\"MIT\",\"createdAt\":\"Tue, 30 May 2017 14:26:44 +0200\",\"updatedAt\":\"Tue, 30 May 2017 14:26:44 +0200\"},{\"name\":\"displacement\",\"paramsTypes\":{\"displacementMap\":\"sampler2D\",\"strength\":\"float\"},\"defaultParams\":{\"displacementMap\":null,\"strength\":0.5},\"glsl\":\"// Author: Travis Fischer\\n// License: MIT\\n//\\n// Adapted from a Codrops article by Robin Delaporte\\n// https://tympanus.net/Development/DistortionHoverEffect\\n\\nuniform sampler2D displacementMap;\\n\\nuniform float strength; // = 0.5\\n\\nvec4 transition (vec2 uv) {\\n  float displacement = texture2D(displacementMap, uv).r * strength;\\n\\n  vec2 uvFrom = vec2(uv.x + progress * displacement, uv.y);\\n  vec2 uvTo = vec2(uv.x - (1.0 - progress) * displacement, uv.y);\\n\\n  return mix(\\n    getFromColor(uvFrom),\\n    getToColor(uvTo),\\n    progress\\n  );\\n}\\n\",\"author\":\"Travis Fischer\",\"license\":\"MIT\",\"createdAt\":\"Tue, 10 Apr 2018 23:03:38 -0400\",\"updatedAt\":\"Tue, 10 Apr 2018 23:03:38 -0400\"},{\"name\":\"doorway\",\"paramsTypes\":{\"reflection\":\"float\",\"perspective\":\"float\",\"depth\":\"float\"},\"defaultParams\":{\"reflection\":0.4,\"perspective\":0.4,\"depth\":3},\"glsl\":\"// author: gre\\n// License: MIT \\nuniform float reflection; // = 0.4\\nuniform float perspective; // = 0.4\\nuniform float depth; // = 3\\n\\nconst vec4 black = vec4(0.0, 0.0, 0.0, 1.0);\\nconst vec2 boundMin = vec2(0.0, 0.0);\\nconst vec2 boundMax = vec2(1.0, 1.0);\\n\\nbool inBounds (vec2 p) {\\n  return all(lessThan(boundMin, p)) && all(lessThan(p, boundMax));\\n}\\n\\nvec2 project (vec2 p) {\\n  return p * vec2(1.0, -1.2) + vec2(0.0, -0.02);\\n}\\n\\nvec4 bgColor (vec2 p, vec2 pto) {\\n  vec4 c = black;\\n  pto = project(pto);\\n  if (inBounds(pto)) {\\n    c += mix(black, getToColor(pto), reflection * mix(1.0, 0.0, pto.y));\\n  }\\n  return c;\\n}\\n\\n\\nvec4 transition (vec2 p) {\\n  vec2 pfr = vec2(-1.), pto = vec2(-1.);\\n  float middleSlit = 2.0 * abs(p.x-0.5) - progress;\\n  if (middleSlit > 0.0) {\\n    pfr = p + (p.x > 0.5 ? -1.0 : 1.0) * vec2(0.5*progress, 0.0);\\n    float d = 1.0/(1.0+perspective*progress*(1.0-middleSlit));\\n    pfr.y -= d/2.;\\n    pfr.y *= d;\\n    pfr.y += d/2.;\\n  }\\n  float size = mix(1.0, depth, 1.-progress);\\n  pto = (p + vec2(-0.5, -0.5)) * vec2(size, size) + vec2(0.5, 0.5);\\n  if (inBounds(pfr)) {\\n    return getFromColor(pfr);\\n  }\\n  else if (inBounds(pto)) {\\n    return getToColor(pto);\\n  }\\n  else {\\n    return bgColor(p, pto);\\n  }\\n}\\n\",\"author\":\"gre\",\"license\":\"MIT\",\"createdAt\":\"Tue, 30 May 2017 14:26:44 +0200\",\"updatedAt\":\"Tue, 30 May 2017 14:26:44 +0200\"},{\"name\":\"fade\",\"paramsTypes\":{},\"defaultParams\":{},\"glsl\":\"// author: gre\\n// license: MIT\\n\\nvec4 transition (vec2 uv) {\\n  return mix(\\n    getFromColor(uv),\\n    getToColor(uv),\\n    progress\\n  );\\n}\\n\",\"author\":\"gre\",\"license\":\"MIT\",\"createdAt\":\"Tue, 30 May 2017 14:26:44 +0200\",\"updatedAt\":\"Tue, 30 May 2017 14:26:44 +0200\"},{\"name\":\"fadecolor\",\"paramsTypes\":{\"color\":\"vec3\",\"colorPhase\":\"float\"},\"defaultParams\":{\"color\":[0,0,0],\"colorPhase\":0.4},\"glsl\":\"// author: gre\\n// License: MIT\\nuniform vec3 color;// = vec3(0.0)\\nuniform float colorPhase/* = 0.4 */; // if 0.0, there is no black phase, if 0.9, the black phase is very important\\nvec4 transition (vec2 uv) {\\n  return mix(\\n    mix(vec4(color, 1.0), getFromColor(uv), smoothstep(1.0-colorPhase, 0.0, progress)),\\n    mix(vec4(color, 1.0), getToColor(uv), smoothstep(    colorPhase, 1.0, progress)),\\n    progress);\\n}\\n\",\"author\":\"gre\",\"license\":\"MIT\",\"createdAt\":\"Tue, 30 May 2017 14:26:44 +0200\",\"updatedAt\":\"Tue, 30 May 2017 14:26:44 +0200\"},{\"name\":\"fadegrayscale\",\"paramsTypes\":{\"intensity\":\"float\"},\"defaultParams\":{\"intensity\":0.3},\"glsl\":\"// Author: gre\\n// License: MIT\\n\\nuniform float intensity; // = 0.3; // if 0.0, the image directly turn grayscale, if 0.9, the grayscale transition phase is very important\\n \\nvec3 grayscale (vec3 color) {\\n  return vec3(0.2126*color.r + 0.7152*color.g + 0.0722*color.b);\\n}\\n \\nvec4 transition (vec2 uv) {\\n  vec4 fc = getFromColor(uv);\\n  vec4 tc = getToColor(uv);\\n  return mix(\\n    mix(vec4(grayscale(fc.rgb), 1.0), fc, smoothstep(1.0-intensity, 0.0, progress)),\\n    mix(vec4(grayscale(tc.rgb), 1.0), tc, smoothstep(    intensity, 1.0, progress)),\\n    progress);\\n}\\n\",\"author\":\"gre\",\"license\":\"MIT\",\"createdAt\":\"Tue, 30 May 2017 14:26:44 +0200\",\"updatedAt\":\"Tue, 30 May 2017 14:26:44 +0200\"},{\"name\":\"flyeye\",\"paramsTypes\":{\"size\":\"float\",\"zoom\":\"float\",\"colorSeparation\":\"float\"},\"defaultParams\":{\"size\":0.04,\"zoom\":50,\"colorSeparation\":0.3},\"glsl\":\"// Author: gre\\n// License: MIT\\nuniform float size; // = 0.04\\nuniform float zoom; // = 50.0\\nuniform float colorSeparation; // = 0.3\\n\\nvec4 transition(vec2 p) {\\n  float inv = 1. - progress;\\n  vec2 disp = size*vec2(cos(zoom*p.x), sin(zoom*p.y));\\n  vec4 texTo = getToColor(p + inv*disp);\\n  vec4 texFrom = vec4(\\n    getFromColor(p + progress*disp*(1.0 - colorSeparation)).r,\\n    getFromColor(p + progress*disp).g,\\n    getFromColor(p + progress*disp*(1.0 + colorSeparation)).b,\\n    1.0);\\n  return texTo*progress + texFrom*inv;\\n}\\n\",\"author\":\"gre\",\"license\":\"MIT\",\"createdAt\":\"Tue, 30 May 2017 14:26:44 +0200\",\"updatedAt\":\"Tue, 30 May 2017 14:26:44 +0200\"},{\"name\":\"heart\",\"paramsTypes\":{},\"defaultParams\":{},\"glsl\":\"// Author: gre\\n// License: MIT\\n\\nfloat inHeart (vec2 p, vec2 center, float size) {\\n  if (size==0.0) return 0.0;\\n  vec2 o = (p-center)/(1.6*size);\\n  float a = o.x*o.x+o.y*o.y-0.3;\\n  return step(a*a*a, o.x*o.x*o.y*o.y*o.y);\\n}\\nvec4 transition (vec2 uv) {\\n  return mix(\\n    getFromColor(uv),\\n    getToColor(uv),\\n    inHeart(uv, vec2(0.5, 0.4), progress)\\n  );\\n}\\n\",\"author\":\"gre\",\"license\":\"MIT\",\"createdAt\":\"Tue, 30 May 2017 14:26:44 +0200\",\"updatedAt\":\"Tue, 30 May 2017 14:26:44 +0200\"},{\"name\":\"hexagonalize\",\"paramsTypes\":{\"steps\":\"int\",\"horizontalHexagons\":\"float\"},\"defaultParams\":{\"steps\":50,\"horizontalHexagons\":20},\"glsl\":\"// Author: Fernando Kuteken\\n// License: MIT\\n// Hexagonal math from: http://www.redblobgames.com/grids/hexagons/\\n\\nuniform int steps; // = 50;\\nuniform float horizontalHexagons; //= 20;\\n\\nstruct Hexagon {\\n  float q;\\n  float r;\\n  float s;\\n};\\n\\nHexagon createHexagon(float q, float r){\\n  Hexagon hex;\\n  hex.q = q;\\n  hex.r = r;\\n  hex.s = -q - r;\\n  return hex;\\n}\\n\\nHexagon roundHexagon(Hexagon hex){\\n  \\n  float q = floor(hex.q + 0.5);\\n  float r = floor(hex.r + 0.5);\\n  float s = floor(hex.s + 0.5);\\n\\n  float deltaQ = abs(q - hex.q);\\n  float deltaR = abs(r - hex.r);\\n  float deltaS = abs(s - hex.s);\\n\\n  if (deltaQ > deltaR && deltaQ > deltaS)\\n    q = -r - s;\\n  else if (deltaR > deltaS)\\n    r = -q - s;\\n  else\\n    s = -q - r;\\n\\n  return createHexagon(q, r);\\n}\\n\\nHexagon hexagonFromPoint(vec2 point, float size) {\\n  \\n  point.y /= ratio;\\n  point = (point - 0.5) / size;\\n  \\n  float q = (sqrt(3.0) / 3.0) * point.x + (-1.0 / 3.0) * point.y;\\n  float r = 0.0 * point.x + 2.0 / 3.0 * point.y;\\n\\n  Hexagon hex = createHexagon(q, r);\\n  return roundHexagon(hex);\\n  \\n}\\n\\nvec2 pointFromHexagon(Hexagon hex, float size) {\\n  \\n  float x = (sqrt(3.0) * hex.q + (sqrt(3.0) / 2.0) * hex.r) * size + 0.5;\\n  float y = (0.0 * hex.q + (3.0 / 2.0) * hex.r) * size + 0.5;\\n  \\n  return vec2(x, y * ratio);\\n}\\n\\nvec4 transition (vec2 uv) {\\n  \\n  float dist = 2.0 * min(progress, 1.0 - progress);\\n  dist = steps > 0 ? ceil(dist * float(steps)) / float(steps) : dist;\\n  \\n  float size = (sqrt(3.0) / 3.0) * dist / horizontalHexagons;\\n  \\n  vec2 point = dist > 0.0 ? pointFromHexagon(hexagonFromPoint(uv, size), size) : uv;\\n\\n  return mix(getFromColor(point), getToColor(point), progress);\\n  \\n}\\n\",\"author\":\"Fernando Kuteken\",\"license\":\"MIT\",\"createdAt\":\"Tue, 30 May 2017 21:55:47 -0300\",\"updatedAt\":\"Tue, 30 May 2017 21:55:47 -0300\"},{\"name\":\"kaleidoscope\",\"paramsTypes\":{\"speed\":\"float\",\"angle\":\"float\",\"power\":\"float\"},\"defaultParams\":{\"speed\":1,\"angle\":1,\"power\":1.5},\"glsl\":\"// Author: nwoeanhinnogaehr\\n// License: MIT\\n\\nuniform float speed; // = 1.0;\\nuniform float angle; // = 1.0;\\nuniform float power; // = 1.5;\\n\\nvec4 transition(vec2 uv) {\\n  vec2 p = uv.xy / vec2(1.0).xy;\\n  vec2 q = p;\\n  float t = pow(progress, power)*speed;\\n  p = p -0.5;\\n  for (int i = 0; i < 7; i++) {\\n    p = vec2(sin(t)*p.x + cos(t)*p.y, sin(t)*p.y - cos(t)*p.x);\\n    t += angle;\\n    p = abs(mod(p, 2.0) - 1.0);\\n  }\\n  abs(mod(p, 1.0));\\n  return mix(\\n    mix(getFromColor(q), getToColor(q), progress),\\n    mix(getFromColor(p), getToColor(p), progress), 1.0 - 2.0*abs(progress - 0.5));\\n}\\n\",\"author\":\"nwoeanhinnogaehr\",\"license\":\"MIT\",\"createdAt\":\"Wed, 31 May 2017 21:48:26 -0400\",\"updatedAt\":\"Wed, 31 May 2017 21:48:26 -0400\"},{\"name\":\"luma\",\"paramsTypes\":{\"luma\":\"sampler2D\"},\"defaultParams\":{\"luma\":null},\"glsl\":\"// Author: gre\\n// License: MIT\\n\\nuniform sampler2D luma;\\n\\nvec4 transition(vec2 uv) {\\n  return mix(\\n    getToColor(uv),\\n    getFromColor(uv),\\n    step(progress, texture2D(luma, uv).r)\\n  );\\n}\\n\",\"author\":\"gre\",\"license\":\"MIT\",\"createdAt\":\"Tue, 30 May 2017 14:26:44 +0200\",\"updatedAt\":\"Tue, 30 May 2017 14:26:44 +0200\"},{\"name\":\"luminance_melt\",\"paramsTypes\":{\"direction\":\"bool\",\"l_threshold\":\"float\",\"above\":\"bool\"},\"defaultParams\":{\"direction\":true,\"l_threshold\":0.8,\"above\":false},\"glsl\":\"// Author: 0gust1\\n// License: MIT\\n//My own first transition — based on crosshatch code (from pthrasher), using  simplex noise formula (copied and pasted)\\n//-> cooler with high contrasted images (isolated dark subject on light background f.e.)\\n//TODO : try to rebase it on DoomTransition (from zeh)?\\n//optimizations :\\n//luminance (see http://stackoverflow.com/questions/596216/formula-to-determine-brightness-of-rgb-color#answer-596241)\\n// Y = (R+R+B+G+G+G)/6\\n//or Y = (R+R+R+B+G+G+G+G)>>3 \\n\\n\\n//direction of movement :  0 : up, 1, down\\nuniform bool direction; // = 1 \\n//luminance threshold\\nuniform float l_threshold; // = 0.8 \\n//does the movement takes effect above or below luminance threshold ?\\nuniform bool above; // = false \\n\\n\\n//Random function borrowed from everywhere\\nfloat rand(vec2 co){\\n  return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\\n}\\n\\n\\n// Simplex noise :\\n// Description : Array and textureless GLSL 2D simplex noise function.\\n//      Author : Ian McEwan, Ashima Arts.\\n//  Maintainer : ijm\\n//     Lastmod : 20110822 (ijm)\\n//     License : MIT  \\n//               2011 Ashima Arts. All rights reserved.\\n//               Distributed under the MIT License. See LICENSE file.\\n//               https://github.com/ashima/webgl-noise\\n// \\n\\nvec3 mod289(vec3 x) {\\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\\n}\\n\\nvec2 mod289(vec2 x) {\\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\\n}\\n\\nvec3 permute(vec3 x) {\\n  return mod289(((x*34.0)+1.0)*x);\\n}\\n\\nfloat snoise(vec2 v)\\n  {\\n  const vec4 C = vec4(0.211324865405187,  // (3.0-sqrt(3.0))/6.0\\n                      0.366025403784439,  // 0.5*(sqrt(3.0)-1.0)\\n                     -0.577350269189626,  // -1.0 + 2.0 * C.x\\n                      0.024390243902439); // 1.0 / 41.0\\n// First corner\\n  vec2 i  = floor(v + dot(v, C.yy) );\\n  vec2 x0 = v -   i + dot(i, C.xx);\\n\\n// Other corners\\n  vec2 i1;\\n  //i1.x = step( x0.y, x0.x ); // x0.x > x0.y ? 1.0 : 0.0\\n  //i1.y = 1.0 - i1.x;\\n  i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\\n  // x0 = x0 - 0.0 + 0.0 * C.xx ;\\n  // x1 = x0 - i1 + 1.0 * C.xx ;\\n  // x2 = x0 - 1.0 + 2.0 * C.xx ;\\n  vec4 x12 = x0.xyxy + C.xxzz;\\n  x12.xy -= i1;\\n\\n// Permutations\\n  i = mod289(i); // Avoid truncation effects in permutation\\n  vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 ))\\n\\t\\t+ i.x + vec3(0.0, i1.x, 1.0 ));\\n\\n  vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0);\\n  m = m*m ;\\n  m = m*m ;\\n\\n// Gradients: 41 points uniformly over a line, mapped onto a diamond.\\n// The ring size 17*17 = 289 is close to a multiple of 41 (41*7 = 287)\\n\\n  vec3 x = 2.0 * fract(p * C.www) - 1.0;\\n  vec3 h = abs(x) - 0.5;\\n  vec3 ox = floor(x + 0.5);\\n  vec3 a0 = x - ox;\\n\\n// Normalise gradients implicitly by scaling m\\n// Approximation of: m *= inversesqrt( a0*a0 + h*h );\\n  m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );\\n\\n// Compute final noise value at P\\n  vec3 g;\\n  g.x  = a0.x  * x0.x  + h.x  * x0.y;\\n  g.yz = a0.yz * x12.xz + h.yz * x12.yw;\\n  return 130.0 * dot(m, g);\\n}\\n\\n// Simplex noise -- end\\n\\nfloat luminance(vec4 color){\\n  //(0.299*R + 0.587*G + 0.114*B)\\n  return color.r*0.299+color.g*0.587+color.b*0.114;\\n}\\n\\nvec2 center = vec2(1.0, direction);\\n\\nvec4 transition(vec2 uv) {\\n  vec2 p = uv.xy / vec2(1.0).xy;\\n  if (progress == 0.0) {\\n    return getFromColor(p);\\n  } else if (progress == 1.0) {\\n    return getToColor(p);\\n  } else {\\n    float x = progress;\\n    float dist = distance(center, p)- progress*exp(snoise(vec2(p.x, 0.0)));\\n    float r = x - rand(vec2(p.x, 0.1));\\n    float m;\\n    if(above){\\n     m = dist <= r && luminance(getFromColor(p))>l_threshold ? 1.0 : (progress*progress*progress);\\n    }\\n    else{\\n     m = dist <= r && luminance(getFromColor(p))<l_threshold ? 1.0 : (progress*progress*progress);  \\n    }\\n    return mix(getFromColor(p), getToColor(p), m);    \\n  }\\n}\\n\",\"author\":\"0gust1\",\"license\":\"MIT\",\"createdAt\":\"Wed, 24 Jan 2018 19:02:32 +0100\",\"updatedAt\":\"Wed, 24 Jan 2018 19:02:32 +0100\"},{\"name\":\"morph\",\"paramsTypes\":{\"strength\":\"float\"},\"defaultParams\":{\"strength\":0.1},\"glsl\":\"// Author: paniq\\n// License: MIT\\nuniform float strength; // = 0.1\\n\\nvec4 transition(vec2 p) {\\n  vec4 ca = getFromColor(p);\\n  vec4 cb = getToColor(p);\\n  \\n  vec2 oa = (((ca.rg+ca.b)*0.5)*2.0-1.0);\\n  vec2 ob = (((cb.rg+cb.b)*0.5)*2.0-1.0);\\n  vec2 oc = mix(oa,ob,0.5)*strength;\\n  \\n  float w0 = progress;\\n  float w1 = 1.0-w0;\\n  return mix(getFromColor(p+oc*w0), getToColor(p-oc*w1), progress);\\n}\\n\",\"author\":\"paniq\",\"license\":\"MIT\",\"createdAt\":\"Thu, 10 Aug 2017 00:27:36 +0200\",\"updatedAt\":\"Thu, 10 Aug 2017 00:32:01 +0200\"},{\"name\":\"multiply_blend\",\"paramsTypes\":{},\"defaultParams\":{},\"glsl\":\"// Author: Fernando Kuteken\\n// License: MIT\\n\\nvec4 blend(vec4 a, vec4 b) {\\n  return a * b;\\n}\\n\\nvec4 transition (vec2 uv) {\\n  \\n  vec4 blended = blend(getFromColor(uv), getToColor(uv));\\n  \\n  if (progress < 0.5)\\n    return mix(getFromColor(uv), blended, 2.0 * progress);\\n  else\\n    return mix(blended, getToColor(uv), 2.0 * progress - 1.0);\\n}\\n\\n\",\"author\":\"Fernando Kuteken\",\"license\":\"MIT\",\"createdAt\":\"Tue, 30 May 2017 14:26:44 +0200\",\"updatedAt\":\"Tue, 30 May 2017 14:26:44 +0200\"},{\"name\":\"perlin\",\"paramsTypes\":{\"scale\":\"float\",\"smoothness\":\"float\",\"seed\":\"float\"},\"defaultParams\":{\"scale\":4,\"smoothness\":0.01,\"seed\":12.9898},\"glsl\":\"// Author: Rich Harris\\n// License: MIT\\n\\n#ifdef GL_ES\\nprecision mediump float;\\n#endif\\n\\nuniform float scale; // = 4.0\\nuniform float smoothness; // = 0.01\\n\\nuniform float seed; // = 12.9898\\n\\n// http://byteblacksmith.com/improvements-to-the-canonical-one-liner-glsl-rand-for-opengl-es-2-0/\\nfloat random(vec2 co)\\n{\\n    highp float a = seed;\\n    highp float b = 78.233;\\n    highp float c = 43758.5453;\\n    highp float dt= dot(co.xy ,vec2(a,b));\\n    highp float sn= mod(dt,3.14);\\n    return fract(sin(sn) * c);\\n}\\n\\n// 2D Noise based on Morgan McGuire @morgan3d\\n// https://www.shadertoy.com/view/4dS3Wd\\nfloat noise (in vec2 st) {\\n    vec2 i = floor(st);\\n    vec2 f = fract(st);\\n\\n    // Four corners in 2D of a tile\\n    float a = random(i);\\n    float b = random(i + vec2(1.0, 0.0));\\n    float c = random(i + vec2(0.0, 1.0));\\n    float d = random(i + vec2(1.0, 1.0));\\n\\n    // Smooth Interpolation\\n\\n    // Cubic Hermine Curve.  Same as SmoothStep()\\n    vec2 u = f*f*(3.0-2.0*f);\\n    // u = smoothstep(0.,1.,f);\\n\\n    // Mix 4 coorners porcentages\\n    return mix(a, b, u.x) +\\n            (c - a)* u.y * (1.0 - u.x) +\\n            (d - b) * u.x * u.y;\\n}\\n\\nvec4 transition (vec2 uv) {\\n  vec4 from = getFromColor(uv);\\n  vec4 to = getToColor(uv);\\n  float n = noise(uv * scale);\\n  \\n  float p = mix(-smoothness, 1.0 + smoothness, progress);\\n  float lower = p - smoothness;\\n  float higher = p + smoothness;\\n  \\n  float q = smoothstep(lower, higher, n);\\n  \\n  return mix(\\n    from,\\n    to,\\n    1.0 - q\\n  );\\n}\\n\",\"author\":\"Rich Harris\",\"license\":\"MIT\",\"createdAt\":\"Tue, 23 Jan 2018 21:35:10 -0500\",\"updatedAt\":\"Wed, 24 Jan 2018 07:35:04 -0500\"},{\"name\":\"pinwheel\",\"paramsTypes\":{\"speed\":\"float\"},\"defaultParams\":{\"speed\":2},\"glsl\":\"// Author: Mr Speaker\\n// License: MIT\\n\\nuniform float speed; // = 2.0;\\n\\nvec4 transition(vec2 uv) {\\n  \\n  vec2 p = uv.xy / vec2(1.0).xy;\\n  \\n  float circPos = atan(p.y - 0.5, p.x - 0.5) + progress * speed;\\n  float modPos = mod(circPos, 3.1415 / 4.);\\n  float signed = sign(progress - modPos);\\n  \\n  return mix(getToColor(p), getFromColor(p), step(signed, 0.5));\\n  \\n}\\n\",\"author\":\"Mr Speaker\",\"license\":\"MIT\",\"createdAt\":\"Tue, 30 May 2017 09:04:31 -0400\",\"updatedAt\":\"Tue, 30 May 2017 09:04:31 -0400\"},{\"name\":\"pixelize\",\"paramsTypes\":{\"squaresMin\":\"ivec2\",\"steps\":\"int\"},\"defaultParams\":{\"squaresMin\":[20,20],\"steps\":50},\"glsl\":\"// Author: gre\\n// License: MIT\\n// forked from https://gist.github.com/benraziel/c528607361d90a072e98\\n\\nuniform ivec2 squaresMin/* = ivec2(20) */; // minimum number of squares (when the effect is at its higher level)\\nuniform int steps /* = 50 */; // zero disable the stepping\\n\\nfloat d = min(progress, 1.0 - progress);\\nfloat dist = steps>0 ? ceil(d * float(steps)) / float(steps) : d;\\nvec2 squareSize = 2.0 * dist / vec2(squaresMin);\\n\\nvec4 transition(vec2 uv) {\\n  vec2 p = dist>0.0 ? (floor(uv / squareSize) + 0.5) * squareSize : uv;\\n  return mix(getFromColor(p), getToColor(p), progress);\\n}\\n\",\"author\":\"gre\",\"license\":\"MIT\",\"createdAt\":\"Tue, 30 May 2017 14:26:44 +0200\",\"updatedAt\":\"Wed, 31 May 2017 10:58:26 +0200\"},{\"name\":\"polar_function\",\"paramsTypes\":{\"segments\":\"int\"},\"defaultParams\":{\"segments\":5},\"glsl\":\"// Author: Fernando Kuteken\\n// License: MIT\\n\\n#define PI 3.14159265359\\n\\nuniform int segments; // = 5;\\n\\nvec4 transition (vec2 uv) {\\n  \\n  float angle = atan(uv.y - 0.5, uv.x - 0.5) - 0.5 * PI;\\n  float normalized = (angle + 1.5 * PI) * (2.0 * PI);\\n  \\n  float radius = (cos(float(segments) * angle) + 4.0) / 4.0;\\n  float difference = length(uv - vec2(0.5, 0.5));\\n  \\n  if (difference > radius * progress)\\n    return getFromColor(uv);\\n  else\\n    return getToColor(uv);\\n}\\n\",\"author\":\"Fernando Kuteken\",\"license\":\"MIT\",\"createdAt\":\"Tue, 30 May 2017 14:26:44 +0200\",\"updatedAt\":\"Tue, 30 May 2017 14:26:44 +0200\"},{\"name\":\"randomsquares\",\"paramsTypes\":{\"size\":\"ivec2\",\"smoothness\":\"float\"},\"defaultParams\":{\"size\":[10,10],\"smoothness\":0.5},\"glsl\":\"// Author: gre\\n// License: MIT\\n\\nuniform ivec2 size; // = ivec2(10, 10)\\nuniform float smoothness; // = 0.5\\n \\nfloat rand (vec2 co) {\\n  return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\\n}\\n\\nvec4 transition(vec2 p) {\\n  float r = rand(floor(vec2(size) * p));\\n  float m = smoothstep(0.0, -smoothness, r - (progress * (1.0 + smoothness)));\\n  return mix(getFromColor(p), getToColor(p), m);\\n}\\n\",\"author\":\"gre\",\"license\":\"MIT\",\"createdAt\":\"Tue, 30 May 2017 14:26:44 +0200\",\"updatedAt\":\"Tue, 30 May 2017 14:26:44 +0200\"},{\"name\":\"ripple\",\"paramsTypes\":{\"amplitude\":\"float\",\"speed\":\"float\"},\"defaultParams\":{\"amplitude\":100,\"speed\":50},\"glsl\":\"// Author: gre\\n// License: MIT\\nuniform float amplitude; // = 100.0\\nuniform float speed; // = 50.0\\n\\nvec4 transition (vec2 uv) {\\n  vec2 dir = uv - vec2(.5);\\n  float dist = length(dir);\\n  vec2 offset = dir * (sin(progress * dist * amplitude - progress * speed) + .5) / 30.;\\n  return mix(\\n    getFromColor(uv + offset),\\n    getToColor(uv),\\n    smoothstep(0.2, 1.0, progress)\\n  );\\n}\\n\",\"author\":\"gre\",\"license\":\"MIT\",\"createdAt\":\"Tue, 30 May 2017 15:15:27 +0200\",\"updatedAt\":\"Tue, 30 May 2017 15:15:27 +0200\"},{\"name\":\"rotate_scale_fade\",\"paramsTypes\":{\"center\":\"vec2\",\"rotations\":\"float\",\"scale\":\"float\",\"backColor\":\"vec4\"},\"defaultParams\":{\"center\":[0.5,0.5],\"rotations\":1,\"scale\":8,\"backColor\":[0.15,0.15,0.15,1]},\"glsl\":\"// Author: Fernando Kuteken\\n// License: MIT\\n\\n#define PI 3.14159265359\\n\\nuniform vec2 center; // = vec2(0.5, 0.5);\\nuniform float rotations; // = 1;\\nuniform float scale; // = 8;\\nuniform vec4 backColor; // = vec4(0.15, 0.15, 0.15, 1.0);\\n\\nvec4 transition (vec2 uv) {\\n  \\n  vec2 difference = uv - center;\\n  vec2 dir = normalize(difference);\\n  float dist = length(difference);\\n  \\n  float angle = 2.0 * PI * rotations * progress;\\n  \\n  float c = cos(angle);\\n  float s = sin(angle);\\n  \\n  float currentScale = mix(scale, 1.0, 2.0 * abs(progress - 0.5));\\n  \\n  vec2 rotatedDir = vec2(dir.x  * c - dir.y * s, dir.x * s + dir.y * c);\\n  vec2 rotatedUv = center + rotatedDir * dist / currentScale;\\n  \\n  if (rotatedUv.x < 0.0 || rotatedUv.x > 1.0 ||\\n      rotatedUv.y < 0.0 || rotatedUv.y > 1.0)\\n    return backColor;\\n    \\n  return mix(getFromColor(rotatedUv), getToColor(rotatedUv), progress);\\n}\\n\",\"author\":\"Fernando Kuteken\",\"license\":\"MIT\",\"createdAt\":\"Tue, 30 May 2017 14:26:44 +0200\",\"updatedAt\":\"Tue, 30 May 2017 14:26:44 +0200\"},{\"name\":\"squareswire\",\"paramsTypes\":{\"squares\":\"ivec2\",\"direction\":\"vec2\",\"smoothness\":\"float\"},\"defaultParams\":{\"squares\":[10,10],\"direction\":[1,-0.5],\"smoothness\":1.6},\"glsl\":\"// Author: gre\\n// License: MIT\\n \\nuniform ivec2 squares;// = ivec2(10,10)\\nuniform vec2 direction;// = vec2(1.0, -0.5)\\nuniform float smoothness; // = 1.6\\n\\nconst vec2 center = vec2(0.5, 0.5);\\nvec4 transition (vec2 p) {\\n  vec2 v = normalize(direction);\\n  v /= abs(v.x)+abs(v.y);\\n  float d = v.x * center.x + v.y * center.y;\\n  float offset = smoothness;\\n  float pr = smoothstep(-offset, 0.0, v.x * p.x + v.y * p.y - (d-0.5+progress*(1.+offset)));\\n  vec2 squarep = fract(p*vec2(squares));\\n  vec2 squaremin = vec2(pr/2.0);\\n  vec2 squaremax = vec2(1.0 - pr/2.0);\\n  float a = (1.0 - step(progress, 0.0)) * step(squaremin.x, squarep.x) * step(squaremin.y, squarep.y) * step(squarep.x, squaremax.x) * step(squarep.y, squaremax.y);\\n  return mix(getFromColor(p), getToColor(p), a);\\n}\\n\",\"author\":\"gre\",\"license\":\"MIT\",\"createdAt\":\"Tue, 30 May 2017 14:26:44 +0200\",\"updatedAt\":\"Tue, 30 May 2017 14:26:44 +0200\"},{\"name\":\"squeeze\",\"paramsTypes\":{\"colorSeparation\":\"float\"},\"defaultParams\":{\"colorSeparation\":0.04},\"glsl\":\"// Author: gre\\n// License: MIT\\n \\nuniform float colorSeparation; // = 0.04\\n \\nvec4 transition (vec2 uv) {\\n  float y = 0.5 + (uv.y-0.5) / (1.0-progress);\\n  if (y < 0.0 || y > 1.0) {\\n     return getToColor(uv);\\n  }\\n  else {\\n    vec2 fp = vec2(uv.x, y);\\n    vec2 off = progress * vec2(0.0, colorSeparation);\\n    vec4 c = getFromColor(fp);\\n    vec4 cn = getFromColor(fp - off);\\n    vec4 cp = getFromColor(fp + off);\\n    return vec4(cn.r, c.g, cp.b, c.a);\\n  }\\n}\\n\",\"author\":\"gre\",\"license\":\"MIT\",\"createdAt\":\"Tue, 30 May 2017 14:26:44 +0200\",\"updatedAt\":\"Tue, 30 May 2017 14:26:44 +0200\"},{\"name\":\"swap\",\"paramsTypes\":{\"reflection\":\"float\",\"perspective\":\"float\",\"depth\":\"float\"},\"defaultParams\":{\"reflection\":0.4,\"perspective\":0.2,\"depth\":3},\"glsl\":\"// Author: gre\\n// License: MIT\\n// General parameters\\nuniform float reflection; // = 0.4\\nuniform float perspective; // = 0.2\\nuniform float depth; // = 3.0\\n \\nconst vec4 black = vec4(0.0, 0.0, 0.0, 1.0);\\nconst vec2 boundMin = vec2(0.0, 0.0);\\nconst vec2 boundMax = vec2(1.0, 1.0);\\n \\nbool inBounds (vec2 p) {\\n  return all(lessThan(boundMin, p)) && all(lessThan(p, boundMax));\\n}\\n \\nvec2 project (vec2 p) {\\n  return p * vec2(1.0, -1.2) + vec2(0.0, -0.02);\\n}\\n \\nvec4 bgColor (vec2 p, vec2 pfr, vec2 pto) {\\n  vec4 c = black;\\n  pfr = project(pfr);\\n  if (inBounds(pfr)) {\\n    c += mix(black, getFromColor(pfr), reflection * mix(1.0, 0.0, pfr.y));\\n  }\\n  pto = project(pto);\\n  if (inBounds(pto)) {\\n    c += mix(black, getToColor(pto), reflection * mix(1.0, 0.0, pto.y));\\n  }\\n  return c;\\n}\\n \\nvec4 transition(vec2 p) {\\n  vec2 pfr, pto = vec2(-1.);\\n \\n  float size = mix(1.0, depth, progress);\\n  float persp = perspective * progress;\\n  pfr = (p + vec2(-0.0, -0.5)) * vec2(size/(1.0-perspective*progress), size/(1.0-size*persp*p.x)) + vec2(0.0, 0.5);\\n \\n  size = mix(1.0, depth, 1.-progress);\\n  persp = perspective * (1.-progress);\\n  pto = (p + vec2(-1.0, -0.5)) * vec2(size/(1.0-perspective*(1.0-progress)), size/(1.0-size*persp*(0.5-p.x))) + vec2(1.0, 0.5);\\n\\n  if (progress < 0.5) {\\n    if (inBounds(pfr)) {\\n      return getFromColor(pfr);\\n    }\\n    if (inBounds(pto)) {\\n      return getToColor(pto);\\n    }  \\n  }\\n  if (inBounds(pto)) {\\n    return getToColor(pto);\\n  }\\n  if (inBounds(pfr)) {\\n    return getFromColor(pfr);\\n  }\\n  return bgColor(p, pfr, pto);\\n}\\n\",\"author\":\"gre\",\"license\":\"MIT\",\"createdAt\":\"Tue, 30 May 2017 14:26:44 +0200\",\"updatedAt\":\"Sun, 18 Feb 2018 17:45:50 +0100\"},{\"name\":\"undulatingBurnOut\",\"paramsTypes\":{\"smoothness\":\"float\",\"center\":\"vec2\",\"color\":\"vec3\"},\"defaultParams\":{\"smoothness\":0.03,\"center\":[0.5,0.5],\"color\":[0,0,0]},\"glsl\":\"// License: MIT\\n// Author: pthrasher\\n// adapted by gre from https://gist.github.com/pthrasher/8e6226b215548ba12734\\n\\nuniform float smoothness; // = 0.03\\nuniform vec2 center; // = vec2(0.5)\\nuniform vec3 color; // = vec3(0.0)\\n\\nconst float M_PI = 3.14159265358979323846;\\n\\nfloat quadraticInOut(float t) {\\n  float p = 2.0 * t * t;\\n  return t < 0.5 ? p : -p + (4.0 * t) - 1.0;\\n}\\n\\nfloat getGradient(float r, float dist) {\\n  float d = r - dist;\\n  return mix(\\n    smoothstep(-smoothness, 0.0, r - dist * (1.0 + smoothness)),\\n    -1.0 - step(0.005, d),\\n    step(-0.005, d) * step(d, 0.01)\\n  );\\n}\\n\\nfloat getWave(vec2 p){\\n  vec2 _p = p - center; // offset from center\\n  float rads = atan(_p.y, _p.x);\\n  float degs = degrees(rads) + 180.0;\\n  vec2 range = vec2(0.0, M_PI * 30.0);\\n  vec2 domain = vec2(0.0, 360.0);\\n  float ratio = (M_PI * 30.0) / 360.0;\\n  degs = degs * ratio;\\n  float x = progress;\\n  float magnitude = mix(0.02, 0.09, smoothstep(0.0, 1.0, x));\\n  float offset = mix(40.0, 30.0, smoothstep(0.0, 1.0, x));\\n  float ease_degs = quadraticInOut(sin(degs));\\n  float deg_wave_pos = (ease_degs * magnitude) * sin(x * offset);\\n  return x + deg_wave_pos;\\n}\\n\\nvec4 transition(vec2 p) {\\n  float dist = distance(center, p);\\n  float m = getGradient(getWave(p), dist);\\n  vec4 cfrom = getFromColor(p);\\n  vec4 cto = getToColor(p);\\n  return mix(mix(cfrom, cto, m), mix(cfrom, vec4(color, 1.0), 0.75), step(m, -2.0));\\n}\\n\",\"license\":\"MIT\",\"author\":\"pthrasher\",\"createdAt\":\"Mon, 12 Jun 2017 10:23:37 +0800\",\"updatedAt\":\"Mon, 12 Jun 2017 10:23:37 +0800\"},{\"name\":\"wind\",\"paramsTypes\":{\"size\":\"float\"},\"defaultParams\":{\"size\":0.2},\"glsl\":\"// Author: gre\\n// License: MIT\\n\\n// Custom parameters\\nuniform float size; // = 0.2\\n\\nfloat rand (vec2 co) {\\n  return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\\n}\\n\\nvec4 transition (vec2 uv) {\\n  float r = rand(vec2(0, uv.y));\\n  float m = smoothstep(0.0, -size, uv.x*(1.0-size) + size*r - (progress * (1.0 + size)));\\n  return mix(\\n    getFromColor(uv),\\n    getToColor(uv),\\n    m\\n  );\\n}\\n\",\"author\":\"gre\",\"license\":\"MIT\",\"createdAt\":\"Tue, 30 May 2017 14:26:44 +0200\",\"updatedAt\":\"Tue, 30 May 2017 14:26:44 +0200\"},{\"name\":\"windowblinds\",\"paramsTypes\":{},\"defaultParams\":{},\"glsl\":\"// Author: Fabien Benetou\\n// License: MIT\\n\\nvec4 transition (vec2 uv) {\\n  float t = progress;\\n  \\n  if (mod(floor(uv.y*100.*progress),2.)==0.)\\n    t*=2.-.5;\\n  \\n  return mix(\\n    getFromColor(uv),\\n    getToColor(uv),\\n    mix(t, progress, smoothstep(0.8, 1.0, progress))\\n  );\\n}\\n\",\"author\":\"Fabien Benetou\",\"license\":\"MIT\",\"createdAt\":\"Wed, 31 May 2017 14:11:48 +0200\",\"updatedAt\":\"Wed, 31 May 2017 14:11:48 +0200\"},{\"name\":\"windowslice\",\"paramsTypes\":{\"count\":\"float\",\"smoothness\":\"float\"},\"defaultParams\":{\"count\":10,\"smoothness\":0.5},\"glsl\":\"// Author: gre\\n// License: MIT\\n\\nuniform float count; // = 10.0\\nuniform float smoothness; // = 0.5\\n\\nvec4 transition (vec2 p) {\\n  float pr = smoothstep(-smoothness, 0.0, p.x - progress * (1.0 + smoothness));\\n  float s = step(pr, fract(count * p.x));\\n  return mix(getFromColor(p), getToColor(p), s);\\n}\\n\",\"author\":\"gre\",\"license\":\"MIT\",\"createdAt\":\"Wed, 28 Mar 2018 17:23:26 +0200\",\"updatedAt\":\"Wed, 28 Mar 2018 17:23:26 +0200\"},{\"name\":\"wipeDown\",\"paramsTypes\":{},\"defaultParams\":{},\"glsl\":\"// Author: Jake Nelson\\n// License: MIT\\n\\nvec4 transition(vec2 uv) {\\n  vec2 p=uv.xy/vec2(1.0).xy;\\n  vec4 a=getFromColor(p);\\n  vec4 b=getToColor(p);\\n  return mix(a, b, step(1.0-p.y,progress));\\n}\\n\",\"author\":\"Jake Nelson\",\"license\":\"MIT\",\"createdAt\":\"Wed, 1 Nov 2017 15:26:01 -0500\",\"updatedAt\":\"Thu, 2 Nov 2017 18:39:26 -0500\"},{\"name\":\"wipeLeft\",\"paramsTypes\":{},\"defaultParams\":{},\"glsl\":\"// Author: Jake Nelson\\n// License: MIT\\n\\nvec4 transition(vec2 uv) {\\n  vec2 p=uv.xy/vec2(1.0).xy;\\n  vec4 a=getFromColor(p);\\n  vec4 b=getToColor(p);\\n  return mix(a, b, step(1.0-p.x,progress));\\n}\\n\",\"author\":\"Jake Nelson\",\"license\":\"MIT\",\"createdAt\":\"Wed, 1 Nov 2017 15:26:28 -0500\",\"updatedAt\":\"Fri, 3 Nov 2017 18:03:50 +0100\"},{\"name\":\"wipeRight\",\"paramsTypes\":{},\"defaultParams\":{},\"glsl\":\"// Author: Jake Nelson\\n// License: MIT\\n\\nvec4 transition(vec2 uv) {\\n  vec2 p=uv.xy/vec2(1.0).xy;\\n  vec4 a=getFromColor(p);\\n  vec4 b=getToColor(p);\\n  return mix(a, b, step(0.0+p.x,progress));\\n}\\n\",\"author\":\"Jake Nelson\",\"license\":\"MIT\",\"createdAt\":\"Wed, 1 Nov 2017 15:27:02 -0500\",\"updatedAt\":\"Thu, 2 Nov 2017 18:40:22 -0500\"},{\"name\":\"wipeUp\",\"paramsTypes\":{},\"defaultParams\":{},\"glsl\":\"// Author: Jake Nelson\\n// License: MIT\\n\\nvec4 transition(vec2 uv) {\\n  vec2 p=uv.xy/vec2(1.0).xy;\\n  vec4 a=getFromColor(p);\\n  vec4 b=getToColor(p);\\n  return mix(a, b, step(0.0+p.y,progress));\\n}\\n\",\"author\":\"Jake Nelson\",\"license\":\"MIT\",\"createdAt\":\"Wed, 1 Nov 2017 15:24:36 -0500\",\"updatedAt\":\"Thu, 2 Nov 2017 18:37:42 -0500\"}]\n\n//# sourceURL=webpack://rmh_touch/./node_modules/gl-transitions/index.js?");

/***/ }),

/***/ "./node_modules/glsl-shader-name/index.js":
/*!************************************************!*\
  !*** ./node_modules/glsl-shader-name/index.js ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var tokenize = __webpack_require__(/*! glsl-tokenizer */ \"./node_modules/glsl-tokenizer/string.js\")\nvar atob     = __webpack_require__(/*! atob-lite */ \"./node_modules/atob-lite/atob-node.js\")\n\nmodule.exports = getName\n\nfunction getName(src) {\n  var tokens = Array.isArray(src)\n    ? src\n    : tokenize(src)\n\n  for (var i = 0; i < tokens.length; i++) {\n    var token = tokens[i]\n    if (token.type !== 'preprocessor') continue\n    var match = token.data.match(/\\#define\\s+SHADER_NAME(_B64)?\\s+(.+)$/)\n    if (!match) continue\n    if (!match[2]) continue\n\n    var b64  = match[1]\n    var name = match[2]\n\n    return (b64 ? atob(name) : name).trim()\n  }\n}\n\n\n//# sourceURL=webpack://rmh_touch/./node_modules/glsl-shader-name/index.js?");

/***/ }),

/***/ "./node_modules/glsl-tokenizer/index.js":
/*!**********************************************!*\
  !*** ./node_modules/glsl-tokenizer/index.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("module.exports = tokenize\r\n\r\nvar literals100 = __webpack_require__(/*! ./lib/literals */ \"./node_modules/glsl-tokenizer/lib/literals.js\")\r\n  , operators = __webpack_require__(/*! ./lib/operators */ \"./node_modules/glsl-tokenizer/lib/operators.js\")\r\n  , builtins100 = __webpack_require__(/*! ./lib/builtins */ \"./node_modules/glsl-tokenizer/lib/builtins.js\")\r\n  , literals300es = __webpack_require__(/*! ./lib/literals-300es */ \"./node_modules/glsl-tokenizer/lib/literals-300es.js\")\r\n  , builtins300es = __webpack_require__(/*! ./lib/builtins-300es */ \"./node_modules/glsl-tokenizer/lib/builtins-300es.js\")\r\n\r\nvar NORMAL = 999          // <-- never emitted\r\n  , TOKEN = 9999          // <-- never emitted\r\n  , BLOCK_COMMENT = 0\r\n  , LINE_COMMENT = 1\r\n  , PREPROCESSOR = 2\r\n  , OPERATOR = 3\r\n  , INTEGER = 4\r\n  , FLOAT = 5\r\n  , IDENT = 6\r\n  , BUILTIN = 7\r\n  , KEYWORD = 8\r\n  , WHITESPACE = 9\r\n  , EOF = 10\r\n  , HEX = 11\r\n\r\nvar map = [\r\n    'block-comment'\r\n  , 'line-comment'\r\n  , 'preprocessor'\r\n  , 'operator'\r\n  , 'integer'\r\n  , 'float'\r\n  , 'ident'\r\n  , 'builtin'\r\n  , 'keyword'\r\n  , 'whitespace'\r\n  , 'eof'\r\n  , 'integer'\r\n]\r\n\r\nfunction tokenize(opt) {\r\n  var i = 0\r\n    , total = 0\r\n    , mode = NORMAL\r\n    , c\r\n    , last\r\n    , content = []\r\n    , tokens = []\r\n    , token_idx = 0\r\n    , token_offs = 0\r\n    , line = 1\r\n    , col = 0\r\n    , start = 0\r\n    , isnum = false\r\n    , isoperator = false\r\n    , input = ''\r\n    , len\r\n\r\n  opt = opt || {}\r\n  var allBuiltins = builtins100\r\n  var allLiterals = literals100\r\n  if (opt.version === '300 es') {\r\n    allBuiltins = builtins300es\r\n    allLiterals = literals300es\r\n  }\r\n\r\n  // cache by name\r\n  var builtinsDict = {}, literalsDict = {}\r\n  for (var i = 0; i < allBuiltins.length; i++) {\r\n    builtinsDict[allBuiltins[i]] = true\r\n  }\r\n  for (var i = 0; i < allLiterals.length; i++) {\r\n    literalsDict[allLiterals[i]] = true\r\n  }\r\n\r\n  return function(data) {\r\n    tokens = []\r\n    if (data !== null) return write(data)\r\n    return end()\r\n  }\r\n\r\n  function token(data) {\r\n    if (data.length) {\r\n      tokens.push({\r\n        type: map[mode]\r\n      , data: data\r\n      , position: start\r\n      , line: line\r\n      , column: col\r\n      })\r\n    }\r\n  }\r\n\r\n  function write(chunk) {\r\n    i = 0\r\n\r\n    if (chunk.toString) chunk = chunk.toString()\r\n\r\n    input += chunk.replace(/\\r\\n/g, '\\n')\r\n    len = input.length\r\n\r\n\r\n    var last\r\n\r\n    while(c = input[i], i < len) {\r\n      last = i\r\n\r\n      switch(mode) {\r\n        case BLOCK_COMMENT: i = block_comment(); break\r\n        case LINE_COMMENT: i = line_comment(); break\r\n        case PREPROCESSOR: i = preprocessor(); break\r\n        case OPERATOR: i = operator(); break\r\n        case INTEGER: i = integer(); break\r\n        case HEX: i = hex(); break\r\n        case FLOAT: i = decimal(); break\r\n        case TOKEN: i = readtoken(); break\r\n        case WHITESPACE: i = whitespace(); break\r\n        case NORMAL: i = normal(); break\r\n      }\r\n\r\n      if(last !== i) {\r\n        switch(input[last]) {\r\n          case '\\n': col = 0; ++line; break\r\n          default: ++col; break\r\n        }\r\n      }\r\n    }\r\n\r\n    total += i\r\n    input = input.slice(i)\r\n    return tokens\r\n  }\r\n\r\n  function end(chunk) {\r\n    if(content.length) {\r\n      token(content.join(''))\r\n    }\r\n\r\n    mode = EOF\r\n    token('(eof)')\r\n    return tokens\r\n  }\r\n\r\n  function normal() {\r\n    content = content.length ? [] : content\r\n\r\n    if(last === '/' && c === '*') {\r\n      start = total + i - 1\r\n      mode = BLOCK_COMMENT\r\n      last = c\r\n      return i + 1\r\n    }\r\n\r\n    if(last === '/' && c === '/') {\r\n      start = total + i - 1\r\n      mode = LINE_COMMENT\r\n      last = c\r\n      return i + 1\r\n    }\r\n\r\n    if(c === '#') {\r\n      mode = PREPROCESSOR\r\n      start = total + i\r\n      return i\r\n    }\r\n\r\n    if(/\\s/.test(c)) {\r\n      mode = WHITESPACE\r\n      start = total + i\r\n      return i\r\n    }\r\n\r\n    isnum = /\\d/.test(c)\r\n    isoperator = /[^\\w_]/.test(c)\r\n\r\n    start = total + i\r\n    mode = isnum ? INTEGER : isoperator ? OPERATOR : TOKEN\r\n    return i\r\n  }\r\n\r\n  function whitespace() {\r\n    if(/[^\\s]/g.test(c)) {\r\n      token(content.join(''))\r\n      mode = NORMAL\r\n      return i\r\n    }\r\n    content.push(c)\r\n    last = c\r\n    return i + 1\r\n  }\r\n\r\n  function preprocessor() {\r\n    if((c === '\\r' || c === '\\n') && last !== '\\\\') {\r\n      token(content.join(''))\r\n      mode = NORMAL\r\n      return i\r\n    }\r\n    content.push(c)\r\n    last = c\r\n    return i + 1\r\n  }\r\n\r\n  function line_comment() {\r\n    return preprocessor()\r\n  }\r\n\r\n  function block_comment() {\r\n    if(c === '/' && last === '*') {\r\n      content.push(c)\r\n      token(content.join(''))\r\n      mode = NORMAL\r\n      return i + 1\r\n    }\r\n\r\n    content.push(c)\r\n    last = c\r\n    return i + 1\r\n  }\r\n\r\n  function operator() {\r\n    if(last === '.' && /\\d/.test(c)) {\r\n      mode = FLOAT\r\n      return i\r\n    }\r\n\r\n    if(last === '/' && c === '*') {\r\n      mode = BLOCK_COMMENT\r\n      return i\r\n    }\r\n\r\n    if(last === '/' && c === '/') {\r\n      mode = LINE_COMMENT\r\n      return i\r\n    }\r\n\r\n    if(c === '.' && content.length) {\r\n      while(determine_operator(content));\r\n\r\n      mode = FLOAT\r\n      return i\r\n    }\r\n\r\n    if(c === ';' || c === ')' || c === '(') {\r\n      if(content.length) while(determine_operator(content));\r\n      token(c)\r\n      mode = NORMAL\r\n      return i + 1\r\n    }\r\n\r\n    var is_composite_operator = content.length === 2 && c !== '='\r\n    if(/[\\w_\\d\\s]/.test(c) || is_composite_operator) {\r\n      while(determine_operator(content));\r\n      mode = NORMAL\r\n      return i\r\n    }\r\n\r\n    content.push(c)\r\n    last = c\r\n    return i + 1\r\n  }\r\n\r\n  function determine_operator(buf) {\r\n    var j = 0\r\n      , idx\r\n      , res\r\n\r\n    do {\r\n      idx = operators.indexOf(buf.slice(0, buf.length + j).join(''))\r\n      res = operators[idx]\r\n\r\n      if(idx === -1) {\r\n        if(j-- + buf.length > 0) continue\r\n        res = buf.slice(0, 1).join('')\r\n      }\r\n\r\n      token(res)\r\n\r\n      start += res.length\r\n      content = content.slice(res.length)\r\n      return content.length\r\n    } while(1)\r\n  }\r\n\r\n  function hex() {\r\n    if(/[^a-fA-F0-9]/.test(c)) {\r\n      token(content.join(''))\r\n      mode = NORMAL\r\n      return i\r\n    }\r\n\r\n    content.push(c)\r\n    last = c\r\n    return i + 1\r\n  }\r\n\r\n  function integer() {\r\n    if(c === '.') {\r\n      content.push(c)\r\n      mode = FLOAT\r\n      last = c\r\n      return i + 1\r\n    }\r\n\r\n    if(/[eE]/.test(c)) {\r\n      content.push(c)\r\n      mode = FLOAT\r\n      last = c\r\n      return i + 1\r\n    }\r\n\r\n    if(c === 'x' && content.length === 1 && content[0] === '0') {\r\n      mode = HEX\r\n      content.push(c)\r\n      last = c\r\n      return i + 1\r\n    }\r\n\r\n    if(/[^\\d]/.test(c)) {\r\n      token(content.join(''))\r\n      mode = NORMAL\r\n      return i\r\n    }\r\n\r\n    content.push(c)\r\n    last = c\r\n    return i + 1\r\n  }\r\n\r\n  function decimal() {\r\n    if(c === 'f') {\r\n      content.push(c)\r\n      last = c\r\n      i += 1\r\n    }\r\n\r\n    if(/[eE]/.test(c)) {\r\n      content.push(c)\r\n      last = c\r\n      return i + 1\r\n    }\r\n\r\n    if ((c === '-' || c === '+') && /[eE]/.test(last)) {\r\n      content.push(c)\r\n      last = c\r\n      return i + 1\r\n    }\r\n\r\n    if(/[^\\d]/.test(c)) {\r\n      token(content.join(''))\r\n      mode = NORMAL\r\n      return i\r\n    }\r\n\r\n    content.push(c)\r\n    last = c\r\n    return i + 1\r\n  }\r\n\r\n  function readtoken() {\r\n    if(/[^\\d\\w_]/.test(c)) {\r\n      var contentstr = content.join('')\r\n      if(literalsDict[contentstr]) {\r\n        mode = KEYWORD\r\n      } else if(builtinsDict[contentstr]) {\r\n        mode = BUILTIN\r\n      } else {\r\n        mode = IDENT\r\n      }\r\n      token(content.join(''))\r\n      mode = NORMAL\r\n      return i\r\n    }\r\n    content.push(c)\r\n    last = c\r\n    return i + 1\r\n  }\r\n}\r\n\n\n//# sourceURL=webpack://rmh_touch/./node_modules/glsl-tokenizer/index.js?");

/***/ }),

/***/ "./node_modules/glsl-tokenizer/lib/builtins-300es.js":
/*!***********************************************************!*\
  !*** ./node_modules/glsl-tokenizer/lib/builtins-300es.js ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// 300es builtins/reserved words that were previously valid in v100\r\nvar v100 = __webpack_require__(/*! ./builtins */ \"./node_modules/glsl-tokenizer/lib/builtins.js\")\r\n\r\n// The texture2D|Cube functions have been removed\r\n// And the gl_ features are updated\r\nv100 = v100.slice().filter(function (b) {\r\n  return !/^(gl\\_|texture)/.test(b)\r\n})\r\n\r\nmodule.exports = v100.concat([\r\n  // the updated gl_ constants\r\n    'gl_VertexID'\r\n  , 'gl_InstanceID'\r\n  , 'gl_Position'\r\n  , 'gl_PointSize'\r\n  , 'gl_FragCoord'\r\n  , 'gl_FrontFacing'\r\n  , 'gl_FragDepth'\r\n  , 'gl_PointCoord'\r\n  , 'gl_MaxVertexAttribs'\r\n  , 'gl_MaxVertexUniformVectors'\r\n  , 'gl_MaxVertexOutputVectors'\r\n  , 'gl_MaxFragmentInputVectors'\r\n  , 'gl_MaxVertexTextureImageUnits'\r\n  , 'gl_MaxCombinedTextureImageUnits'\r\n  , 'gl_MaxTextureImageUnits'\r\n  , 'gl_MaxFragmentUniformVectors'\r\n  , 'gl_MaxDrawBuffers'\r\n  , 'gl_MinProgramTexelOffset'\r\n  , 'gl_MaxProgramTexelOffset'\r\n  , 'gl_DepthRangeParameters'\r\n  , 'gl_DepthRange'\r\n\r\n  // other builtins\r\n  , 'trunc'\r\n  , 'round'\r\n  , 'roundEven'\r\n  , 'isnan'\r\n  , 'isinf'\r\n  , 'floatBitsToInt'\r\n  , 'floatBitsToUint'\r\n  , 'intBitsToFloat'\r\n  , 'uintBitsToFloat'\r\n  , 'packSnorm2x16'\r\n  , 'unpackSnorm2x16'\r\n  , 'packUnorm2x16'\r\n  , 'unpackUnorm2x16'\r\n  , 'packHalf2x16'\r\n  , 'unpackHalf2x16'\r\n  , 'outerProduct'\r\n  , 'transpose'\r\n  , 'determinant'\r\n  , 'inverse'\r\n  , 'texture'\r\n  , 'textureSize'\r\n  , 'textureProj'\r\n  , 'textureLod'\r\n  , 'textureOffset'\r\n  , 'texelFetch'\r\n  , 'texelFetchOffset'\r\n  , 'textureProjOffset'\r\n  , 'textureLodOffset'\r\n  , 'textureProjLod'\r\n  , 'textureProjLodOffset'\r\n  , 'textureGrad'\r\n  , 'textureGradOffset'\r\n  , 'textureProjGrad'\r\n  , 'textureProjGradOffset'\r\n])\r\n\n\n//# sourceURL=webpack://rmh_touch/./node_modules/glsl-tokenizer/lib/builtins-300es.js?");

/***/ }),

/***/ "./node_modules/glsl-tokenizer/lib/builtins.js":
/*!*****************************************************!*\
  !*** ./node_modules/glsl-tokenizer/lib/builtins.js ***!
  \*****************************************************/
/***/ ((module) => {

eval("module.exports = [\r\n  // Keep this list sorted\r\n  'abs'\r\n  , 'acos'\r\n  , 'all'\r\n  , 'any'\r\n  , 'asin'\r\n  , 'atan'\r\n  , 'ceil'\r\n  , 'clamp'\r\n  , 'cos'\r\n  , 'cross'\r\n  , 'dFdx'\r\n  , 'dFdy'\r\n  , 'degrees'\r\n  , 'distance'\r\n  , 'dot'\r\n  , 'equal'\r\n  , 'exp'\r\n  , 'exp2'\r\n  , 'faceforward'\r\n  , 'floor'\r\n  , 'fract'\r\n  , 'gl_BackColor'\r\n  , 'gl_BackLightModelProduct'\r\n  , 'gl_BackLightProduct'\r\n  , 'gl_BackMaterial'\r\n  , 'gl_BackSecondaryColor'\r\n  , 'gl_ClipPlane'\r\n  , 'gl_ClipVertex'\r\n  , 'gl_Color'\r\n  , 'gl_DepthRange'\r\n  , 'gl_DepthRangeParameters'\r\n  , 'gl_EyePlaneQ'\r\n  , 'gl_EyePlaneR'\r\n  , 'gl_EyePlaneS'\r\n  , 'gl_EyePlaneT'\r\n  , 'gl_Fog'\r\n  , 'gl_FogCoord'\r\n  , 'gl_FogFragCoord'\r\n  , 'gl_FogParameters'\r\n  , 'gl_FragColor'\r\n  , 'gl_FragCoord'\r\n  , 'gl_FragData'\r\n  , 'gl_FragDepth'\r\n  , 'gl_FragDepthEXT'\r\n  , 'gl_FrontColor'\r\n  , 'gl_FrontFacing'\r\n  , 'gl_FrontLightModelProduct'\r\n  , 'gl_FrontLightProduct'\r\n  , 'gl_FrontMaterial'\r\n  , 'gl_FrontSecondaryColor'\r\n  , 'gl_LightModel'\r\n  , 'gl_LightModelParameters'\r\n  , 'gl_LightModelProducts'\r\n  , 'gl_LightProducts'\r\n  , 'gl_LightSource'\r\n  , 'gl_LightSourceParameters'\r\n  , 'gl_MaterialParameters'\r\n  , 'gl_MaxClipPlanes'\r\n  , 'gl_MaxCombinedTextureImageUnits'\r\n  , 'gl_MaxDrawBuffers'\r\n  , 'gl_MaxFragmentUniformComponents'\r\n  , 'gl_MaxLights'\r\n  , 'gl_MaxTextureCoords'\r\n  , 'gl_MaxTextureImageUnits'\r\n  , 'gl_MaxTextureUnits'\r\n  , 'gl_MaxVaryingFloats'\r\n  , 'gl_MaxVertexAttribs'\r\n  , 'gl_MaxVertexTextureImageUnits'\r\n  , 'gl_MaxVertexUniformComponents'\r\n  , 'gl_ModelViewMatrix'\r\n  , 'gl_ModelViewMatrixInverse'\r\n  , 'gl_ModelViewMatrixInverseTranspose'\r\n  , 'gl_ModelViewMatrixTranspose'\r\n  , 'gl_ModelViewProjectionMatrix'\r\n  , 'gl_ModelViewProjectionMatrixInverse'\r\n  , 'gl_ModelViewProjectionMatrixInverseTranspose'\r\n  , 'gl_ModelViewProjectionMatrixTranspose'\r\n  , 'gl_MultiTexCoord0'\r\n  , 'gl_MultiTexCoord1'\r\n  , 'gl_MultiTexCoord2'\r\n  , 'gl_MultiTexCoord3'\r\n  , 'gl_MultiTexCoord4'\r\n  , 'gl_MultiTexCoord5'\r\n  , 'gl_MultiTexCoord6'\r\n  , 'gl_MultiTexCoord7'\r\n  , 'gl_Normal'\r\n  , 'gl_NormalMatrix'\r\n  , 'gl_NormalScale'\r\n  , 'gl_ObjectPlaneQ'\r\n  , 'gl_ObjectPlaneR'\r\n  , 'gl_ObjectPlaneS'\r\n  , 'gl_ObjectPlaneT'\r\n  , 'gl_Point'\r\n  , 'gl_PointCoord'\r\n  , 'gl_PointParameters'\r\n  , 'gl_PointSize'\r\n  , 'gl_Position'\r\n  , 'gl_ProjectionMatrix'\r\n  , 'gl_ProjectionMatrixInverse'\r\n  , 'gl_ProjectionMatrixInverseTranspose'\r\n  , 'gl_ProjectionMatrixTranspose'\r\n  , 'gl_SecondaryColor'\r\n  , 'gl_TexCoord'\r\n  , 'gl_TextureEnvColor'\r\n  , 'gl_TextureMatrix'\r\n  , 'gl_TextureMatrixInverse'\r\n  , 'gl_TextureMatrixInverseTranspose'\r\n  , 'gl_TextureMatrixTranspose'\r\n  , 'gl_Vertex'\r\n  , 'greaterThan'\r\n  , 'greaterThanEqual'\r\n  , 'inversesqrt'\r\n  , 'length'\r\n  , 'lessThan'\r\n  , 'lessThanEqual'\r\n  , 'log'\r\n  , 'log2'\r\n  , 'matrixCompMult'\r\n  , 'max'\r\n  , 'min'\r\n  , 'mix'\r\n  , 'mod'\r\n  , 'normalize'\r\n  , 'not'\r\n  , 'notEqual'\r\n  , 'pow'\r\n  , 'radians'\r\n  , 'reflect'\r\n  , 'refract'\r\n  , 'sign'\r\n  , 'sin'\r\n  , 'smoothstep'\r\n  , 'sqrt'\r\n  , 'step'\r\n  , 'tan'\r\n  , 'texture2D'\r\n  , 'texture2DLod'\r\n  , 'texture2DProj'\r\n  , 'texture2DProjLod'\r\n  , 'textureCube'\r\n  , 'textureCubeLod'\r\n  , 'texture2DLodEXT'\r\n  , 'texture2DProjLodEXT'\r\n  , 'textureCubeLodEXT'\r\n  , 'texture2DGradEXT'\r\n  , 'texture2DProjGradEXT'\r\n  , 'textureCubeGradEXT'\r\n]\r\n\n\n//# sourceURL=webpack://rmh_touch/./node_modules/glsl-tokenizer/lib/builtins.js?");

/***/ }),

/***/ "./node_modules/glsl-tokenizer/lib/literals-300es.js":
/*!***********************************************************!*\
  !*** ./node_modules/glsl-tokenizer/lib/literals-300es.js ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var v100 = __webpack_require__(/*! ./literals */ \"./node_modules/glsl-tokenizer/lib/literals.js\")\r\n\r\nmodule.exports = v100.slice().concat([\r\n   'layout'\r\n  , 'centroid'\r\n  , 'smooth'\r\n  , 'case'\r\n  , 'mat2x2'\r\n  , 'mat2x3'\r\n  , 'mat2x4'\r\n  , 'mat3x2'\r\n  , 'mat3x3'\r\n  , 'mat3x4'\r\n  , 'mat4x2'\r\n  , 'mat4x3'\r\n  , 'mat4x4'\r\n  , 'uvec2'\r\n  , 'uvec3'\r\n  , 'uvec4'\r\n  , 'samplerCubeShadow'\r\n  , 'sampler2DArray'\r\n  , 'sampler2DArrayShadow'\r\n  , 'isampler2D'\r\n  , 'isampler3D'\r\n  , 'isamplerCube'\r\n  , 'isampler2DArray'\r\n  , 'usampler2D'\r\n  , 'usampler3D'\r\n  , 'usamplerCube'\r\n  , 'usampler2DArray'\r\n  , 'coherent'\r\n  , 'restrict'\r\n  , 'readonly'\r\n  , 'writeonly'\r\n  , 'resource'\r\n  , 'atomic_uint'\r\n  , 'noperspective'\r\n  , 'patch'\r\n  , 'sample'\r\n  , 'subroutine'\r\n  , 'common'\r\n  , 'partition'\r\n  , 'active'\r\n  , 'filter'\r\n  , 'image1D'\r\n  , 'image2D'\r\n  , 'image3D'\r\n  , 'imageCube'\r\n  , 'iimage1D'\r\n  , 'iimage2D'\r\n  , 'iimage3D'\r\n  , 'iimageCube'\r\n  , 'uimage1D'\r\n  , 'uimage2D'\r\n  , 'uimage3D'\r\n  , 'uimageCube'\r\n  , 'image1DArray'\r\n  , 'image2DArray'\r\n  , 'iimage1DArray'\r\n  , 'iimage2DArray'\r\n  , 'uimage1DArray'\r\n  , 'uimage2DArray'\r\n  , 'image1DShadow'\r\n  , 'image2DShadow'\r\n  , 'image1DArrayShadow'\r\n  , 'image2DArrayShadow'\r\n  , 'imageBuffer'\r\n  , 'iimageBuffer'\r\n  , 'uimageBuffer'\r\n  , 'sampler1DArray'\r\n  , 'sampler1DArrayShadow'\r\n  , 'isampler1D'\r\n  , 'isampler1DArray'\r\n  , 'usampler1D'\r\n  , 'usampler1DArray'\r\n  , 'isampler2DRect'\r\n  , 'usampler2DRect'\r\n  , 'samplerBuffer'\r\n  , 'isamplerBuffer'\r\n  , 'usamplerBuffer'\r\n  , 'sampler2DMS'\r\n  , 'isampler2DMS'\r\n  , 'usampler2DMS'\r\n  , 'sampler2DMSArray'\r\n  , 'isampler2DMSArray'\r\n  , 'usampler2DMSArray'\r\n])\r\n\n\n//# sourceURL=webpack://rmh_touch/./node_modules/glsl-tokenizer/lib/literals-300es.js?");

/***/ }),

/***/ "./node_modules/glsl-tokenizer/lib/literals.js":
/*!*****************************************************!*\
  !*** ./node_modules/glsl-tokenizer/lib/literals.js ***!
  \*****************************************************/
/***/ ((module) => {

eval("module.exports = [\r\n  // current\r\n    'precision'\r\n  , 'highp'\r\n  , 'mediump'\r\n  , 'lowp'\r\n  , 'attribute'\r\n  , 'const'\r\n  , 'uniform'\r\n  , 'varying'\r\n  , 'break'\r\n  , 'continue'\r\n  , 'do'\r\n  , 'for'\r\n  , 'while'\r\n  , 'if'\r\n  , 'else'\r\n  , 'in'\r\n  , 'out'\r\n  , 'inout'\r\n  , 'float'\r\n  , 'int'\r\n  , 'uint'\r\n  , 'void'\r\n  , 'bool'\r\n  , 'true'\r\n  , 'false'\r\n  , 'discard'\r\n  , 'return'\r\n  , 'mat2'\r\n  , 'mat3'\r\n  , 'mat4'\r\n  , 'vec2'\r\n  , 'vec3'\r\n  , 'vec4'\r\n  , 'ivec2'\r\n  , 'ivec3'\r\n  , 'ivec4'\r\n  , 'bvec2'\r\n  , 'bvec3'\r\n  , 'bvec4'\r\n  , 'sampler1D'\r\n  , 'sampler2D'\r\n  , 'sampler3D'\r\n  , 'samplerCube'\r\n  , 'sampler1DShadow'\r\n  , 'sampler2DShadow'\r\n  , 'struct'\r\n\r\n  // future\r\n  , 'asm'\r\n  , 'class'\r\n  , 'union'\r\n  , 'enum'\r\n  , 'typedef'\r\n  , 'template'\r\n  , 'this'\r\n  , 'packed'\r\n  , 'goto'\r\n  , 'switch'\r\n  , 'default'\r\n  , 'inline'\r\n  , 'noinline'\r\n  , 'volatile'\r\n  , 'public'\r\n  , 'static'\r\n  , 'extern'\r\n  , 'external'\r\n  , 'interface'\r\n  , 'long'\r\n  , 'short'\r\n  , 'double'\r\n  , 'half'\r\n  , 'fixed'\r\n  , 'unsigned'\r\n  , 'input'\r\n  , 'output'\r\n  , 'hvec2'\r\n  , 'hvec3'\r\n  , 'hvec4'\r\n  , 'dvec2'\r\n  , 'dvec3'\r\n  , 'dvec4'\r\n  , 'fvec2'\r\n  , 'fvec3'\r\n  , 'fvec4'\r\n  , 'sampler2DRect'\r\n  , 'sampler3DRect'\r\n  , 'sampler2DRectShadow'\r\n  , 'sizeof'\r\n  , 'cast'\r\n  , 'namespace'\r\n  , 'using'\r\n]\r\n\n\n//# sourceURL=webpack://rmh_touch/./node_modules/glsl-tokenizer/lib/literals.js?");

/***/ }),

/***/ "./node_modules/glsl-tokenizer/lib/operators.js":
/*!******************************************************!*\
  !*** ./node_modules/glsl-tokenizer/lib/operators.js ***!
  \******************************************************/
/***/ ((module) => {

eval("module.exports = [\r\n    '<<='\r\n  , '>>='\r\n  , '++'\r\n  , '--'\r\n  , '<<'\r\n  , '>>'\r\n  , '<='\r\n  , '>='\r\n  , '=='\r\n  , '!='\r\n  , '&&'\r\n  , '||'\r\n  , '+='\r\n  , '-='\r\n  , '*='\r\n  , '/='\r\n  , '%='\r\n  , '&='\r\n  , '^^'\r\n  , '^='\r\n  , '|='\r\n  , '('\r\n  , ')'\r\n  , '['\r\n  , ']'\r\n  , '.'\r\n  , '!'\r\n  , '~'\r\n  , '*'\r\n  , '/'\r\n  , '%'\r\n  , '+'\r\n  , '-'\r\n  , '<'\r\n  , '>'\r\n  , '&'\r\n  , '^'\r\n  , '|'\r\n  , '?'\r\n  , ':'\r\n  , '='\r\n  , ','\r\n  , ';'\r\n  , '{'\r\n  , '}'\r\n]\r\n\n\n//# sourceURL=webpack://rmh_touch/./node_modules/glsl-tokenizer/lib/operators.js?");

/***/ }),

/***/ "./node_modules/glsl-tokenizer/string.js":
/*!***********************************************!*\
  !*** ./node_modules/glsl-tokenizer/string.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var tokenize = __webpack_require__(/*! ./index */ \"./node_modules/glsl-tokenizer/index.js\")\r\n\r\nmodule.exports = tokenizeString\r\n\r\nfunction tokenizeString(str, opt) {\r\n  var generator = tokenize(opt)\r\n  var tokens = []\r\n\r\n  tokens = tokens.concat(generator(str))\r\n  tokens = tokens.concat(generator(null))\r\n\r\n  return tokens\r\n}\r\n\n\n//# sourceURL=webpack://rmh_touch/./node_modules/glsl-tokenizer/string.js?");

/***/ }),

/***/ "./node_modules/ieee754/index.js":
/*!***************************************!*\
  !*** ./node_modules/ieee754/index.js ***!
  \***************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */\nexports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = ((value * c) - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n\n\n//# sourceURL=webpack://rmh_touch/./node_modules/ieee754/index.js?");

/***/ }),

/***/ "./node_modules/iota-array/iota.js":
/*!*****************************************!*\
  !*** ./node_modules/iota-array/iota.js ***!
  \*****************************************/
/***/ ((module) => {

"use strict";
eval("\n\nfunction iota(n) {\n  var result = new Array(n)\n  for(var i=0; i<n; ++i) {\n    result[i] = i\n  }\n  return result\n}\n\nmodule.exports = iota\n\n//# sourceURL=webpack://rmh_touch/./node_modules/iota-array/iota.js?");

/***/ }),

/***/ "./node_modules/is-buffer/index.js":
/*!*****************************************!*\
  !*** ./node_modules/is-buffer/index.js ***!
  \*****************************************/
/***/ ((module) => {

eval("/*!\n * Determine if an object is a Buffer\n *\n * @author   Feross Aboukhadijeh <https://feross.org>\n * @license  MIT\n */\n\n// The _isBuffer check is for Safari 5-7 support, because it's missing\n// Object.prototype.constructor. Remove this eventually\nmodule.exports = function (obj) {\n  return obj != null && (isBuffer(obj) || isSlowBuffer(obj) || !!obj._isBuffer)\n}\n\nfunction isBuffer (obj) {\n  return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)\n}\n\n// For Node v0.10 support. Remove this eventually.\nfunction isSlowBuffer (obj) {\n  return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isBuffer(obj.slice(0, 0))\n}\n\n\n//# sourceURL=webpack://rmh_touch/./node_modules/is-buffer/index.js?");

/***/ }),

/***/ "./node_modules/ndarray-ops/ndarray-ops.js":
/*!*************************************************!*\
  !*** ./node_modules/ndarray-ops/ndarray-ops.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nvar compile = __webpack_require__(/*! cwise-compiler */ \"./node_modules/cwise-compiler/compiler.js\")\n\nvar EmptyProc = {\n  body: \"\",\n  args: [],\n  thisVars: [],\n  localVars: []\n}\n\nfunction fixup(x) {\n  if(!x) {\n    return EmptyProc\n  }\n  for(var i=0; i<x.args.length; ++i) {\n    var a = x.args[i]\n    if(i === 0) {\n      x.args[i] = {name: a, lvalue:true, rvalue: !!x.rvalue, count:x.count||1 }\n    } else {\n      x.args[i] = {name: a, lvalue:false, rvalue:true, count: 1}\n    }\n  }\n  if(!x.thisVars) {\n    x.thisVars = []\n  }\n  if(!x.localVars) {\n    x.localVars = []\n  }\n  return x\n}\n\nfunction pcompile(user_args) {\n  return compile({\n    args:     user_args.args,\n    pre:      fixup(user_args.pre),\n    body:     fixup(user_args.body),\n    post:     fixup(user_args.proc),\n    funcName: user_args.funcName\n  })\n}\n\nfunction makeOp(user_args) {\n  var args = []\n  for(var i=0; i<user_args.args.length; ++i) {\n    args.push(\"a\"+i)\n  }\n  var wrapper = new Function(\"P\", [\n    \"return function \", user_args.funcName, \"_ndarrayops(\", args.join(\",\"), \") {P(\", args.join(\",\"), \");return a0}\"\n  ].join(\"\"))\n  return wrapper(pcompile(user_args))\n}\n\nvar assign_ops = {\n  add:  \"+\",\n  sub:  \"-\",\n  mul:  \"*\",\n  div:  \"/\",\n  mod:  \"%\",\n  band: \"&\",\n  bor:  \"|\",\n  bxor: \"^\",\n  lshift: \"<<\",\n  rshift: \">>\",\n  rrshift: \">>>\"\n}\n;(function(){\n  for(var id in assign_ops) {\n    var op = assign_ops[id]\n    exports[id] = makeOp({\n      args: [\"array\",\"array\",\"array\"],\n      body: {args:[\"a\",\"b\",\"c\"],\n             body: \"a=b\"+op+\"c\"},\n      funcName: id\n    })\n    exports[id+\"eq\"] = makeOp({\n      args: [\"array\",\"array\"],\n      body: {args:[\"a\",\"b\"],\n             body:\"a\"+op+\"=b\"},\n      rvalue: true,\n      funcName: id+\"eq\"\n    })\n    exports[id+\"s\"] = makeOp({\n      args: [\"array\", \"array\", \"scalar\"],\n      body: {args:[\"a\",\"b\",\"s\"],\n             body:\"a=b\"+op+\"s\"},\n      funcName: id+\"s\"\n    })\n    exports[id+\"seq\"] = makeOp({\n      args: [\"array\",\"scalar\"],\n      body: {args:[\"a\",\"s\"],\n             body:\"a\"+op+\"=s\"},\n      rvalue: true,\n      funcName: id+\"seq\"\n    })\n  }\n})();\n\nvar unary_ops = {\n  not: \"!\",\n  bnot: \"~\",\n  neg: \"-\",\n  recip: \"1.0/\"\n}\n;(function(){\n  for(var id in unary_ops) {\n    var op = unary_ops[id]\n    exports[id] = makeOp({\n      args: [\"array\", \"array\"],\n      body: {args:[\"a\",\"b\"],\n             body:\"a=\"+op+\"b\"},\n      funcName: id\n    })\n    exports[id+\"eq\"] = makeOp({\n      args: [\"array\"],\n      body: {args:[\"a\"],\n             body:\"a=\"+op+\"a\"},\n      rvalue: true,\n      count: 2,\n      funcName: id+\"eq\"\n    })\n  }\n})();\n\nvar binary_ops = {\n  and: \"&&\",\n  or: \"||\",\n  eq: \"===\",\n  neq: \"!==\",\n  lt: \"<\",\n  gt: \">\",\n  leq: \"<=\",\n  geq: \">=\"\n}\n;(function() {\n  for(var id in binary_ops) {\n    var op = binary_ops[id]\n    exports[id] = makeOp({\n      args: [\"array\",\"array\",\"array\"],\n      body: {args:[\"a\", \"b\", \"c\"],\n             body:\"a=b\"+op+\"c\"},\n      funcName: id\n    })\n    exports[id+\"s\"] = makeOp({\n      args: [\"array\",\"array\",\"scalar\"],\n      body: {args:[\"a\", \"b\", \"s\"],\n             body:\"a=b\"+op+\"s\"},\n      funcName: id+\"s\"\n    })\n    exports[id+\"eq\"] = makeOp({\n      args: [\"array\", \"array\"],\n      body: {args:[\"a\", \"b\"],\n             body:\"a=a\"+op+\"b\"},\n      rvalue:true,\n      count:2,\n      funcName: id+\"eq\"\n    })\n    exports[id+\"seq\"] = makeOp({\n      args: [\"array\", \"scalar\"],\n      body: {args:[\"a\",\"s\"],\n             body:\"a=a\"+op+\"s\"},\n      rvalue:true,\n      count:2,\n      funcName: id+\"seq\"\n    })\n  }\n})();\n\nvar math_unary = [\n  \"abs\",\n  \"acos\",\n  \"asin\",\n  \"atan\",\n  \"ceil\",\n  \"cos\",\n  \"exp\",\n  \"floor\",\n  \"log\",\n  \"round\",\n  \"sin\",\n  \"sqrt\",\n  \"tan\"\n]\n;(function() {\n  for(var i=0; i<math_unary.length; ++i) {\n    var f = math_unary[i]\n    exports[f] = makeOp({\n                    args: [\"array\", \"array\"],\n                    pre: {args:[], body:\"this_f=Math.\"+f, thisVars:[\"this_f\"]},\n                    body: {args:[\"a\",\"b\"], body:\"a=this_f(b)\", thisVars:[\"this_f\"]},\n                    funcName: f\n                  })\n    exports[f+\"eq\"] = makeOp({\n                      args: [\"array\"],\n                      pre: {args:[], body:\"this_f=Math.\"+f, thisVars:[\"this_f\"]},\n                      body: {args: [\"a\"], body:\"a=this_f(a)\", thisVars:[\"this_f\"]},\n                      rvalue: true,\n                      count: 2,\n                      funcName: f+\"eq\"\n                    })\n  }\n})();\n\nvar math_comm = [\n  \"max\",\n  \"min\",\n  \"atan2\",\n  \"pow\"\n]\n;(function(){\n  for(var i=0; i<math_comm.length; ++i) {\n    var f= math_comm[i]\n    exports[f] = makeOp({\n                  args:[\"array\", \"array\", \"array\"],\n                  pre: {args:[], body:\"this_f=Math.\"+f, thisVars:[\"this_f\"]},\n                  body: {args:[\"a\",\"b\",\"c\"], body:\"a=this_f(b,c)\", thisVars:[\"this_f\"]},\n                  funcName: f\n                })\n    exports[f+\"s\"] = makeOp({\n                  args:[\"array\", \"array\", \"scalar\"],\n                  pre: {args:[], body:\"this_f=Math.\"+f, thisVars:[\"this_f\"]},\n                  body: {args:[\"a\",\"b\",\"c\"], body:\"a=this_f(b,c)\", thisVars:[\"this_f\"]},\n                  funcName: f+\"s\"\n                  })\n    exports[f+\"eq\"] = makeOp({ args:[\"array\", \"array\"],\n                  pre: {args:[], body:\"this_f=Math.\"+f, thisVars:[\"this_f\"]},\n                  body: {args:[\"a\",\"b\"], body:\"a=this_f(a,b)\", thisVars:[\"this_f\"]},\n                  rvalue: true,\n                  count: 2,\n                  funcName: f+\"eq\"\n                  })\n    exports[f+\"seq\"] = makeOp({ args:[\"array\", \"scalar\"],\n                  pre: {args:[], body:\"this_f=Math.\"+f, thisVars:[\"this_f\"]},\n                  body: {args:[\"a\",\"b\"], body:\"a=this_f(a,b)\", thisVars:[\"this_f\"]},\n                  rvalue:true,\n                  count:2,\n                  funcName: f+\"seq\"\n                  })\n  }\n})();\n\nvar math_noncomm = [\n  \"atan2\",\n  \"pow\"\n]\n;(function(){\n  for(var i=0; i<math_noncomm.length; ++i) {\n    var f= math_noncomm[i]\n    exports[f+\"op\"] = makeOp({\n                  args:[\"array\", \"array\", \"array\"],\n                  pre: {args:[], body:\"this_f=Math.\"+f, thisVars:[\"this_f\"]},\n                  body: {args:[\"a\",\"b\",\"c\"], body:\"a=this_f(c,b)\", thisVars:[\"this_f\"]},\n                  funcName: f+\"op\"\n                })\n    exports[f+\"ops\"] = makeOp({\n                  args:[\"array\", \"array\", \"scalar\"],\n                  pre: {args:[], body:\"this_f=Math.\"+f, thisVars:[\"this_f\"]},\n                  body: {args:[\"a\",\"b\",\"c\"], body:\"a=this_f(c,b)\", thisVars:[\"this_f\"]},\n                  funcName: f+\"ops\"\n                  })\n    exports[f+\"opeq\"] = makeOp({ args:[\"array\", \"array\"],\n                  pre: {args:[], body:\"this_f=Math.\"+f, thisVars:[\"this_f\"]},\n                  body: {args:[\"a\",\"b\"], body:\"a=this_f(b,a)\", thisVars:[\"this_f\"]},\n                  rvalue: true,\n                  count: 2,\n                  funcName: f+\"opeq\"\n                  })\n    exports[f+\"opseq\"] = makeOp({ args:[\"array\", \"scalar\"],\n                  pre: {args:[], body:\"this_f=Math.\"+f, thisVars:[\"this_f\"]},\n                  body: {args:[\"a\",\"b\"], body:\"a=this_f(b,a)\", thisVars:[\"this_f\"]},\n                  rvalue:true,\n                  count:2,\n                  funcName: f+\"opseq\"\n                  })\n  }\n})();\n\nexports.any = compile({\n  args:[\"array\"],\n  pre: EmptyProc,\n  body: {args:[{name:\"a\", lvalue:false, rvalue:true, count:1}], body: \"if(a){return true}\", localVars: [], thisVars: []},\n  post: {args:[], localVars:[], thisVars:[], body:\"return false\"},\n  funcName: \"any\"\n})\n\nexports.all = compile({\n  args:[\"array\"],\n  pre: EmptyProc,\n  body: {args:[{name:\"x\", lvalue:false, rvalue:true, count:1}], body: \"if(!x){return false}\", localVars: [], thisVars: []},\n  post: {args:[], localVars:[], thisVars:[], body:\"return true\"},\n  funcName: \"all\"\n})\n\nexports.sum = compile({\n  args:[\"array\"],\n  pre: {args:[], localVars:[], thisVars:[\"this_s\"], body:\"this_s=0\"},\n  body: {args:[{name:\"a\", lvalue:false, rvalue:true, count:1}], body: \"this_s+=a\", localVars: [], thisVars: [\"this_s\"]},\n  post: {args:[], localVars:[], thisVars:[\"this_s\"], body:\"return this_s\"},\n  funcName: \"sum\"\n})\n\nexports.prod = compile({\n  args:[\"array\"],\n  pre: {args:[], localVars:[], thisVars:[\"this_s\"], body:\"this_s=1\"},\n  body: {args:[{name:\"a\", lvalue:false, rvalue:true, count:1}], body: \"this_s*=a\", localVars: [], thisVars: [\"this_s\"]},\n  post: {args:[], localVars:[], thisVars:[\"this_s\"], body:\"return this_s\"},\n  funcName: \"prod\"\n})\n\nexports.norm2squared = compile({\n  args:[\"array\"],\n  pre: {args:[], localVars:[], thisVars:[\"this_s\"], body:\"this_s=0\"},\n  body: {args:[{name:\"a\", lvalue:false, rvalue:true, count:2}], body: \"this_s+=a*a\", localVars: [], thisVars: [\"this_s\"]},\n  post: {args:[], localVars:[], thisVars:[\"this_s\"], body:\"return this_s\"},\n  funcName: \"norm2squared\"\n})\n  \nexports.norm2 = compile({\n  args:[\"array\"],\n  pre: {args:[], localVars:[], thisVars:[\"this_s\"], body:\"this_s=0\"},\n  body: {args:[{name:\"a\", lvalue:false, rvalue:true, count:2}], body: \"this_s+=a*a\", localVars: [], thisVars: [\"this_s\"]},\n  post: {args:[], localVars:[], thisVars:[\"this_s\"], body:\"return Math.sqrt(this_s)\"},\n  funcName: \"norm2\"\n})\n  \n\nexports.norminf = compile({\n  args:[\"array\"],\n  pre: {args:[], localVars:[], thisVars:[\"this_s\"], body:\"this_s=0\"},\n  body: {args:[{name:\"a\", lvalue:false, rvalue:true, count:4}], body:\"if(-a>this_s){this_s=-a}else if(a>this_s){this_s=a}\", localVars: [], thisVars: [\"this_s\"]},\n  post: {args:[], localVars:[], thisVars:[\"this_s\"], body:\"return this_s\"},\n  funcName: \"norminf\"\n})\n\nexports.norm1 = compile({\n  args:[\"array\"],\n  pre: {args:[], localVars:[], thisVars:[\"this_s\"], body:\"this_s=0\"},\n  body: {args:[{name:\"a\", lvalue:false, rvalue:true, count:3}], body: \"this_s+=a<0?-a:a\", localVars: [], thisVars: [\"this_s\"]},\n  post: {args:[], localVars:[], thisVars:[\"this_s\"], body:\"return this_s\"},\n  funcName: \"norm1\"\n})\n\nexports.sup = compile({\n  args: [ \"array\" ],\n  pre:\n   { body: \"this_h=-Infinity\",\n     args: [],\n     thisVars: [ \"this_h\" ],\n     localVars: [] },\n  body:\n   { body: \"if(_inline_1_arg0_>this_h)this_h=_inline_1_arg0_\",\n     args: [{\"name\":\"_inline_1_arg0_\",\"lvalue\":false,\"rvalue\":true,\"count\":2} ],\n     thisVars: [ \"this_h\" ],\n     localVars: [] },\n  post:\n   { body: \"return this_h\",\n     args: [],\n     thisVars: [ \"this_h\" ],\n     localVars: [] }\n })\n\nexports.inf = compile({\n  args: [ \"array\" ],\n  pre:\n   { body: \"this_h=Infinity\",\n     args: [],\n     thisVars: [ \"this_h\" ],\n     localVars: [] },\n  body:\n   { body: \"if(_inline_1_arg0_<this_h)this_h=_inline_1_arg0_\",\n     args: [{\"name\":\"_inline_1_arg0_\",\"lvalue\":false,\"rvalue\":true,\"count\":2} ],\n     thisVars: [ \"this_h\" ],\n     localVars: [] },\n  post:\n   { body: \"return this_h\",\n     args: [],\n     thisVars: [ \"this_h\" ],\n     localVars: [] }\n })\n\nexports.argmin = compile({\n  args:[\"index\",\"array\",\"shape\"],\n  pre:{\n    body:\"{this_v=Infinity;this_i=_inline_0_arg2_.slice(0)}\",\n    args:[\n      {name:\"_inline_0_arg0_\",lvalue:false,rvalue:false,count:0},\n      {name:\"_inline_0_arg1_\",lvalue:false,rvalue:false,count:0},\n      {name:\"_inline_0_arg2_\",lvalue:false,rvalue:true,count:1}\n      ],\n    thisVars:[\"this_i\",\"this_v\"],\n    localVars:[]},\n  body:{\n    body:\"{if(_inline_1_arg1_<this_v){this_v=_inline_1_arg1_;for(var _inline_1_k=0;_inline_1_k<_inline_1_arg0_.length;++_inline_1_k){this_i[_inline_1_k]=_inline_1_arg0_[_inline_1_k]}}}\",\n    args:[\n      {name:\"_inline_1_arg0_\",lvalue:false,rvalue:true,count:2},\n      {name:\"_inline_1_arg1_\",lvalue:false,rvalue:true,count:2}],\n    thisVars:[\"this_i\",\"this_v\"],\n    localVars:[\"_inline_1_k\"]},\n  post:{\n    body:\"{return this_i}\",\n    args:[],\n    thisVars:[\"this_i\"],\n    localVars:[]}\n})\n\nexports.argmax = compile({\n  args:[\"index\",\"array\",\"shape\"],\n  pre:{\n    body:\"{this_v=-Infinity;this_i=_inline_0_arg2_.slice(0)}\",\n    args:[\n      {name:\"_inline_0_arg0_\",lvalue:false,rvalue:false,count:0},\n      {name:\"_inline_0_arg1_\",lvalue:false,rvalue:false,count:0},\n      {name:\"_inline_0_arg2_\",lvalue:false,rvalue:true,count:1}\n      ],\n    thisVars:[\"this_i\",\"this_v\"],\n    localVars:[]},\n  body:{\n    body:\"{if(_inline_1_arg1_>this_v){this_v=_inline_1_arg1_;for(var _inline_1_k=0;_inline_1_k<_inline_1_arg0_.length;++_inline_1_k){this_i[_inline_1_k]=_inline_1_arg0_[_inline_1_k]}}}\",\n    args:[\n      {name:\"_inline_1_arg0_\",lvalue:false,rvalue:true,count:2},\n      {name:\"_inline_1_arg1_\",lvalue:false,rvalue:true,count:2}],\n    thisVars:[\"this_i\",\"this_v\"],\n    localVars:[\"_inline_1_k\"]},\n  post:{\n    body:\"{return this_i}\",\n    args:[],\n    thisVars:[\"this_i\"],\n    localVars:[]}\n})  \n\nexports.random = makeOp({\n  args: [\"array\"],\n  pre: {args:[], body:\"this_f=Math.random\", thisVars:[\"this_f\"]},\n  body: {args: [\"a\"], body:\"a=this_f()\", thisVars:[\"this_f\"]},\n  funcName: \"random\"\n})\n\nexports.assign = makeOp({\n  args:[\"array\", \"array\"],\n  body: {args:[\"a\", \"b\"], body:\"a=b\"},\n  funcName: \"assign\" })\n\nexports.assigns = makeOp({\n  args:[\"array\", \"scalar\"],\n  body: {args:[\"a\", \"b\"], body:\"a=b\"},\n  funcName: \"assigns\" })\n\n\nexports.equals = compile({\n  args:[\"array\", \"array\"],\n  pre: EmptyProc,\n  body: {args:[{name:\"x\", lvalue:false, rvalue:true, count:1},\n               {name:\"y\", lvalue:false, rvalue:true, count:1}], \n        body: \"if(x!==y){return false}\", \n        localVars: [], \n        thisVars: []},\n  post: {args:[], localVars:[], thisVars:[], body:\"return true\"},\n  funcName: \"equals\"\n})\n\n\n\n\n//# sourceURL=webpack://rmh_touch/./node_modules/ndarray-ops/ndarray-ops.js?");

/***/ }),

/***/ "./node_modules/ndarray/ndarray.js":
/*!*****************************************!*\
  !*** ./node_modules/ndarray/ndarray.js ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var iota = __webpack_require__(/*! iota-array */ \"./node_modules/iota-array/iota.js\")\nvar isBuffer = __webpack_require__(/*! is-buffer */ \"./node_modules/is-buffer/index.js\")\n\nvar hasTypedArrays  = ((typeof Float64Array) !== \"undefined\")\n\nfunction compare1st(a, b) {\n  return a[0] - b[0]\n}\n\nfunction order() {\n  var stride = this.stride\n  var terms = new Array(stride.length)\n  var i\n  for(i=0; i<terms.length; ++i) {\n    terms[i] = [Math.abs(stride[i]), i]\n  }\n  terms.sort(compare1st)\n  var result = new Array(terms.length)\n  for(i=0; i<result.length; ++i) {\n    result[i] = terms[i][1]\n  }\n  return result\n}\n\nfunction compileConstructor(dtype, dimension) {\n  var className = [\"View\", dimension, \"d\", dtype].join(\"\")\n  if(dimension < 0) {\n    className = \"View_Nil\" + dtype\n  }\n  var useGetters = (dtype === \"generic\")\n\n  if(dimension === -1) {\n    //Special case for trivial arrays\n    var code =\n      \"function \"+className+\"(a){this.data=a;};\\\nvar proto=\"+className+\".prototype;\\\nproto.dtype='\"+dtype+\"';\\\nproto.index=function(){return -1};\\\nproto.size=0;\\\nproto.dimension=-1;\\\nproto.shape=proto.stride=proto.order=[];\\\nproto.lo=proto.hi=proto.transpose=proto.step=\\\nfunction(){return new \"+className+\"(this.data);};\\\nproto.get=proto.set=function(){};\\\nproto.pick=function(){return null};\\\nreturn function construct_\"+className+\"(a){return new \"+className+\"(a);}\"\n    var procedure = new Function(code)\n    return procedure()\n  } else if(dimension === 0) {\n    //Special case for 0d arrays\n    var code =\n      \"function \"+className+\"(a,d) {\\\nthis.data = a;\\\nthis.offset = d\\\n};\\\nvar proto=\"+className+\".prototype;\\\nproto.dtype='\"+dtype+\"';\\\nproto.index=function(){return this.offset};\\\nproto.dimension=0;\\\nproto.size=1;\\\nproto.shape=\\\nproto.stride=\\\nproto.order=[];\\\nproto.lo=\\\nproto.hi=\\\nproto.transpose=\\\nproto.step=function \"+className+\"_copy() {\\\nreturn new \"+className+\"(this.data,this.offset)\\\n};\\\nproto.pick=function \"+className+\"_pick(){\\\nreturn TrivialArray(this.data);\\\n};\\\nproto.valueOf=proto.get=function \"+className+\"_get(){\\\nreturn \"+(useGetters ? \"this.data.get(this.offset)\" : \"this.data[this.offset]\")+\n\"};\\\nproto.set=function \"+className+\"_set(v){\\\nreturn \"+(useGetters ? \"this.data.set(this.offset,v)\" : \"this.data[this.offset]=v\")+\"\\\n};\\\nreturn function construct_\"+className+\"(a,b,c,d){return new \"+className+\"(a,d)}\"\n    var procedure = new Function(\"TrivialArray\", code)\n    return procedure(CACHED_CONSTRUCTORS[dtype][0])\n  }\n\n  var code = [\"'use strict'\"]\n\n  //Create constructor for view\n  var indices = iota(dimension)\n  var args = indices.map(function(i) { return \"i\"+i })\n  var index_str = \"this.offset+\" + indices.map(function(i) {\n        return \"this.stride[\" + i + \"]*i\" + i\n      }).join(\"+\")\n  var shapeArg = indices.map(function(i) {\n      return \"b\"+i\n    }).join(\",\")\n  var strideArg = indices.map(function(i) {\n      return \"c\"+i\n    }).join(\",\")\n  code.push(\n    \"function \"+className+\"(a,\" + shapeArg + \",\" + strideArg + \",d){this.data=a\",\n      \"this.shape=[\" + shapeArg + \"]\",\n      \"this.stride=[\" + strideArg + \"]\",\n      \"this.offset=d|0}\",\n    \"var proto=\"+className+\".prototype\",\n    \"proto.dtype='\"+dtype+\"'\",\n    \"proto.dimension=\"+dimension)\n\n  //view.size:\n  code.push(\"Object.defineProperty(proto,'size',{get:function \"+className+\"_size(){\\\nreturn \"+indices.map(function(i) { return \"this.shape[\"+i+\"]\" }).join(\"*\"),\n\"}})\")\n\n  //view.order:\n  if(dimension === 1) {\n    code.push(\"proto.order=[0]\")\n  } else {\n    code.push(\"Object.defineProperty(proto,'order',{get:\")\n    if(dimension < 4) {\n      code.push(\"function \"+className+\"_order(){\")\n      if(dimension === 2) {\n        code.push(\"return (Math.abs(this.stride[0])>Math.abs(this.stride[1]))?[1,0]:[0,1]}})\")\n      } else if(dimension === 3) {\n        code.push(\n\"var s0=Math.abs(this.stride[0]),s1=Math.abs(this.stride[1]),s2=Math.abs(this.stride[2]);\\\nif(s0>s1){\\\nif(s1>s2){\\\nreturn [2,1,0];\\\n}else if(s0>s2){\\\nreturn [1,2,0];\\\n}else{\\\nreturn [1,0,2];\\\n}\\\n}else if(s0>s2){\\\nreturn [2,0,1];\\\n}else if(s2>s1){\\\nreturn [0,1,2];\\\n}else{\\\nreturn [0,2,1];\\\n}}})\")\n      }\n    } else {\n      code.push(\"ORDER})\")\n    }\n  }\n\n  //view.set(i0, ..., v):\n  code.push(\n\"proto.set=function \"+className+\"_set(\"+args.join(\",\")+\",v){\")\n  if(useGetters) {\n    code.push(\"return this.data.set(\"+index_str+\",v)}\")\n  } else {\n    code.push(\"return this.data[\"+index_str+\"]=v}\")\n  }\n\n  //view.get(i0, ...):\n  code.push(\"proto.get=function \"+className+\"_get(\"+args.join(\",\")+\"){\")\n  if(useGetters) {\n    code.push(\"return this.data.get(\"+index_str+\")}\")\n  } else {\n    code.push(\"return this.data[\"+index_str+\"]}\")\n  }\n\n  //view.index:\n  code.push(\n    \"proto.index=function \"+className+\"_index(\", args.join(), \"){return \"+index_str+\"}\")\n\n  //view.hi():\n  code.push(\"proto.hi=function \"+className+\"_hi(\"+args.join(\",\")+\"){return new \"+className+\"(this.data,\"+\n    indices.map(function(i) {\n      return [\"(typeof i\",i,\"!=='number'||i\",i,\"<0)?this.shape[\", i, \"]:i\", i,\"|0\"].join(\"\")\n    }).join(\",\")+\",\"+\n    indices.map(function(i) {\n      return \"this.stride[\"+i + \"]\"\n    }).join(\",\")+\",this.offset)}\")\n\n  //view.lo():\n  var a_vars = indices.map(function(i) { return \"a\"+i+\"=this.shape[\"+i+\"]\" })\n  var c_vars = indices.map(function(i) { return \"c\"+i+\"=this.stride[\"+i+\"]\" })\n  code.push(\"proto.lo=function \"+className+\"_lo(\"+args.join(\",\")+\"){var b=this.offset,d=0,\"+a_vars.join(\",\")+\",\"+c_vars.join(\",\"))\n  for(var i=0; i<dimension; ++i) {\n    code.push(\n\"if(typeof i\"+i+\"==='number'&&i\"+i+\">=0){\\\nd=i\"+i+\"|0;\\\nb+=c\"+i+\"*d;\\\na\"+i+\"-=d}\")\n  }\n  code.push(\"return new \"+className+\"(this.data,\"+\n    indices.map(function(i) {\n      return \"a\"+i\n    }).join(\",\")+\",\"+\n    indices.map(function(i) {\n      return \"c\"+i\n    }).join(\",\")+\",b)}\")\n\n  //view.step():\n  code.push(\"proto.step=function \"+className+\"_step(\"+args.join(\",\")+\"){var \"+\n    indices.map(function(i) {\n      return \"a\"+i+\"=this.shape[\"+i+\"]\"\n    }).join(\",\")+\",\"+\n    indices.map(function(i) {\n      return \"b\"+i+\"=this.stride[\"+i+\"]\"\n    }).join(\",\")+\",c=this.offset,d=0,ceil=Math.ceil\")\n  for(var i=0; i<dimension; ++i) {\n    code.push(\n\"if(typeof i\"+i+\"==='number'){\\\nd=i\"+i+\"|0;\\\nif(d<0){\\\nc+=b\"+i+\"*(a\"+i+\"-1);\\\na\"+i+\"=ceil(-a\"+i+\"/d)\\\n}else{\\\na\"+i+\"=ceil(a\"+i+\"/d)\\\n}\\\nb\"+i+\"*=d\\\n}\")\n  }\n  code.push(\"return new \"+className+\"(this.data,\"+\n    indices.map(function(i) {\n      return \"a\" + i\n    }).join(\",\")+\",\"+\n    indices.map(function(i) {\n      return \"b\" + i\n    }).join(\",\")+\",c)}\")\n\n  //view.transpose():\n  var tShape = new Array(dimension)\n  var tStride = new Array(dimension)\n  for(var i=0; i<dimension; ++i) {\n    tShape[i] = \"a[i\"+i+\"]\"\n    tStride[i] = \"b[i\"+i+\"]\"\n  }\n  code.push(\"proto.transpose=function \"+className+\"_transpose(\"+args+\"){\"+\n    args.map(function(n,idx) { return n + \"=(\" + n + \"===undefined?\" + idx + \":\" + n + \"|0)\"}).join(\";\"),\n    \"var a=this.shape,b=this.stride;return new \"+className+\"(this.data,\"+tShape.join(\",\")+\",\"+tStride.join(\",\")+\",this.offset)}\")\n\n  //view.pick():\n  code.push(\"proto.pick=function \"+className+\"_pick(\"+args+\"){var a=[],b=[],c=this.offset\")\n  for(var i=0; i<dimension; ++i) {\n    code.push(\"if(typeof i\"+i+\"==='number'&&i\"+i+\">=0){c=(c+this.stride[\"+i+\"]*i\"+i+\")|0}else{a.push(this.shape[\"+i+\"]);b.push(this.stride[\"+i+\"])}\")\n  }\n  code.push(\"var ctor=CTOR_LIST[a.length+1];return ctor(this.data,a,b,c)}\")\n\n  //Add return statement\n  code.push(\"return function construct_\"+className+\"(data,shape,stride,offset){return new \"+className+\"(data,\"+\n    indices.map(function(i) {\n      return \"shape[\"+i+\"]\"\n    }).join(\",\")+\",\"+\n    indices.map(function(i) {\n      return \"stride[\"+i+\"]\"\n    }).join(\",\")+\",offset)}\")\n\n  //Compile procedure\n  var procedure = new Function(\"CTOR_LIST\", \"ORDER\", code.join(\"\\n\"))\n  return procedure(CACHED_CONSTRUCTORS[dtype], order)\n}\n\nfunction arrayDType(data) {\n  if(isBuffer(data)) {\n    return \"buffer\"\n  }\n  if(hasTypedArrays) {\n    switch(Object.prototype.toString.call(data)) {\n      case \"[object Float64Array]\":\n        return \"float64\"\n      case \"[object Float32Array]\":\n        return \"float32\"\n      case \"[object Int8Array]\":\n        return \"int8\"\n      case \"[object Int16Array]\":\n        return \"int16\"\n      case \"[object Int32Array]\":\n        return \"int32\"\n      case \"[object Uint8Array]\":\n        return \"uint8\"\n      case \"[object Uint16Array]\":\n        return \"uint16\"\n      case \"[object Uint32Array]\":\n        return \"uint32\"\n      case \"[object Uint8ClampedArray]\":\n        return \"uint8_clamped\"\n      case \"[object BigInt64Array]\":\n        return \"bigint64\"\n      case \"[object BigUint64Array]\":\n        return \"biguint64\"\n    }\n  }\n  if(Array.isArray(data)) {\n    return \"array\"\n  }\n  return \"generic\"\n}\n\nvar CACHED_CONSTRUCTORS = {\n  \"float32\":[],\n  \"float64\":[],\n  \"int8\":[],\n  \"int16\":[],\n  \"int32\":[],\n  \"uint8\":[],\n  \"uint16\":[],\n  \"uint32\":[],\n  \"array\":[],\n  \"uint8_clamped\":[],\n  \"bigint64\": [],\n  \"biguint64\": [],\n  \"buffer\":[],\n  \"generic\":[]\n}\n\n;(function() {\n  for(var id in CACHED_CONSTRUCTORS) {\n    CACHED_CONSTRUCTORS[id].push(compileConstructor(id, -1))\n  }\n});\n\nfunction wrappedNDArrayCtor(data, shape, stride, offset) {\n  if(data === undefined) {\n    var ctor = CACHED_CONSTRUCTORS.array[0]\n    return ctor([])\n  } else if(typeof data === \"number\") {\n    data = [data]\n  }\n  if(shape === undefined) {\n    shape = [ data.length ]\n  }\n  var d = shape.length\n  if(stride === undefined) {\n    stride = new Array(d)\n    for(var i=d-1, sz=1; i>=0; --i) {\n      stride[i] = sz\n      sz *= shape[i]\n    }\n  }\n  if(offset === undefined) {\n    offset = 0\n    for(var i=0; i<d; ++i) {\n      if(stride[i] < 0) {\n        offset -= (shape[i]-1)*stride[i]\n      }\n    }\n  }\n  var dtype = arrayDType(data)\n  var ctor_list = CACHED_CONSTRUCTORS[dtype]\n  while(ctor_list.length <= d+1) {\n    ctor_list.push(compileConstructor(dtype, ctor_list.length-1))\n  }\n  var ctor = ctor_list[d+1]\n  return ctor(data, shape, stride, offset)\n}\n\nmodule.exports = wrappedNDArrayCtor\n\n\n//# sourceURL=webpack://rmh_touch/./node_modules/ndarray/ndarray.js?");

/***/ }),

/***/ "./node_modules/pad-left/index.js":
/*!****************************************!*\
  !*** ./node_modules/pad-left/index.js ***!
  \****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/*!\n * pad-left <https://github.com/jonschlinkert/pad-left>\n *\n * Copyright (c) 2014-2015, Jon Schlinkert.\n * Licensed under the MIT license.\n */\n\n\n\nvar repeat = __webpack_require__(/*! repeat-string */ \"./node_modules/repeat-string/index.js\");\n\nmodule.exports = function padLeft(str, num, ch) {\n  ch = typeof ch !== 'undefined' ? (ch + '') : ' ';\n  return repeat(ch, num) + str;\n};\n\n//# sourceURL=webpack://rmh_touch/./node_modules/pad-left/index.js?");

/***/ }),

/***/ "./node_modules/repeat-string/index.js":
/*!*********************************************!*\
  !*** ./node_modules/repeat-string/index.js ***!
  \*********************************************/
/***/ ((module) => {

"use strict";
eval("/*!\n * repeat-string <https://github.com/jonschlinkert/repeat-string>\n *\n * Copyright (c) 2014-2015, Jon Schlinkert.\n * Licensed under the MIT License.\n */\n\n\n\n/**\n * Results cache\n */\n\nvar res = '';\nvar cache;\n\n/**\n * Expose `repeat`\n */\n\nmodule.exports = repeat;\n\n/**\n * Repeat the given `string` the specified `number`\n * of times.\n *\n * **Example:**\n *\n * ```js\n * var repeat = require('repeat-string');\n * repeat('A', 5);\n * //=> AAAAA\n * ```\n *\n * @param {String} `string` The string to repeat\n * @param {Number} `number` The number of times to repeat the string\n * @return {String} Repeated string\n * @api public\n */\n\nfunction repeat(str, num) {\n  if (typeof str !== 'string') {\n    throw new TypeError('expected a string');\n  }\n\n  // cover common, quick use cases\n  if (num === 1) return str;\n  if (num === 2) return str + str;\n\n  var max = str.length * num;\n  if (cache !== str || typeof cache === 'undefined') {\n    cache = str;\n    res = '';\n  } else if (res.length >= max) {\n    return res.substr(0, max);\n  }\n\n  while (max > res.length && num > 1) {\n    if (num & 1) {\n      res += str;\n    }\n\n    num >>= 1;\n    str += str;\n  }\n\n  res += str;\n  res = res.substr(0, max);\n  return res;\n}\n\n\n//# sourceURL=webpack://rmh_touch/./node_modules/repeat-string/index.js?");

/***/ }),

/***/ "./node_modules/sprintf-js/src/sprintf.js":
/*!************************************************!*\
  !*** ./node_modules/sprintf-js/src/sprintf.js ***!
  \************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("var __WEBPACK_AMD_DEFINE_RESULT__;/* global window, exports, define */\n\n!function() {\n    'use strict'\n\n    var re = {\n        not_string: /[^s]/,\n        not_bool: /[^t]/,\n        not_type: /[^T]/,\n        not_primitive: /[^v]/,\n        number: /[diefg]/,\n        numeric_arg: /[bcdiefguxX]/,\n        json: /[j]/,\n        not_json: /[^j]/,\n        text: /^[^\\x25]+/,\n        modulo: /^\\x25{2}/,\n        placeholder: /^\\x25(?:([1-9]\\d*)\\$|\\(([^)]+)\\))?(\\+)?(0|'[^$])?(-)?(\\d+)?(?:\\.(\\d+))?([b-gijostTuvxX])/,\n        key: /^([a-z_][a-z_\\d]*)/i,\n        key_access: /^\\.([a-z_][a-z_\\d]*)/i,\n        index_access: /^\\[(\\d+)\\]/,\n        sign: /^[+-]/\n    }\n\n    function sprintf(key) {\n        // `arguments` is not an array, but should be fine for this call\n        return sprintf_format(sprintf_parse(key), arguments)\n    }\n\n    function vsprintf(fmt, argv) {\n        return sprintf.apply(null, [fmt].concat(argv || []))\n    }\n\n    function sprintf_format(parse_tree, argv) {\n        var cursor = 1, tree_length = parse_tree.length, arg, output = '', i, k, ph, pad, pad_character, pad_length, is_positive, sign\n        for (i = 0; i < tree_length; i++) {\n            if (typeof parse_tree[i] === 'string') {\n                output += parse_tree[i]\n            }\n            else if (typeof parse_tree[i] === 'object') {\n                ph = parse_tree[i] // convenience purposes only\n                if (ph.keys) { // keyword argument\n                    arg = argv[cursor]\n                    for (k = 0; k < ph.keys.length; k++) {\n                        if (arg == undefined) {\n                            throw new Error(sprintf('[sprintf] Cannot access property \"%s\" of undefined value \"%s\"', ph.keys[k], ph.keys[k-1]))\n                        }\n                        arg = arg[ph.keys[k]]\n                    }\n                }\n                else if (ph.param_no) { // positional argument (explicit)\n                    arg = argv[ph.param_no]\n                }\n                else { // positional argument (implicit)\n                    arg = argv[cursor++]\n                }\n\n                if (re.not_type.test(ph.type) && re.not_primitive.test(ph.type) && arg instanceof Function) {\n                    arg = arg()\n                }\n\n                if (re.numeric_arg.test(ph.type) && (typeof arg !== 'number' && isNaN(arg))) {\n                    throw new TypeError(sprintf('[sprintf] expecting number but found %T', arg))\n                }\n\n                if (re.number.test(ph.type)) {\n                    is_positive = arg >= 0\n                }\n\n                switch (ph.type) {\n                    case 'b':\n                        arg = parseInt(arg, 10).toString(2)\n                        break\n                    case 'c':\n                        arg = String.fromCharCode(parseInt(arg, 10))\n                        break\n                    case 'd':\n                    case 'i':\n                        arg = parseInt(arg, 10)\n                        break\n                    case 'j':\n                        arg = JSON.stringify(arg, null, ph.width ? parseInt(ph.width) : 0)\n                        break\n                    case 'e':\n                        arg = ph.precision ? parseFloat(arg).toExponential(ph.precision) : parseFloat(arg).toExponential()\n                        break\n                    case 'f':\n                        arg = ph.precision ? parseFloat(arg).toFixed(ph.precision) : parseFloat(arg)\n                        break\n                    case 'g':\n                        arg = ph.precision ? String(Number(arg.toPrecision(ph.precision))) : parseFloat(arg)\n                        break\n                    case 'o':\n                        arg = (parseInt(arg, 10) >>> 0).toString(8)\n                        break\n                    case 's':\n                        arg = String(arg)\n                        arg = (ph.precision ? arg.substring(0, ph.precision) : arg)\n                        break\n                    case 't':\n                        arg = String(!!arg)\n                        arg = (ph.precision ? arg.substring(0, ph.precision) : arg)\n                        break\n                    case 'T':\n                        arg = Object.prototype.toString.call(arg).slice(8, -1).toLowerCase()\n                        arg = (ph.precision ? arg.substring(0, ph.precision) : arg)\n                        break\n                    case 'u':\n                        arg = parseInt(arg, 10) >>> 0\n                        break\n                    case 'v':\n                        arg = arg.valueOf()\n                        arg = (ph.precision ? arg.substring(0, ph.precision) : arg)\n                        break\n                    case 'x':\n                        arg = (parseInt(arg, 10) >>> 0).toString(16)\n                        break\n                    case 'X':\n                        arg = (parseInt(arg, 10) >>> 0).toString(16).toUpperCase()\n                        break\n                }\n                if (re.json.test(ph.type)) {\n                    output += arg\n                }\n                else {\n                    if (re.number.test(ph.type) && (!is_positive || ph.sign)) {\n                        sign = is_positive ? '+' : '-'\n                        arg = arg.toString().replace(re.sign, '')\n                    }\n                    else {\n                        sign = ''\n                    }\n                    pad_character = ph.pad_char ? ph.pad_char === '0' ? '0' : ph.pad_char.charAt(1) : ' '\n                    pad_length = ph.width - (sign + arg).length\n                    pad = ph.width ? (pad_length > 0 ? pad_character.repeat(pad_length) : '') : ''\n                    output += ph.align ? sign + arg + pad : (pad_character === '0' ? sign + pad + arg : pad + sign + arg)\n                }\n            }\n        }\n        return output\n    }\n\n    var sprintf_cache = Object.create(null)\n\n    function sprintf_parse(fmt) {\n        if (sprintf_cache[fmt]) {\n            return sprintf_cache[fmt]\n        }\n\n        var _fmt = fmt, match, parse_tree = [], arg_names = 0\n        while (_fmt) {\n            if ((match = re.text.exec(_fmt)) !== null) {\n                parse_tree.push(match[0])\n            }\n            else if ((match = re.modulo.exec(_fmt)) !== null) {\n                parse_tree.push('%')\n            }\n            else if ((match = re.placeholder.exec(_fmt)) !== null) {\n                if (match[2]) {\n                    arg_names |= 1\n                    var field_list = [], replacement_field = match[2], field_match = []\n                    if ((field_match = re.key.exec(replacement_field)) !== null) {\n                        field_list.push(field_match[1])\n                        while ((replacement_field = replacement_field.substring(field_match[0].length)) !== '') {\n                            if ((field_match = re.key_access.exec(replacement_field)) !== null) {\n                                field_list.push(field_match[1])\n                            }\n                            else if ((field_match = re.index_access.exec(replacement_field)) !== null) {\n                                field_list.push(field_match[1])\n                            }\n                            else {\n                                throw new SyntaxError('[sprintf] failed to parse named argument key')\n                            }\n                        }\n                    }\n                    else {\n                        throw new SyntaxError('[sprintf] failed to parse named argument key')\n                    }\n                    match[2] = field_list\n                }\n                else {\n                    arg_names |= 2\n                }\n                if (arg_names === 3) {\n                    throw new Error('[sprintf] mixing positional and named placeholders is not (yet) supported')\n                }\n\n                parse_tree.push(\n                    {\n                        placeholder: match[0],\n                        param_no:    match[1],\n                        keys:        match[2],\n                        sign:        match[3],\n                        pad_char:    match[4],\n                        align:       match[5],\n                        width:       match[6],\n                        precision:   match[7],\n                        type:        match[8]\n                    }\n                )\n            }\n            else {\n                throw new SyntaxError('[sprintf] unexpected placeholder')\n            }\n            _fmt = _fmt.substring(match[0].length)\n        }\n        return sprintf_cache[fmt] = parse_tree\n    }\n\n    /**\n     * export to either browser or node.js\n     */\n    /* eslint-disable quote-props */\n    if (true) {\n        exports.sprintf = sprintf\n        exports.vsprintf = vsprintf\n    }\n    if (typeof window !== 'undefined') {\n        window['sprintf'] = sprintf\n        window['vsprintf'] = vsprintf\n\n        if (true) {\n            !(__WEBPACK_AMD_DEFINE_RESULT__ = (function() {\n                return {\n                    'sprintf': sprintf,\n                    'vsprintf': vsprintf\n                }\n            }).call(exports, __webpack_require__, exports, module),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__))\n        }\n    }\n    /* eslint-enable quote-props */\n}(); // eslint-disable-line\n\n\n//# sourceURL=webpack://rmh_touch/./node_modules/sprintf-js/src/sprintf.js?");

/***/ }),

/***/ "./src/app.ts":
/*!********************!*\
  !*** ./src/app.ts ***!
  \********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _main__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./main */ \"./src/main.ts\");\n/* harmony import */ var _section__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./section */ \"./src/section.ts\");\n\n\nvoid async function main() {\n    const mainNode = document.querySelector(\"main\");\n    if (!mainNode) {\n        throw new Error(\"Main node is not found\");\n    }\n    const main = new _main__WEBPACK_IMPORTED_MODULE_0__.Main(mainNode);\n    console.log(main);\n    document.querySelectorAll(\"section\").forEach(sectionNode => main.addSection(new _section__WEBPACK_IMPORTED_MODULE_1__.Section(sectionNode)));\n}();\n\n\n//# sourceURL=webpack://rmh_touch/./src/app.ts?");

/***/ }),

/***/ "./src/main.ts":
/*!*********************!*\
  !*** ./src/main.ts ***!
  \*********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Main\": () => /* binding */ Main\n/* harmony export */ });\n/* harmony import */ var gl_transitions__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! gl-transitions */ \"./node_modules/gl-transitions/index.js\");\n/* harmony import */ var gl_transitions__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(gl_transitions__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var gl_transition__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! gl-transition */ \"./node_modules/gl-transition/lib/index.js\");\n/* harmony import */ var gl_texture2d__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! gl-texture2d */ \"./node_modules/gl-texture2d/texture.js\");\n/* harmony import */ var gl_texture2d__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(gl_texture2d__WEBPACK_IMPORTED_MODULE_2__);\n\n\n\nconst CHANGE_SECTION_EVENT = \"changeSection\";\nclass Figcaption extends EventTarget {\n    constructor(section, parent) {\n        super();\n        this.linkNode = document.createElement(\"a\");\n        this.node = document.createElement(\"figcaption\");\n        this.initHTML = () => {\n            this.node.appendChild(this.linkNode);\n            this.initIII();\n        };\n        this.initEvents = () => {\n            this.linkNode.addEventListener(\"click\", this.onClick);\n        };\n        this.initArea = ([[x1, y1], [x2, y2]]) => {\n            this.node.style.setProperty(\"--x1\", String(x1) + \"px\");\n            this.node.style.setProperty(\"--y1\", String(y1) + \"px\");\n            this.node.style.setProperty(\"--x2\", String(x2) + \"px\");\n            this.node.style.setProperty(\"--y2\", String(y2) + \"px\");\n        };\n        this.onClick = () => {\n            const event = new CustomEvent(CHANGE_SECTION_EVENT, { detail: this.section.image });\n            this.dispatchEvent(event);\n        };\n        this.initHTML();\n        this.initEvents();\n        this.initArea(section.points);\n        parent.appendChild(this.node);\n        this.section = section;\n    }\n    initIII(col = 10) {\n        function randomMinMax(min, max) {\n            return Math.random() * (max - min) + min;\n        }\n        function random() {\n            return randomMinMax(-1.5, 1.5);\n        }\n        for (let i = 0; i < col; i++) {\n            const div = document.createElement(\"span\");\n            div.classList.add(\"iii\");\n            const [sx, sy] = [random(), random()];\n            div.style.setProperty(\"--start-x\", String(sx));\n            div.style.setProperty(\"--start-y\", String(sy));\n            const [x, y] = [random(), random()];\n            div.style.setProperty(\"--translate-x\", String(x));\n            div.style.setProperty(\"--translate-y\", String(y));\n            const delay = Math.random() * 3;\n            div.style.setProperty(\"--delay\", String(delay));\n            this.node.appendChild(div);\n        }\n    }\n}\nclass Main {\n    constructor(mainNode) {\n        this.areas = [];\n        this.onChangeSection = ((event) => {\n            const [width, height] = this.size;\n            const imageFrom = Main.imageResize(this.image, width, height);\n            const imageTo = Main.imageResize(event.detail, width, height);\n            const textureFrom = this.initTexture(imageFrom);\n            const textureTo = this.initTexture(imageTo);\n            this.renderTransition(textureFrom, textureTo, width, height).then();\n        });\n        this.node = mainNode;\n        this.figure = Main.getNodeBySelector(this.node, \"figure\");\n        this.canvas = Main.getNodeBySelector(this.node, \"canvas\");\n        this.image = Main.getNodeBySelector(this.figure, \"img\");\n        this.gl = this.initWebGL();\n        this.transition = this.initTransition(\"InvertedPageCurl\");\n    }\n    static getNodeBySelector(parent, selector) {\n        const node = parent.querySelector(selector);\n        if (!node) {\n            throw new Error(`No node by selector \"${selector}\" in main section`);\n        }\n        return node;\n    }\n    static imageResize(image, width, height) {\n        const canvas = document.createElement(\"canvas\");\n        canvas.width = width;\n        canvas.height = height;\n        const cont2d = canvas.getContext(\"2d\");\n        if (!cont2d) {\n            throw new Error(`2d context creation error`);\n        }\n        const delta = width / image.naturalWidth;\n        const newHeight = image.naturalHeight * delta;\n        cont2d.drawImage(image, 0, 0, width, newHeight);\n        return canvas;\n    }\n    addSection(section) {\n        const figcaption = new Figcaption(section, this.figure);\n        figcaption.addEventListener(CHANGE_SECTION_EVENT, this.onChangeSection);\n        this.areas = [...this.areas, figcaption];\n    }\n    get size() {\n        const { width, height } = this.node.getBoundingClientRect();\n        return [width, height];\n    }\n    initWebGL() {\n        const [width, height] = this.size;\n        this.canvas.width = width;\n        this.canvas.height = height;\n        const gl = this.canvas.getContext(\"webgl\");\n        if (!gl) {\n            throw new Error(`WebGL context creation error`);\n        }\n        gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, true);\n        const buffer = gl.createBuffer();\n        gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([-1, -1, -1, 4, 4, -1]), gl.STATIC_DRAW);\n        gl.viewport(0, 0, width, height);\n        return gl;\n    }\n    initTexture(image) {\n        const texture = gl_texture2d__WEBPACK_IMPORTED_MODULE_2___default()(this.gl, image);\n        texture.minFilter = this.gl.LINEAR;\n        texture.magFilter = this.gl.LINEAR;\n        return texture;\n    }\n    initTransition(name) {\n        return (0,gl_transition__WEBPACK_IMPORTED_MODULE_1__.default)(this.gl, gl_transitions__WEBPACK_IMPORTED_MODULE_0___default().find((t) => t.name === name));\n    }\n    renderTransition(from, to, width, height, duration = 3000) {\n        return new Promise((resolve, reject) => {\n            let start = null;\n            const loop = (timestamp) => {\n                console.log(timestamp);\n                if (!start)\n                    start = timestamp;\n                let progress = timestamp - start;\n                try {\n                    const prg = 1 - (progress / duration % 1);\n                    this.transition.draw(prg, to, from, width, height, {});\n                }\n                catch {\n                    reject();\n                }\n                if (progress <= duration) {\n                    requestAnimationFrame(loop);\n                }\n                else {\n                    resolve();\n                }\n            };\n            requestAnimationFrame(loop);\n        });\n    }\n}\n\n\n//# sourceURL=webpack://rmh_touch/./src/main.ts?");

/***/ }),

/***/ "./src/section.ts":
/*!************************!*\
  !*** ./src/section.ts ***!
  \************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Section\": () => /* binding */ Section\n/* harmony export */ });\nclass Section {\n    constructor(mainNode) {\n        this.node = mainNode;\n        const node = this.node.querySelector(\"img\");\n        if (!node) {\n            throw new Error(`No node by selector \"img\" in section`);\n        }\n        this.image = node;\n    }\n    get points() {\n        const area = this.node.dataset.area;\n        if (!area)\n            return [[0, 0], [0, 0]];\n        const [x1, y1, x2, y2] = area.split(\",\").map(char => Number.parseInt(char) || 0);\n        return [[x1, y1], [x2, y2]];\n    }\n}\n\n\n//# sourceURL=webpack://rmh_touch/./src/section.ts?");

/***/ }),

/***/ "./node_modules/typedarray-pool/pool.js":
/*!**********************************************!*\
  !*** ./node_modules/typedarray-pool/pool.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nvar bits = __webpack_require__(/*! bit-twiddle */ \"./node_modules/bit-twiddle/twiddle.js\")\nvar dup = __webpack_require__(/*! dup */ \"./node_modules/dup/dup.js\")\nvar Buffer = __webpack_require__(/*! buffer */ \"./node_modules/buffer/index.js\").Buffer\n\n//Legacy pool support\nif(!__webpack_require__.g.__TYPEDARRAY_POOL) {\n  __webpack_require__.g.__TYPEDARRAY_POOL = {\n      UINT8     : dup([32, 0])\n    , UINT16    : dup([32, 0])\n    , UINT32    : dup([32, 0])\n    , BIGUINT64 : dup([32, 0])\n    , INT8      : dup([32, 0])\n    , INT16     : dup([32, 0])\n    , INT32     : dup([32, 0])\n    , BIGINT64  : dup([32, 0])\n    , FLOAT     : dup([32, 0])\n    , DOUBLE    : dup([32, 0])\n    , DATA      : dup([32, 0])\n    , UINT8C    : dup([32, 0])\n    , BUFFER    : dup([32, 0])\n  }\n}\n\nvar hasUint8C = (typeof Uint8ClampedArray) !== 'undefined'\nvar hasBigUint64 = (typeof BigUint64Array) !== 'undefined'\nvar hasBigInt64 = (typeof BigInt64Array) !== 'undefined'\nvar POOL = __webpack_require__.g.__TYPEDARRAY_POOL\n\n//Upgrade pool\nif(!POOL.UINT8C) {\n  POOL.UINT8C = dup([32, 0])\n}\nif(!POOL.BIGUINT64) {\n  POOL.BIGUINT64 = dup([32, 0])\n}\nif(!POOL.BIGINT64) {\n  POOL.BIGINT64 = dup([32, 0])\n}\nif(!POOL.BUFFER) {\n  POOL.BUFFER = dup([32, 0])\n}\n\n//New technique: Only allocate from ArrayBufferView and Buffer\nvar DATA    = POOL.DATA\n  , BUFFER  = POOL.BUFFER\n\nexports.free = function free(array) {\n  if(Buffer.isBuffer(array)) {\n    BUFFER[bits.log2(array.length)].push(array)\n  } else {\n    if(Object.prototype.toString.call(array) !== '[object ArrayBuffer]') {\n      array = array.buffer\n    }\n    if(!array) {\n      return\n    }\n    var n = array.length || array.byteLength\n    var log_n = bits.log2(n)|0\n    DATA[log_n].push(array)\n  }\n}\n\nfunction freeArrayBuffer(buffer) {\n  if(!buffer) {\n    return\n  }\n  var n = buffer.length || buffer.byteLength\n  var log_n = bits.log2(n)\n  DATA[log_n].push(buffer)\n}\n\nfunction freeTypedArray(array) {\n  freeArrayBuffer(array.buffer)\n}\n\nexports.freeUint8 =\nexports.freeUint16 =\nexports.freeUint32 =\nexports.freeBigUint64 =\nexports.freeInt8 =\nexports.freeInt16 =\nexports.freeInt32 =\nexports.freeBigInt64 =\nexports.freeFloat32 = \nexports.freeFloat =\nexports.freeFloat64 = \nexports.freeDouble = \nexports.freeUint8Clamped = \nexports.freeDataView = freeTypedArray\n\nexports.freeArrayBuffer = freeArrayBuffer\n\nexports.freeBuffer = function freeBuffer(array) {\n  BUFFER[bits.log2(array.length)].push(array)\n}\n\nexports.malloc = function malloc(n, dtype) {\n  if(dtype === undefined || dtype === 'arraybuffer') {\n    return mallocArrayBuffer(n)\n  } else {\n    switch(dtype) {\n      case 'uint8':\n        return mallocUint8(n)\n      case 'uint16':\n        return mallocUint16(n)\n      case 'uint32':\n        return mallocUint32(n)\n      case 'int8':\n        return mallocInt8(n)\n      case 'int16':\n        return mallocInt16(n)\n      case 'int32':\n        return mallocInt32(n)\n      case 'float':\n      case 'float32':\n        return mallocFloat(n)\n      case 'double':\n      case 'float64':\n        return mallocDouble(n)\n      case 'uint8_clamped':\n        return mallocUint8Clamped(n)\n      case 'bigint64':\n        return mallocBigInt64(n)\n      case 'biguint64':\n        return mallocBigUint64(n)\n      case 'buffer':\n        return mallocBuffer(n)\n      case 'data':\n      case 'dataview':\n        return mallocDataView(n)\n\n      default:\n        return null\n    }\n  }\n  return null\n}\n\nfunction mallocArrayBuffer(n) {\n  var n = bits.nextPow2(n)\n  var log_n = bits.log2(n)\n  var d = DATA[log_n]\n  if(d.length > 0) {\n    return d.pop()\n  }\n  return new ArrayBuffer(n)\n}\nexports.mallocArrayBuffer = mallocArrayBuffer\n\nfunction mallocUint8(n) {\n  return new Uint8Array(mallocArrayBuffer(n), 0, n)\n}\nexports.mallocUint8 = mallocUint8\n\nfunction mallocUint16(n) {\n  return new Uint16Array(mallocArrayBuffer(2*n), 0, n)\n}\nexports.mallocUint16 = mallocUint16\n\nfunction mallocUint32(n) {\n  return new Uint32Array(mallocArrayBuffer(4*n), 0, n)\n}\nexports.mallocUint32 = mallocUint32\n\nfunction mallocInt8(n) {\n  return new Int8Array(mallocArrayBuffer(n), 0, n)\n}\nexports.mallocInt8 = mallocInt8\n\nfunction mallocInt16(n) {\n  return new Int16Array(mallocArrayBuffer(2*n), 0, n)\n}\nexports.mallocInt16 = mallocInt16\n\nfunction mallocInt32(n) {\n  return new Int32Array(mallocArrayBuffer(4*n), 0, n)\n}\nexports.mallocInt32 = mallocInt32\n\nfunction mallocFloat(n) {\n  return new Float32Array(mallocArrayBuffer(4*n), 0, n)\n}\nexports.mallocFloat32 = exports.mallocFloat = mallocFloat\n\nfunction mallocDouble(n) {\n  return new Float64Array(mallocArrayBuffer(8*n), 0, n)\n}\nexports.mallocFloat64 = exports.mallocDouble = mallocDouble\n\nfunction mallocUint8Clamped(n) {\n  if(hasUint8C) {\n    return new Uint8ClampedArray(mallocArrayBuffer(n), 0, n)\n  } else {\n    return mallocUint8(n)\n  }\n}\nexports.mallocUint8Clamped = mallocUint8Clamped\n\nfunction mallocBigUint64(n) {\n  if(hasBigUint64) {\n    return new BigUint64Array(mallocArrayBuffer(8*n), 0, n)\n  } else {\n    return null;\n  }\n}\nexports.mallocBigUint64 = mallocBigUint64\n\nfunction mallocBigInt64(n) {\n  if (hasBigInt64) {\n    return new BigInt64Array(mallocArrayBuffer(8*n), 0, n)\n  } else {\n    return null;\n  }\n}\nexports.mallocBigInt64 = mallocBigInt64\n\nfunction mallocDataView(n) {\n  return new DataView(mallocArrayBuffer(n), 0, n)\n}\nexports.mallocDataView = mallocDataView\n\nfunction mallocBuffer(n) {\n  n = bits.nextPow2(n)\n  var log_n = bits.log2(n)\n  var cache = BUFFER[log_n]\n  if(cache.length > 0) {\n    return cache.pop()\n  }\n  return new Buffer(n)\n}\nexports.mallocBuffer = mallocBuffer\n\nexports.clearCache = function clearCache() {\n  for(var i=0; i<32; ++i) {\n    POOL.UINT8[i].length = 0\n    POOL.UINT16[i].length = 0\n    POOL.UINT32[i].length = 0\n    POOL.INT8[i].length = 0\n    POOL.INT16[i].length = 0\n    POOL.INT32[i].length = 0\n    POOL.FLOAT[i].length = 0\n    POOL.DOUBLE[i].length = 0\n    POOL.BIGUINT64[i].length = 0\n    POOL.BIGINT64[i].length = 0\n    POOL.UINT8C[i].length = 0\n    DATA[i].length = 0\n    BUFFER[i].length = 0\n  }\n}\n\n\n//# sourceURL=webpack://rmh_touch/./node_modules/typedarray-pool/pool.js?");

/***/ }),

/***/ "./node_modules/uniq/uniq.js":
/*!***********************************!*\
  !*** ./node_modules/uniq/uniq.js ***!
  \***********************************/
/***/ ((module) => {

"use strict";
eval("\n\nfunction unique_pred(list, compare) {\n  var ptr = 1\n    , len = list.length\n    , a=list[0], b=list[0]\n  for(var i=1; i<len; ++i) {\n    b = a\n    a = list[i]\n    if(compare(a, b)) {\n      if(i === ptr) {\n        ptr++\n        continue\n      }\n      list[ptr++] = a\n    }\n  }\n  list.length = ptr\n  return list\n}\n\nfunction unique_eq(list) {\n  var ptr = 1\n    , len = list.length\n    , a=list[0], b = list[0]\n  for(var i=1; i<len; ++i, b=a) {\n    b = a\n    a = list[i]\n    if(a !== b) {\n      if(i === ptr) {\n        ptr++\n        continue\n      }\n      list[ptr++] = a\n    }\n  }\n  list.length = ptr\n  return list\n}\n\nfunction unique(list, compare, sorted) {\n  if(list.length === 0) {\n    return list\n  }\n  if(compare) {\n    if(!sorted) {\n      list.sort(compare)\n    }\n    return unique_pred(list, compare)\n  }\n  if(!sorted) {\n    list.sort()\n  }\n  return unique_eq(list)\n}\n\nmodule.exports = unique\n\n\n//# sourceURL=webpack://rmh_touch/./node_modules/uniq/uniq.js?");

/***/ }),

/***/ "./node_modules/weakmap-shim/create-store.js":
/*!***************************************************!*\
  !*** ./node_modules/weakmap-shim/create-store.js ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var hiddenStore = __webpack_require__(/*! ./hidden-store.js */ \"./node_modules/weakmap-shim/hidden-store.js\");\n\nmodule.exports = createStore;\n\nfunction createStore() {\n    var key = {};\n\n    return function (obj) {\n        if ((typeof obj !== 'object' || obj === null) &&\n            typeof obj !== 'function'\n        ) {\n            throw new Error('Weakmap-shim: Key must be object')\n        }\n\n        var store = obj.valueOf(key);\n        return store && store.identity === key ?\n            store : hiddenStore(obj, key);\n    };\n}\n\n\n//# sourceURL=webpack://rmh_touch/./node_modules/weakmap-shim/create-store.js?");

/***/ }),

/***/ "./node_modules/weakmap-shim/hidden-store.js":
/*!***************************************************!*\
  !*** ./node_modules/weakmap-shim/hidden-store.js ***!
  \***************************************************/
/***/ ((module) => {

eval("module.exports = hiddenStore;\n\nfunction hiddenStore(obj, key) {\n    var store = { identity: key };\n    var valueOf = obj.valueOf;\n\n    Object.defineProperty(obj, \"valueOf\", {\n        value: function (value) {\n            return value !== key ?\n                valueOf.apply(this, arguments) : store;\n        },\n        writable: true\n    });\n\n    return store;\n}\n\n\n//# sourceURL=webpack://rmh_touch/./node_modules/weakmap-shim/hidden-store.js?");

/***/ }),

/***/ "./node_modules/weakmap-shim/index.js":
/*!********************************************!*\
  !*** ./node_modules/weakmap-shim/index.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// Original - @Gozola.\n// https://gist.github.com/Gozala/1269991\n// This is a reimplemented version (with a few bug fixes).\n\nvar createStore = __webpack_require__(/*! ./create-store.js */ \"./node_modules/weakmap-shim/create-store.js\");\n\nmodule.exports = weakMap;\n\nfunction weakMap() {\n    var privates = createStore();\n\n    return {\n        'get': function (key, fallback) {\n            var store = privates(key)\n            return store.hasOwnProperty('value') ?\n                store.value : fallback\n        },\n        'set': function (key, value) {\n            privates(key).value = value;\n            return this;\n        },\n        'has': function(key) {\n            return 'value' in privates(key);\n        },\n        'delete': function (key) {\n            return delete privates(key).value;\n        }\n    }\n}\n\n\n//# sourceURL=webpack://rmh_touch/./node_modules/weakmap-shim/index.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		if(__webpack_module_cache__[moduleId]) {
/******/ 			return __webpack_module_cache__[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => module['default'] :
/******/ 				() => module;
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/global */
/******/ 	(() => {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop)
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	// startup
/******/ 	// Load entry module
/******/ 	__webpack_require__("./src/app.ts");
/******/ 	// This entry module used 'exports' so it can't be inlined
/******/ })()
;